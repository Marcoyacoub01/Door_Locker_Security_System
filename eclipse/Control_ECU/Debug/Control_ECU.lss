
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c0  00800060  000038be  00003952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800220  00800220  00003b12  2**0
                  ALLOC
  3 .stab         00003dec  00000000  00000000  00003b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016a0  00000000  00000000  00007900  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00008fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00009120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000092f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000b301  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000c462  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d468  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000d608  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000d8c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 df 18 	jmp	0x31be	; 0x31be <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 32       	cpi	r26, 0x20	; 32
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e2       	ldi	r26, 0x20	; 32
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 32       	cpi	r26, 0x23	; 35
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 0c 	call	0x1814	; 0x1814 <main>
      8a:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ef       	ldi	r26, 0xF9	; 249
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fd 1b 	jmp	0x37fa	; 0x37fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ef       	ldi	r24, 0xF9	; 249
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fd 1b 	jmp	0x37fa	; 0x37fa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	ef 5f       	subi	r30, 0xFF	; 255
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <count_second>:
 ******************************************************************************************************/

uint8 seconds = 0 ;
/*timer1 call back function*/
void count_second()
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	seconds++;
     ca8:	80 91 20 02 	lds	r24, 0x0220
     cac:	8f 5f       	subi	r24, 0xFF	; 255
     cae:	80 93 20 02 	sts	0x0220, r24
}
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <initialization>:
 * Description :
 * intializations of the global interrupt , Buzzer , DcMotor , TIMER1, I2C , LCD , UART and LCD
 */

void initialization(void)
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	6c 97       	sbiw	r28, 0x1c	; 28
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);
     ccc:	af e5       	ldi	r26, 0x5F	; 95
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	ef e5       	ldi	r30, 0x5F	; 95
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	80 68       	ori	r24, 0x80	; 128
     cd8:	8c 93       	st	X, r24
	Buzzer_init();
     cda:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <Buzzer_init>
	DcMotor_Init();
     cde:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <DcMotor_Init>
	Timer1_setCallBack(count_second);
     ce2:	80 e5       	ldi	r24, 0x50	; 80
     ce4:	96 e0       	ldi	r25, 0x06	; 6
     ce6:	0e 94 af 19 	call	0x335e	; 0x335e <Timer1_setCallBack>
	//Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
	//Timer1_init(&timer1_configurations);
	TWI_ConfigType twi_configurations = {0x10,400000};
     cea:	80 e1       	ldi	r24, 0x10	; 16
     cec:	8f 87       	std	Y+15, r24	; 0x0f
     cee:	80 e8       	ldi	r24, 0x80	; 128
     cf0:	88 8b       	std	Y+16, r24	; 0x10
	TWI_init(&twi_configurations);
     cf2:	ce 01       	movw	r24, r28
     cf4:	0f 96       	adiw	r24, 0x0f	; 15
     cf6:	0e 94 c1 19 	call	0x3382	; 0x3382 <TWI_init>
	UART_ConfigType uart_configurations = {DATA_8_BIT,DISABLED,ONE_STOP_BIT,9600};
     cfa:	ce 01       	movw	r24, r28
     cfc:	41 96       	adiw	r24, 0x11	; 17
     cfe:	99 8f       	std	Y+25, r25	; 0x19
     d00:	88 8f       	std	Y+24, r24	; 0x18
     d02:	e1 e0       	ldi	r30, 0x01	; 1
     d04:	f2 e0       	ldi	r31, 0x02	; 2
     d06:	fb 8f       	std	Y+27, r31	; 0x1b
     d08:	ea 8f       	std	Y+26, r30	; 0x1a
     d0a:	f7 e0       	ldi	r31, 0x07	; 7
     d0c:	fc 8f       	std	Y+28, r31	; 0x1c
     d0e:	ea 8d       	ldd	r30, Y+26	; 0x1a
     d10:	fb 8d       	ldd	r31, Y+27	; 0x1b
     d12:	00 80       	ld	r0, Z
     d14:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d16:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	9b 8f       	std	Y+27, r25	; 0x1b
     d1c:	8a 8f       	std	Y+26, r24	; 0x1a
     d1e:	e8 8d       	ldd	r30, Y+24	; 0x18
     d20:	f9 8d       	ldd	r31, Y+25	; 0x19
     d22:	00 82       	st	Z, r0
     d24:	88 8d       	ldd	r24, Y+24	; 0x18
     d26:	99 8d       	ldd	r25, Y+25	; 0x19
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	99 8f       	std	Y+25, r25	; 0x19
     d2c:	88 8f       	std	Y+24, r24	; 0x18
     d2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d30:	91 50       	subi	r25, 0x01	; 1
     d32:	9c 8f       	std	Y+28, r25	; 0x1c
     d34:	ec 8d       	ldd	r30, Y+28	; 0x1c
     d36:	ee 23       	and	r30, r30
     d38:	51 f7       	brne	.-44     	; 0xd0e <initialization+0x56>
	UART_init(&uart_configurations);
     d3a:	ce 01       	movw	r24, r28
     d3c:	41 96       	adiw	r24, 0x11	; 17
     d3e:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <UART_init>
	LCD_init();
     d42:	0e 94 79 13 	call	0x26f2	; 0x26f2 <LCD_init>
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	a6 e9       	ldi	r26, 0x96	; 150
     d4c:	b3 e4       	ldi	r27, 0x43	; 67
     d4e:	8b 87       	std	Y+11, r24	; 0x0b
     d50:	9c 87       	std	Y+12, r25	; 0x0c
     d52:	ad 87       	std	Y+13, r26	; 0x0d
     d54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d56:	6b 85       	ldd	r22, Y+11	; 0x0b
     d58:	7c 85       	ldd	r23, Y+12	; 0x0c
     d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	4a ef       	ldi	r20, 0xFA	; 250
     d64:	54 e4       	ldi	r21, 0x44	; 68
     d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	8f 83       	std	Y+7, r24	; 0x07
     d70:	98 87       	std	Y+8, r25	; 0x08
     d72:	a9 87       	std	Y+9, r26	; 0x09
     d74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d76:	6f 81       	ldd	r22, Y+7	; 0x07
     d78:	78 85       	ldd	r23, Y+8	; 0x08
     d7a:	89 85       	ldd	r24, Y+9	; 0x09
     d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e8       	ldi	r20, 0x80	; 128
     d84:	5f e3       	ldi	r21, 0x3F	; 63
     d86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d8a:	88 23       	and	r24, r24
     d8c:	2c f4       	brge	.+10     	; 0xd98 <initialization+0xe0>
		__ticks = 1;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	9e 83       	std	Y+6, r25	; 0x06
     d94:	8d 83       	std	Y+5, r24	; 0x05
     d96:	3f c0       	rjmp	.+126    	; 0xe16 <initialization+0x15e>
	else if (__tmp > 65535)
     d98:	6f 81       	ldd	r22, Y+7	; 0x07
     d9a:	78 85       	ldd	r23, Y+8	; 0x08
     d9c:	89 85       	ldd	r24, Y+9	; 0x09
     d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	3f ef       	ldi	r19, 0xFF	; 255
     da4:	4f e7       	ldi	r20, 0x7F	; 127
     da6:	57 e4       	ldi	r21, 0x47	; 71
     da8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dac:	18 16       	cp	r1, r24
     dae:	4c f5       	brge	.+82     	; 0xe02 <initialization+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db0:	6b 85       	ldd	r22, Y+11	; 0x0b
     db2:	7c 85       	ldd	r23, Y+12	; 0x0c
     db4:	8d 85       	ldd	r24, Y+13	; 0x0d
     db6:	9e 85       	ldd	r25, Y+14	; 0x0e
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e2       	ldi	r20, 0x20	; 32
     dbe:	51 e4       	ldi	r21, 0x41	; 65
     dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	bc 01       	movw	r22, r24
     dca:	cd 01       	movw	r24, r26
     dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	9e 83       	std	Y+6, r25	; 0x06
     dd6:	8d 83       	std	Y+5, r24	; 0x05
     dd8:	0f c0       	rjmp	.+30     	; 0xdf8 <initialization+0x140>
     dda:	88 ec       	ldi	r24, 0xC8	; 200
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	9c 83       	std	Y+4, r25	; 0x04
     de0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	9c 81       	ldd	r25, Y+4	; 0x04
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <initialization+0x12e>
     dea:	9c 83       	std	Y+4, r25	; 0x04
     dec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	9e 81       	ldd	r25, Y+6	; 0x06
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	9e 83       	std	Y+6, r25	; 0x06
     df6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	9e 81       	ldd	r25, Y+6	; 0x06
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	69 f7       	brne	.-38     	; 0xdda <initialization+0x122>
     e00:	14 c0       	rjmp	.+40     	; 0xe2a <initialization+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	9e 83       	std	Y+6, r25	; 0x06
     e14:	8d 83       	std	Y+5, r24	; 0x05
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	9a 83       	std	Y+2, r25	; 0x02
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <initialization+0x16a>
     e26:	9a 83       	std	Y+2, r25	; 0x02
     e28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
}
     e2a:	6c 96       	adiw	r28, 0x1c	; 28
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <sync_send>:
/*
 * Description :
 * sync the time of send and recive between the UARTs
 */
void sync_send(void)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(READY);
     e44:	80 e1       	ldi	r24, 0x10	; 16
     e46:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>
	while(UART_recieveByte()!=READY);
     e4a:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <UART_recieveByte>
     e4e:	80 31       	cpi	r24, 0x10	; 16
     e50:	e1 f7       	brne	.-8      	; 0xe4a <sync_send+0xe>
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <sync_recive>:
/*
 * Description :
 * sync the time of send and recive between the UARTs
 */
void sync_recive(void)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte()!=READY);
     e60:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <UART_recieveByte>
     e64:	80 31       	cpi	r24, 0x10	; 16
     e66:	e1 f7       	brne	.-8      	; 0xe60 <sync_recive+0x8>
	UART_sendByte(READY);
     e68:	80 e1       	ldi	r24, 0x10	; 16
     e6a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <send_pass>:
 * This function is responsible for sending the password from one Microcontroller to the other
 * through UART
 * and this function calls sync_send() to start sending
 */
void send_pass(uint8 *pass)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <send_pass+0x6>
     e7a:	0f 92       	push	r0
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	9b 83       	std	Y+3, r25	; 0x03
     e82:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	sync_send();
     e84:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sync_send>
	for (i = 0 ; i<5 ; i++)
     e88:	19 82       	std	Y+1, r1	; 0x01
     e8a:	0e c0       	rjmp	.+28     	; 0xea8 <send_pass+0x34>
	{
			UART_sendByte(pass[i]);
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	9b 81       	ldd	r25, Y+3	; 0x03
     e96:	fc 01       	movw	r30, r24
     e98:	e2 0f       	add	r30, r18
     e9a:	f3 1f       	adc	r31, r19
     e9c:	80 81       	ld	r24, Z
     e9e:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>
 */
void send_pass(uint8 *pass)
{
	uint8 i;
	sync_send();
	for (i = 0 ; i<5 ; i++)
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	8f 5f       	subi	r24, 0xFF	; 255
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	85 30       	cpi	r24, 0x05	; 5
     eac:	78 f3       	brcs	.-34     	; 0xe8c <send_pass+0x18>
	{
			UART_sendByte(pass[i]);
	}
}
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <recive_password>:
 *
 * Parameters:
 * uint8 *receive_pass: Pointer to an array where the received password will be stored.
 */
void recive_password(uint8 *recive_pass)
{
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <recive_password+0xa>
     ec4:	0f 92       	push	r0
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	9b 83       	std	Y+3, r25	; 0x03
     ecc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i ;
	sync_recive();
     ece:	0e 94 2c 07 	call	0xe58	; 0xe58 <sync_recive>
	for (i = 0 ; i<5 ; i++)
     ed2:	19 82       	std	Y+1, r1	; 0x01
     ed4:	0f c0       	rjmp	.+30     	; 0xef4 <recive_password+0x3a>
		{
			recive_pass[i] = UART_recieveByte();
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	9b 81       	ldd	r25, Y+3	; 0x03
     ee0:	8c 01       	movw	r16, r24
     ee2:	02 0f       	add	r16, r18
     ee4:	13 1f       	adc	r17, r19
     ee6:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <UART_recieveByte>
     eea:	f8 01       	movw	r30, r16
     eec:	80 83       	st	Z, r24
 */
void recive_password(uint8 *recive_pass)
{
	uint8 i ;
	sync_recive();
	for (i = 0 ; i<5 ; i++)
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	85 30       	cpi	r24, 0x05	; 5
     ef8:	70 f3       	brcs	.-36     	; 0xed6 <recive_password+0x1c>
		{
			recive_pass[i] = UART_recieveByte();
		}
}
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	08 95       	ret

00000f0a <check_passwords>:
 * This function is responsible for compare between two passwords
 * if matched it will return  one  which is matched
 * if not matched it will return  zero  which is unmatched
 */
uint8 check_passwords(uint8 *check_password_one,uint8 *check_password_two)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	27 97       	sbiw	r28, 0x07	; 7
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	9c 83       	std	Y+4, r25	; 0x04
     f20:	8b 83       	std	Y+3, r24	; 0x03
     f22:	7e 83       	std	Y+6, r23	; 0x06
     f24:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i;
	uint8  two_passwords_are_equal = 1; // Assume arrays are equal by default
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	89 83       	std	Y+1, r24	; 0x01
	for (i = 0 ; i<5 ; i++)
     f2a:	1a 82       	std	Y+2, r1	; 0x02
     f2c:	19 c0       	rjmp	.+50     	; 0xf60 <check_passwords+0x56>
	{
		 if (check_password_one[i] != check_password_two[i])
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	fc 01       	movw	r30, r24
     f3a:	e2 0f       	add	r30, r18
     f3c:	f3 1f       	adc	r31, r19
     f3e:	40 81       	ld	r20, Z
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	9e 81       	ldd	r25, Y+6	; 0x06
     f4a:	fc 01       	movw	r30, r24
     f4c:	e2 0f       	add	r30, r18
     f4e:	f3 1f       	adc	r31, r19
     f50:	80 81       	ld	r24, Z
     f52:	48 17       	cp	r20, r24
     f54:	11 f0       	breq	.+4      	; 0xf5a <check_passwords+0x50>
		 {
		     return 0;
     f56:	1f 82       	std	Y+7, r1	; 0x07
     f58:	08 c0       	rjmp	.+16     	; 0xf6a <check_passwords+0x60>
 */
uint8 check_passwords(uint8 *check_password_one,uint8 *check_password_two)
{
	uint8 i;
	uint8  two_passwords_are_equal = 1; // Assume arrays are equal by default
	for (i = 0 ; i<5 ; i++)
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	8f 5f       	subi	r24, 0xFF	; 255
     f5e:	8a 83       	std	Y+2, r24	; 0x02
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	85 30       	cpi	r24, 0x05	; 5
     f64:	20 f3       	brcs	.-56     	; 0xf2e <check_passwords+0x24>
		 if (check_password_one[i] != check_password_two[i])
		 {
		     return 0;
		 }
	}
	return two_passwords_are_equal;
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	8f 83       	std	Y+7, r24	; 0x07
     f6a:	8f 81       	ldd	r24, Y+7	; 0x07
}
     f6c:	27 96       	adiw	r28, 0x07	; 7
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <write_to_eeprom>:
 *
 * Parameters:
 * uint8 *password: Pointer to an array containing the password to be written.
 */
void write_to_eeprom(uint8 *password)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	61 97       	sbiw	r28, 0x11	; 17
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	99 8b       	std	Y+17, r25	; 0x11
     f94:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i =0 ;i<5 ; i++)
     f96:	1f 86       	std	Y+15, r1	; 0x0f
     f98:	88 c0       	rjmp	.+272    	; 0x10aa <write_to_eeprom+0x12c>
			{
				EEPROM_writeByte((0x0311+i),password[i]);
     f9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	8f 5e       	subi	r24, 0xEF	; 239
     fa2:	9c 4f       	sbci	r25, 0xFC	; 252
     fa4:	ac 01       	movw	r20, r24
     fa6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	88 89       	ldd	r24, Y+16	; 0x10
     fae:	99 89       	ldd	r25, Y+17	; 0x11
     fb0:	fc 01       	movw	r30, r24
     fb2:	e2 0f       	add	r30, r18
     fb4:	f3 1f       	adc	r31, r19
     fb6:	20 81       	ld	r18, Z
     fb8:	ca 01       	movw	r24, r20
     fba:	62 2f       	mov	r22, r18
     fbc:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <EEPROM_writeByte>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a0 e2       	ldi	r26, 0x20	; 32
     fc6:	b1 e4       	ldi	r27, 0x41	; 65
     fc8:	8b 87       	std	Y+11, r24	; 0x0b
     fca:	9c 87       	std	Y+12, r25	; 0x0c
     fcc:	ad 87       	std	Y+13, r26	; 0x0d
     fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	4a ef       	ldi	r20, 0xFA	; 250
     fde:	54 e4       	ldi	r21, 0x44	; 68
     fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	8f 83       	std	Y+7, r24	; 0x07
     fea:	98 87       	std	Y+8, r25	; 0x08
     fec:	a9 87       	std	Y+9, r26	; 0x09
     fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff0:	6f 81       	ldd	r22, Y+7	; 0x07
     ff2:	78 85       	ldd	r23, Y+8	; 0x08
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e8       	ldi	r20, 0x80	; 128
     ffe:	5f e3       	ldi	r21, 0x3F	; 63
    1000:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1004:	88 23       	and	r24, r24
    1006:	2c f4       	brge	.+10     	; 0x1012 <write_to_eeprom+0x94>
		__ticks = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9e 83       	std	Y+6, r25	; 0x06
    100e:	8d 83       	std	Y+5, r24	; 0x05
    1010:	3f c0       	rjmp	.+126    	; 0x1090 <write_to_eeprom+0x112>
	else if (__tmp > 65535)
    1012:	6f 81       	ldd	r22, Y+7	; 0x07
    1014:	78 85       	ldd	r23, Y+8	; 0x08
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	4f e7       	ldi	r20, 0x7F	; 127
    1020:	57 e4       	ldi	r21, 0x47	; 71
    1022:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1026:	18 16       	cp	r1, r24
    1028:	4c f5       	brge	.+82     	; 0x107c <write_to_eeprom+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102a:	6b 85       	ldd	r22, Y+11	; 0x0b
    102c:	7c 85       	ldd	r23, Y+12	; 0x0c
    102e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1030:	9e 85       	ldd	r25, Y+14	; 0x0e
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e2       	ldi	r20, 0x20	; 32
    1038:	51 e4       	ldi	r21, 0x41	; 65
    103a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9e 83       	std	Y+6, r25	; 0x06
    1050:	8d 83       	std	Y+5, r24	; 0x05
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <write_to_eeprom+0xf4>
    1054:	88 ec       	ldi	r24, 0xC8	; 200
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	9c 83       	std	Y+4, r25	; 0x04
    105a:	8b 83       	std	Y+3, r24	; 0x03
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <write_to_eeprom+0xe2>
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	9e 83       	std	Y+6, r25	; 0x06
    1070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	69 f7       	brne	.-38     	; 0x1054 <write_to_eeprom+0xd6>
    107a:	14 c0       	rjmp	.+40     	; 0x10a4 <write_to_eeprom+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107c:	6f 81       	ldd	r22, Y+7	; 0x07
    107e:	78 85       	ldd	r23, Y+8	; 0x08
    1080:	89 85       	ldd	r24, Y+9	; 0x09
    1082:	9a 85       	ldd	r25, Y+10	; 0x0a
    1084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <write_to_eeprom+0x11e>
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
 * uint8 *password: Pointer to an array containing the password to be written.
 */
void write_to_eeprom(uint8 *password)
{
	uint8 i;
	for (i =0 ;i<5 ; i++)
    10a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
    10a8:	8f 87       	std	Y+15, r24	; 0x0f
    10aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ac:	85 30       	cpi	r24, 0x05	; 5
    10ae:	08 f4       	brcc	.+2      	; 0x10b2 <write_to_eeprom+0x134>
    10b0:	74 cf       	rjmp	.-280    	; 0xf9a <write_to_eeprom+0x1c>
			{
				EEPROM_writeByte((0x0311+i),password[i]);
				_delay_ms(10);
			}
}
    10b2:	61 96       	adiw	r28, 0x11	; 17
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <read_from_eeprom>:
 *
 * Parameters:
 * uint8 *password_eeprom: Pointer to an array where the read password will be stored.
 */
void read_from_eeprom(uint8 *password_epprom)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	61 97       	sbiw	r28, 0x11	; 17
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	99 8b       	std	Y+17, r25	; 0x11
    10da:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i =0 ;i<5 ; i++)
    10dc:	1f 86       	std	Y+15, r1	; 0x0f
    10de:	86 c0       	rjmp	.+268    	; 0x11ec <read_from_eeprom+0x128>
			{
				EEPROM_readByte((0x311+i),&password_epprom[i]);
    10e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	8f 5e       	subi	r24, 0xEF	; 239
    10e8:	9c 4f       	sbci	r25, 0xFC	; 252
    10ea:	ac 01       	movw	r20, r24
    10ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	88 89       	ldd	r24, Y+16	; 0x10
    10f4:	99 89       	ldd	r25, Y+17	; 0x11
    10f6:	28 0f       	add	r18, r24
    10f8:	39 1f       	adc	r19, r25
    10fa:	ca 01       	movw	r24, r20
    10fc:	b9 01       	movw	r22, r18
    10fe:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <EEPROM_readByte>
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a0 e2       	ldi	r26, 0x20	; 32
    1108:	b1 e4       	ldi	r27, 0x41	; 65
    110a:	8b 87       	std	Y+11, r24	; 0x0b
    110c:	9c 87       	std	Y+12, r25	; 0x0c
    110e:	ad 87       	std	Y+13, r26	; 0x0d
    1110:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1112:	6b 85       	ldd	r22, Y+11	; 0x0b
    1114:	7c 85       	ldd	r23, Y+12	; 0x0c
    1116:	8d 85       	ldd	r24, Y+13	; 0x0d
    1118:	9e 85       	ldd	r25, Y+14	; 0x0e
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	4a ef       	ldi	r20, 0xFA	; 250
    1120:	54 e4       	ldi	r21, 0x44	; 68
    1122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	8f 83       	std	Y+7, r24	; 0x07
    112c:	98 87       	std	Y+8, r25	; 0x08
    112e:	a9 87       	std	Y+9, r26	; 0x09
    1130:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1132:	6f 81       	ldd	r22, Y+7	; 0x07
    1134:	78 85       	ldd	r23, Y+8	; 0x08
    1136:	89 85       	ldd	r24, Y+9	; 0x09
    1138:	9a 85       	ldd	r25, Y+10	; 0x0a
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e8       	ldi	r20, 0x80	; 128
    1140:	5f e3       	ldi	r21, 0x3F	; 63
    1142:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1146:	88 23       	and	r24, r24
    1148:	2c f4       	brge	.+10     	; 0x1154 <read_from_eeprom+0x90>
		__ticks = 1;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	9e 83       	std	Y+6, r25	; 0x06
    1150:	8d 83       	std	Y+5, r24	; 0x05
    1152:	3f c0       	rjmp	.+126    	; 0x11d2 <read_from_eeprom+0x10e>
	else if (__tmp > 65535)
    1154:	6f 81       	ldd	r22, Y+7	; 0x07
    1156:	78 85       	ldd	r23, Y+8	; 0x08
    1158:	89 85       	ldd	r24, Y+9	; 0x09
    115a:	9a 85       	ldd	r25, Y+10	; 0x0a
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	3f ef       	ldi	r19, 0xFF	; 255
    1160:	4f e7       	ldi	r20, 0x7F	; 127
    1162:	57 e4       	ldi	r21, 0x47	; 71
    1164:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1168:	18 16       	cp	r1, r24
    116a:	4c f5       	brge	.+82     	; 0x11be <read_from_eeprom+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116c:	6b 85       	ldd	r22, Y+11	; 0x0b
    116e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1170:	8d 85       	ldd	r24, Y+13	; 0x0d
    1172:	9e 85       	ldd	r25, Y+14	; 0x0e
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e2       	ldi	r20, 0x20	; 32
    117a:	51 e4       	ldi	r21, 0x41	; 65
    117c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	bc 01       	movw	r22, r24
    1186:	cd 01       	movw	r24, r26
    1188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	8d 83       	std	Y+5, r24	; 0x05
    1194:	0f c0       	rjmp	.+30     	; 0x11b4 <read_from_eeprom+0xf0>
    1196:	88 ec       	ldi	r24, 0xC8	; 200
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	9c 83       	std	Y+4, r25	; 0x04
    119c:	8b 83       	std	Y+3, r24	; 0x03
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <read_from_eeprom+0xde>
    11a6:	9c 83       	std	Y+4, r25	; 0x04
    11a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	9e 83       	std	Y+6, r25	; 0x06
    11b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	9e 81       	ldd	r25, Y+6	; 0x06
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	69 f7       	brne	.-38     	; 0x1196 <read_from_eeprom+0xd2>
    11bc:	14 c0       	rjmp	.+40     	; 0x11e6 <read_from_eeprom+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11be:	6f 81       	ldd	r22, Y+7	; 0x07
    11c0:	78 85       	ldd	r23, Y+8	; 0x08
    11c2:	89 85       	ldd	r24, Y+9	; 0x09
    11c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	9e 83       	std	Y+6, r25	; 0x06
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	8d 81       	ldd	r24, Y+5	; 0x05
    11d4:	9e 81       	ldd	r25, Y+6	; 0x06
    11d6:	9a 83       	std	Y+2, r25	; 0x02
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	f1 f7       	brne	.-4      	; 0x11de <read_from_eeprom+0x11a>
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	89 83       	std	Y+1, r24	; 0x01
 * uint8 *password_eeprom: Pointer to an array where the read password will be stored.
 */
void read_from_eeprom(uint8 *password_epprom)
{
	uint8 i;
	for (i =0 ;i<5 ; i++)
    11e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	8f 87       	std	Y+15, r24	; 0x0f
    11ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ee:	85 30       	cpi	r24, 0x05	; 5
    11f0:	08 f4       	brcc	.+2      	; 0x11f4 <read_from_eeprom+0x130>
    11f2:	76 cf       	rjmp	.-276    	; 0x10e0 <read_from_eeprom+0x1c>
			{
				EEPROM_readByte((0x311+i),&password_epprom[i]);
				_delay_ms(10);
			}
}
    11f4:	61 96       	adiw	r28, 0x11	; 17
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <open_door>:
 * Description:
 *  Initiates timer1 and start count the seconds and open the door using motor for a specific time
 *
 */
void open_door(void)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	2b 97       	sbiw	r28, 0x0b	; 11
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
    121a:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
	Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
    121e:	ce 01       	movw	r24, r28
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	98 87       	std	Y+8, r25	; 0x08
    1224:	8f 83       	std	Y+7, r24	; 0x07
    1226:	e8 e0       	ldi	r30, 0x08	; 8
    1228:	f2 e0       	ldi	r31, 0x02	; 2
    122a:	fa 87       	std	Y+10, r31	; 0x0a
    122c:	e9 87       	std	Y+9, r30	; 0x09
    122e:	f6 e0       	ldi	r31, 0x06	; 6
    1230:	fb 87       	std	Y+11, r31	; 0x0b
    1232:	e9 85       	ldd	r30, Y+9	; 0x09
    1234:	fa 85       	ldd	r31, Y+10	; 0x0a
    1236:	00 80       	ld	r0, Z
    1238:	89 85       	ldd	r24, Y+9	; 0x09
    123a:	9a 85       	ldd	r25, Y+10	; 0x0a
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	9a 87       	std	Y+10, r25	; 0x0a
    1240:	89 87       	std	Y+9, r24	; 0x09
    1242:	ef 81       	ldd	r30, Y+7	; 0x07
    1244:	f8 85       	ldd	r31, Y+8	; 0x08
    1246:	00 82       	st	Z, r0
    1248:	8f 81       	ldd	r24, Y+7	; 0x07
    124a:	98 85       	ldd	r25, Y+8	; 0x08
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	98 87       	std	Y+8, r25	; 0x08
    1250:	8f 83       	std	Y+7, r24	; 0x07
    1252:	9b 85       	ldd	r25, Y+11	; 0x0b
    1254:	91 50       	subi	r25, 0x01	; 1
    1256:	9b 87       	std	Y+11, r25	; 0x0b
    1258:	eb 85       	ldd	r30, Y+11	; 0x0b
    125a:	ee 23       	and	r30, r30
    125c:	51 f7       	brne	.-44     	; 0x1232 <open_door+0x2c>
	Timer1_init(&timer1_configurations);
    125e:	ce 01       	movw	r24, r28
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	0e 94 45 19 	call	0x328a	; 0x328a <Timer1_init>
	seconds=0;
    1266:	10 92 20 02 	sts	0x0220, r1
	LCD_displayString("Unlocking Door");
    126a:	80 e6       	ldi	r24, 0x60	; 96
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
	LCD_moveCursor(1,0);
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
	LCD_displayString("Sec :");
    127a:	8f e6       	ldi	r24, 0x6F	; 111
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
    1282:	0f c0       	rjmp	.+30     	; 0x12a2 <open_door+0x9c>
	while(seconds !=15)
	{
		LCD_moveCursor(1,5);
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	65 e0       	ldi	r22, 0x05	; 5
    1288:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
		LCD_intgerToString(seconds+1);
    128c:	80 91 20 02 	lds	r24, 0x0220
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	0e 94 77 18 	call	0x30ee	; 0x30ee <LCD_intgerToString>
		DcMotor_Rotate(CW,100);
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	64 e6       	ldi	r22, 0x64	; 100
    129e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <DcMotor_Rotate>
	Timer1_init(&timer1_configurations);
	seconds=0;
	LCD_displayString("Unlocking Door");
	LCD_moveCursor(1,0);
	LCD_displayString("Sec :");
	while(seconds !=15)
    12a2:	80 91 20 02 	lds	r24, 0x0220
    12a6:	8f 30       	cpi	r24, 0x0F	; 15
    12a8:	69 f7       	brne	.-38     	; 0x1284 <open_door+0x7e>
	{
		LCD_moveCursor(1,5);
		LCD_intgerToString(seconds+1);
		DcMotor_Rotate(CW,100);
	}
	DcMotor_Rotate(STOP,0);
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <DcMotor_Rotate>
	Timer1_deInit();
    12b2:	0e 94 97 19 	call	0x332e	; 0x332e <Timer1_deInit>
}
    12b6:	2b 96       	adiw	r28, 0x0b	; 11
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <hold_door>:
 * Description:
 *  Initiates timer1 and start count the seconds and hold the door using motor for a specific time
 *
 */
void hold_door(void)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	2b 97       	sbiw	r28, 0x0b	; 11
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    12dc:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
	Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
    12e0:	ce 01       	movw	r24, r28
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	98 87       	std	Y+8, r25	; 0x08
    12e6:	8f 83       	std	Y+7, r24	; 0x07
    12e8:	ee e0       	ldi	r30, 0x0E	; 14
    12ea:	f2 e0       	ldi	r31, 0x02	; 2
    12ec:	fa 87       	std	Y+10, r31	; 0x0a
    12ee:	e9 87       	std	Y+9, r30	; 0x09
    12f0:	f6 e0       	ldi	r31, 0x06	; 6
    12f2:	fb 87       	std	Y+11, r31	; 0x0b
    12f4:	e9 85       	ldd	r30, Y+9	; 0x09
    12f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    12f8:	00 80       	ld	r0, Z
    12fa:	89 85       	ldd	r24, Y+9	; 0x09
    12fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	9a 87       	std	Y+10, r25	; 0x0a
    1302:	89 87       	std	Y+9, r24	; 0x09
    1304:	ef 81       	ldd	r30, Y+7	; 0x07
    1306:	f8 85       	ldd	r31, Y+8	; 0x08
    1308:	00 82       	st	Z, r0
    130a:	8f 81       	ldd	r24, Y+7	; 0x07
    130c:	98 85       	ldd	r25, Y+8	; 0x08
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	98 87       	std	Y+8, r25	; 0x08
    1312:	8f 83       	std	Y+7, r24	; 0x07
    1314:	9b 85       	ldd	r25, Y+11	; 0x0b
    1316:	91 50       	subi	r25, 0x01	; 1
    1318:	9b 87       	std	Y+11, r25	; 0x0b
    131a:	eb 85       	ldd	r30, Y+11	; 0x0b
    131c:	ee 23       	and	r30, r30
    131e:	51 f7       	brne	.-44     	; 0x12f4 <hold_door+0x2c>
    Timer1_init(&timer1_configurations);
    1320:	ce 01       	movw	r24, r28
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	0e 94 45 19 	call	0x328a	; 0x328a <Timer1_init>
	seconds=0;
    1328:	10 92 20 02 	sts	0x0220, r1
	LCD_displayString("DOOR IS OPEN");
    132c:	85 e7       	ldi	r24, 0x75	; 117
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
	LCD_moveCursor(1,0);
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
	LCD_displayString("Sec :");
    133c:	8f e6       	ldi	r24, 0x6F	; 111
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
    1344:	0f c0       	rjmp	.+30     	; 0x1364 <hold_door+0x9c>
	while(seconds !=3)
	{
		LCD_moveCursor(1,5);
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	65 e0       	ldi	r22, 0x05	; 5
    134a:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
		LCD_intgerToString(seconds+1);
    134e:	80 91 20 02 	lds	r24, 0x0220
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	0e 94 77 18 	call	0x30ee	; 0x30ee <LCD_intgerToString>
		DcMotor_Rotate(STOP,0);
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <DcMotor_Rotate>
    Timer1_init(&timer1_configurations);
	seconds=0;
	LCD_displayString("DOOR IS OPEN");
	LCD_moveCursor(1,0);
	LCD_displayString("Sec :");
	while(seconds !=3)
    1364:	80 91 20 02 	lds	r24, 0x0220
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	69 f7       	brne	.-38     	; 0x1346 <hold_door+0x7e>
	{
		LCD_moveCursor(1,5);
		LCD_intgerToString(seconds+1);
		DcMotor_Rotate(STOP,0);
	}
	Timer1_deInit();
    136c:	0e 94 97 19 	call	0x332e	; 0x332e <Timer1_deInit>
}
    1370:	2b 96       	adiw	r28, 0x0b	; 11
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <close_door>:
 * Description:
 *  Initiates timer1 and start count the seconds and close the door using motor for a specific time
 *
 */
void close_door()
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	2b 97       	sbiw	r28, 0x0b	; 11
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1396:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
	Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
    139a:	ce 01       	movw	r24, r28
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	98 87       	std	Y+8, r25	; 0x08
    13a0:	8f 83       	std	Y+7, r24	; 0x07
    13a2:	e4 e1       	ldi	r30, 0x14	; 20
    13a4:	f2 e0       	ldi	r31, 0x02	; 2
    13a6:	fa 87       	std	Y+10, r31	; 0x0a
    13a8:	e9 87       	std	Y+9, r30	; 0x09
    13aa:	f6 e0       	ldi	r31, 0x06	; 6
    13ac:	fb 87       	std	Y+11, r31	; 0x0b
    13ae:	e9 85       	ldd	r30, Y+9	; 0x09
    13b0:	fa 85       	ldd	r31, Y+10	; 0x0a
    13b2:	00 80       	ld	r0, Z
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	9a 87       	std	Y+10, r25	; 0x0a
    13bc:	89 87       	std	Y+9, r24	; 0x09
    13be:	ef 81       	ldd	r30, Y+7	; 0x07
    13c0:	f8 85       	ldd	r31, Y+8	; 0x08
    13c2:	00 82       	st	Z, r0
    13c4:	8f 81       	ldd	r24, Y+7	; 0x07
    13c6:	98 85       	ldd	r25, Y+8	; 0x08
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	98 87       	std	Y+8, r25	; 0x08
    13cc:	8f 83       	std	Y+7, r24	; 0x07
    13ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    13d0:	91 50       	subi	r25, 0x01	; 1
    13d2:	9b 87       	std	Y+11, r25	; 0x0b
    13d4:	eb 85       	ldd	r30, Y+11	; 0x0b
    13d6:	ee 23       	and	r30, r30
    13d8:	51 f7       	brne	.-44     	; 0x13ae <close_door+0x2c>
	Timer1_init(&timer1_configurations);
    13da:	ce 01       	movw	r24, r28
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	0e 94 45 19 	call	0x328a	; 0x328a <Timer1_init>
	seconds=0;
    13e2:	10 92 20 02 	sts	0x0220, r1
	LCD_displayString("Door Is Locking");
    13e6:	82 e8       	ldi	r24, 0x82	; 130
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
	LCD_moveCursor(1,0);
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
	LCD_displayString("Sec :");
    13f6:	8f e6       	ldi	r24, 0x6F	; 111
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
    13fe:	0f c0       	rjmp	.+30     	; 0x141e <close_door+0x9c>
	while(seconds !=15)
	{
		LCD_moveCursor(1,5);
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	65 e0       	ldi	r22, 0x05	; 5
    1404:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
		LCD_intgerToString(seconds+1);
    1408:	80 91 20 02 	lds	r24, 0x0220
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	0e 94 77 18 	call	0x30ee	; 0x30ee <LCD_intgerToString>
		DcMotor_Rotate(A_CW,100);
    1416:	82 e0       	ldi	r24, 0x02	; 2
    1418:	64 e6       	ldi	r22, 0x64	; 100
    141a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <DcMotor_Rotate>
	Timer1_init(&timer1_configurations);
	seconds=0;
	LCD_displayString("Door Is Locking");
	LCD_moveCursor(1,0);
	LCD_displayString("Sec :");
	while(seconds !=15)
    141e:	80 91 20 02 	lds	r24, 0x0220
    1422:	8f 30       	cpi	r24, 0x0F	; 15
    1424:	69 f7       	brne	.-38     	; 0x1400 <close_door+0x7e>
	{
		LCD_moveCursor(1,5);
		LCD_intgerToString(seconds+1);
		DcMotor_Rotate(A_CW,100);
	}
	DcMotor_Rotate(STOP,0);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <DcMotor_Rotate>
	Timer1_deInit();
    142e:	0e 94 97 19 	call	0x332e	; 0x332e <Timer1_deInit>
}
    1432:	2b 96       	adiw	r28, 0x0b	; 11
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <door_operation>:
 *  this function calls three main functions open_door() ,  hold_door() and close_door()
 *
 *
 */
void door_operation(void)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62

		open_door();
    144c:	0e 94 03 09 	call	0x1206	; 0x1206 <open_door>

		hold_door();
    1450:	0e 94 64 09 	call	0x12c8	; 0x12c8 <hold_door>

		close_door();
    1454:	0e 94 c1 09 	call	0x1382	; 0x1382 <close_door>

		sync_send();
    1458:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sync_send>
		UART_sendByte(DONE_DOOR_OPERATION); //send this byte to the HMI_ECU to tell him Control_ECU done the operation
    145c:	8c ef       	ldi	r24, 0xFC	; 252
    145e:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>
		LCD_clearScreen();
    1462:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
}
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <system_locked>:
 * Description:
 *  this function is responsible for active buzzer for 1 minute using Timer1
 *
 */
void system_locked(void)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	2b 97       	sbiw	r28, 0x0b	; 11
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1480:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
	Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
    1484:	ce 01       	movw	r24, r28
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	98 87       	std	Y+8, r25	; 0x08
    148a:	8f 83       	std	Y+7, r24	; 0x07
    148c:	ea e1       	ldi	r30, 0x1A	; 26
    148e:	f2 e0       	ldi	r31, 0x02	; 2
    1490:	fa 87       	std	Y+10, r31	; 0x0a
    1492:	e9 87       	std	Y+9, r30	; 0x09
    1494:	f6 e0       	ldi	r31, 0x06	; 6
    1496:	fb 87       	std	Y+11, r31	; 0x0b
    1498:	e9 85       	ldd	r30, Y+9	; 0x09
    149a:	fa 85       	ldd	r31, Y+10	; 0x0a
    149c:	00 80       	ld	r0, Z
    149e:	89 85       	ldd	r24, Y+9	; 0x09
    14a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	9a 87       	std	Y+10, r25	; 0x0a
    14a6:	89 87       	std	Y+9, r24	; 0x09
    14a8:	ef 81       	ldd	r30, Y+7	; 0x07
    14aa:	f8 85       	ldd	r31, Y+8	; 0x08
    14ac:	00 82       	st	Z, r0
    14ae:	8f 81       	ldd	r24, Y+7	; 0x07
    14b0:	98 85       	ldd	r25, Y+8	; 0x08
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	98 87       	std	Y+8, r25	; 0x08
    14b6:	8f 83       	std	Y+7, r24	; 0x07
    14b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    14ba:	91 50       	subi	r25, 0x01	; 1
    14bc:	9b 87       	std	Y+11, r25	; 0x0b
    14be:	eb 85       	ldd	r30, Y+11	; 0x0b
    14c0:	ee 23       	and	r30, r30
    14c2:	51 f7       	brne	.-44     	; 0x1498 <system_locked+0x2c>
	Timer1_init(&timer1_configurations);
    14c4:	ce 01       	movw	r24, r28
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	0e 94 45 19 	call	0x328a	; 0x328a <Timer1_init>
	seconds=0;
    14cc:	10 92 20 02 	sts	0x0220, r1
	LCD_displayString("BUZZER IS ON");
    14d0:	82 e9       	ldi	r24, 0x92	; 146
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
	LCD_moveCursor(1,0);
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
	LCD_displayString("Sec :");
    14e0:	8f e6       	ldi	r24, 0x6F	; 111
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
	Buzzer_on();
    14e8:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <Buzzer_on>
    14ec:	0b c0       	rjmp	.+22     	; 0x1504 <system_locked+0x98>
	while(seconds !=60)
	{
		LCD_moveCursor(1,5);
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	65 e0       	ldi	r22, 0x05	; 5
    14f2:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
		LCD_intgerToString(seconds+1);
    14f6:	80 91 20 02 	lds	r24, 0x0220
    14fa:	88 2f       	mov	r24, r24
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	0e 94 77 18 	call	0x30ee	; 0x30ee <LCD_intgerToString>
	seconds=0;
	LCD_displayString("BUZZER IS ON");
	LCD_moveCursor(1,0);
	LCD_displayString("Sec :");
	Buzzer_on();
	while(seconds !=60)
    1504:	80 91 20 02 	lds	r24, 0x0220
    1508:	8c 33       	cpi	r24, 0x3C	; 60
    150a:	89 f7       	brne	.-30     	; 0x14ee <system_locked+0x82>
	{
		LCD_moveCursor(1,5);
		LCD_intgerToString(seconds+1);
	}
	LCD_clearScreen();
    150c:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
	Buzzer_off();
    1510:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <Buzzer_off>
	seconds=0;
    1514:	10 92 20 02 	sts	0x0220, r1
	LCD_displayString("LOCKED SYSTEM");
    1518:	8f e9       	ldi	r24, 0x9F	; 159
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
	LCD_moveCursor(1,0);
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
	LCD_displayString("Sec :");
    1528:	8f e6       	ldi	r24, 0x6F	; 111
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
    1530:	0b c0       	rjmp	.+22     	; 0x1548 <system_locked+0xdc>
	while(seconds !=60)
	{
		LCD_moveCursor(1,5);
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	65 e0       	ldi	r22, 0x05	; 5
    1536:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
		LCD_intgerToString(seconds+1);
    153a:	80 91 20 02 	lds	r24, 0x0220
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	0e 94 77 18 	call	0x30ee	; 0x30ee <LCD_intgerToString>
	Buzzer_off();
	seconds=0;
	LCD_displayString("LOCKED SYSTEM");
	LCD_moveCursor(1,0);
	LCD_displayString("Sec :");
	while(seconds !=60)
    1548:	80 91 20 02 	lds	r24, 0x0220
    154c:	8c 33       	cpi	r24, 0x3C	; 60
    154e:	89 f7       	brne	.-30     	; 0x1532 <system_locked+0xc6>
	{
		LCD_moveCursor(1,5);
		LCD_intgerToString(seconds+1);
	}
	LCD_clearScreen();
    1550:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
	Timer1_deInit();
    1554:	0e 94 97 19 	call	0x332e	; 0x332e <Timer1_deInit>
}
    1558:	2b 96       	adiw	r28, 0x0b	; 11
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <print_pass>:
 * Description:
 * This function is designed to ensure the accurate reception and display of password digits on
 *  the developer LCD to be able to debug
 */
void print_pass(uint8 *pass)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <print_pass+0x6>
    1570:	0f 92       	push	r0
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	9b 83       	std	Y+3, r25	; 0x03
    1578:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i ;
	for(i=0;i<5;i++)
    157a:	19 82       	std	Y+1, r1	; 0x01
    157c:	10 c0       	rjmp	.+32     	; 0x159e <print_pass+0x34>
	{
		LCD_intgerToString(pass[i]);
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	9b 81       	ldd	r25, Y+3	; 0x03
    1588:	fc 01       	movw	r30, r24
    158a:	e2 0f       	add	r30, r18
    158c:	f3 1f       	adc	r31, r19
    158e:	80 81       	ld	r24, Z
    1590:	88 2f       	mov	r24, r24
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 77 18 	call	0x30ee	; 0x30ee <LCD_intgerToString>
 *  the developer LCD to be able to debug
 */
void print_pass(uint8 *pass)
{
	uint8 i ;
	for(i=0;i<5;i++)
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	85 30       	cpi	r24, 0x05	; 5
    15a2:	68 f3       	brcs	.-38     	; 0x157e <print_pass+0x14>
	{
		LCD_intgerToString(pass[i]);
	}
}
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <display_matched_on_lcd>:
/*
 * Description:
 * This function prints "MATCHED PASSWORDS" in lcd
 */
void display_matched_on_lcd(void)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	2e 97       	sbiw	r28, 0x0e	; 14
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    15c4:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
	LCD_moveCursor(0,4);
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	64 e0       	ldi	r22, 0x04	; 4
    15cc:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
	LCD_displayString("MATCHED");
    15d0:	8d ea       	ldi	r24, 0xAD	; 173
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
	LCD_moveCursor(1,3);
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	63 e0       	ldi	r22, 0x03	; 3
    15dc:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
	LCD_displayString("PASSWORDS");
    15e0:	85 eb       	ldi	r24, 0xB5	; 181
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	aa e7       	ldi	r26, 0x7A	; 122
    15ee:	b4 e4       	ldi	r27, 0x44	; 68
    15f0:	8b 87       	std	Y+11, r24	; 0x0b
    15f2:	9c 87       	std	Y+12, r25	; 0x0c
    15f4:	ad 87       	std	Y+13, r26	; 0x0d
    15f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	4a ef       	ldi	r20, 0xFA	; 250
    1606:	54 e4       	ldi	r21, 0x44	; 68
    1608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	8f 83       	std	Y+7, r24	; 0x07
    1612:	98 87       	std	Y+8, r25	; 0x08
    1614:	a9 87       	std	Y+9, r26	; 0x09
    1616:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1618:	6f 81       	ldd	r22, Y+7	; 0x07
    161a:	78 85       	ldd	r23, Y+8	; 0x08
    161c:	89 85       	ldd	r24, Y+9	; 0x09
    161e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e8       	ldi	r20, 0x80	; 128
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    162c:	88 23       	and	r24, r24
    162e:	2c f4       	brge	.+10     	; 0x163a <display_matched_on_lcd+0x8a>
		__ticks = 1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	9e 83       	std	Y+6, r25	; 0x06
    1636:	8d 83       	std	Y+5, r24	; 0x05
    1638:	3f c0       	rjmp	.+126    	; 0x16b8 <display_matched_on_lcd+0x108>
	else if (__tmp > 65535)
    163a:	6f 81       	ldd	r22, Y+7	; 0x07
    163c:	78 85       	ldd	r23, Y+8	; 0x08
    163e:	89 85       	ldd	r24, Y+9	; 0x09
    1640:	9a 85       	ldd	r25, Y+10	; 0x0a
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	3f ef       	ldi	r19, 0xFF	; 255
    1646:	4f e7       	ldi	r20, 0x7F	; 127
    1648:	57 e4       	ldi	r21, 0x47	; 71
    164a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    164e:	18 16       	cp	r1, r24
    1650:	4c f5       	brge	.+82     	; 0x16a4 <display_matched_on_lcd+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1652:	6b 85       	ldd	r22, Y+11	; 0x0b
    1654:	7c 85       	ldd	r23, Y+12	; 0x0c
    1656:	8d 85       	ldd	r24, Y+13	; 0x0d
    1658:	9e 85       	ldd	r25, Y+14	; 0x0e
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e2       	ldi	r20, 0x20	; 32
    1660:	51 e4       	ldi	r21, 0x41	; 65
    1662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	bc 01       	movw	r22, r24
    166c:	cd 01       	movw	r24, r26
    166e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	9e 83       	std	Y+6, r25	; 0x06
    1678:	8d 83       	std	Y+5, r24	; 0x05
    167a:	0f c0       	rjmp	.+30     	; 0x169a <display_matched_on_lcd+0xea>
    167c:	88 ec       	ldi	r24, 0xC8	; 200
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	9c 83       	std	Y+4, r25	; 0x04
    1682:	8b 83       	std	Y+3, r24	; 0x03
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <display_matched_on_lcd+0xd8>
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	69 f7       	brne	.-38     	; 0x167c <display_matched_on_lcd+0xcc>
    16a2:	14 c0       	rjmp	.+40     	; 0x16cc <display_matched_on_lcd+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a4:	6f 81       	ldd	r22, Y+7	; 0x07
    16a6:	78 85       	ldd	r23, Y+8	; 0x08
    16a8:	89 85       	ldd	r24, Y+9	; 0x09
    16aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	9e 83       	std	Y+6, r25	; 0x06
    16b6:	8d 83       	std	Y+5, r24	; 0x05
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	9a 83       	std	Y+2, r25	; 0x02
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	9a 81       	ldd	r25, Y+2	; 0x02
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <display_matched_on_lcd+0x114>
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
    16cc:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
}
    16d0:	2e 96       	adiw	r28, 0x0e	; 14
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <display_unmatched_on_lcd>:
/*
 * Description:
 * This function prints "UNMATCHED PASSWORDS" in lcd
 */
void display_unmatched_on_lcd(void)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	2e 97       	sbiw	r28, 0x0e	; 14
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    16f6:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
	LCD_moveCursor(0,3);
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	63 e0       	ldi	r22, 0x03	; 3
    16fe:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
	LCD_displayString("UNMATCHED");
    1702:	8f eb       	ldi	r24, 0xBF	; 191
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
	LCD_moveCursor(1,3);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	63 e0       	ldi	r22, 0x03	; 3
    170e:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
	LCD_displayString("PASSWORDS");
    1712:	85 eb       	ldi	r24, 0xB5	; 181
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	aa e7       	ldi	r26, 0x7A	; 122
    1720:	b4 e4       	ldi	r27, 0x44	; 68
    1722:	8b 87       	std	Y+11, r24	; 0x0b
    1724:	9c 87       	std	Y+12, r25	; 0x0c
    1726:	ad 87       	std	Y+13, r26	; 0x0d
    1728:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172a:	6b 85       	ldd	r22, Y+11	; 0x0b
    172c:	7c 85       	ldd	r23, Y+12	; 0x0c
    172e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1730:	9e 85       	ldd	r25, Y+14	; 0x0e
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	4a ef       	ldi	r20, 0xFA	; 250
    1738:	54 e4       	ldi	r21, 0x44	; 68
    173a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	8f 83       	std	Y+7, r24	; 0x07
    1744:	98 87       	std	Y+8, r25	; 0x08
    1746:	a9 87       	std	Y+9, r26	; 0x09
    1748:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    174a:	6f 81       	ldd	r22, Y+7	; 0x07
    174c:	78 85       	ldd	r23, Y+8	; 0x08
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e8       	ldi	r20, 0x80	; 128
    1758:	5f e3       	ldi	r21, 0x3F	; 63
    175a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    175e:	88 23       	and	r24, r24
    1760:	2c f4       	brge	.+10     	; 0x176c <display_unmatched_on_lcd+0x8a>
		__ticks = 1;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	9e 83       	std	Y+6, r25	; 0x06
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	3f c0       	rjmp	.+126    	; 0x17ea <display_unmatched_on_lcd+0x108>
	else if (__tmp > 65535)
    176c:	6f 81       	ldd	r22, Y+7	; 0x07
    176e:	78 85       	ldd	r23, Y+8	; 0x08
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	3f ef       	ldi	r19, 0xFF	; 255
    1778:	4f e7       	ldi	r20, 0x7F	; 127
    177a:	57 e4       	ldi	r21, 0x47	; 71
    177c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1780:	18 16       	cp	r1, r24
    1782:	4c f5       	brge	.+82     	; 0x17d6 <display_unmatched_on_lcd+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1784:	6b 85       	ldd	r22, Y+11	; 0x0b
    1786:	7c 85       	ldd	r23, Y+12	; 0x0c
    1788:	8d 85       	ldd	r24, Y+13	; 0x0d
    178a:	9e 85       	ldd	r25, Y+14	; 0x0e
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e2       	ldi	r20, 0x20	; 32
    1792:	51 e4       	ldi	r21, 0x41	; 65
    1794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	bc 01       	movw	r22, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	8d 83       	std	Y+5, r24	; 0x05
    17ac:	0f c0       	rjmp	.+30     	; 0x17cc <display_unmatched_on_lcd+0xea>
    17ae:	88 ec       	ldi	r24, 0xC8	; 200
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9c 83       	std	Y+4, r25	; 0x04
    17b4:	8b 83       	std	Y+3, r24	; 0x03
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <display_unmatched_on_lcd+0xd8>
    17be:	9c 83       	std	Y+4, r25	; 0x04
    17c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c2:	8d 81       	ldd	r24, Y+5	; 0x05
    17c4:	9e 81       	ldd	r25, Y+6	; 0x06
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	9e 83       	std	Y+6, r25	; 0x06
    17ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	69 f7       	brne	.-38     	; 0x17ae <display_unmatched_on_lcd+0xcc>
    17d4:	14 c0       	rjmp	.+40     	; 0x17fe <display_unmatched_on_lcd+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d6:	6f 81       	ldd	r22, Y+7	; 0x07
    17d8:	78 85       	ldd	r23, Y+8	; 0x08
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	9e 83       	std	Y+6, r25	; 0x06
    17e8:	8d 83       	std	Y+5, r24	; 0x05
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	9e 81       	ldd	r25, Y+6	; 0x06
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	9a 81       	ldd	r25, Y+2	; 0x02
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <display_unmatched_on_lcd+0x114>
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
    17fe:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
}
    1802:	2e 96       	adiw	r28, 0x0e	; 14
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <main>:


int main (void){
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	c0 55       	subi	r28, 0x50	; 80
    181e:	d0 40       	sbci	r29, 0x00	; 0
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
	initialization();
    182a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <initialization>

	uint8 password_one[5]; //array to save the first password received from HMI_ECU and do operations on it
	uint8 password_two[5]; //array to save the second password received from HMI_ECU and do operations on it
	uint8 password_three[5]; //array to save the other check passwords received from HMI_ECU and do operations on it
	uint8 password_epprom[5];//array to save the password received from EEPROM and do operations on it
	uint8 flag=CREATE_SYSTEM_PASSWORD; // //flag to start from CREATE_SYSTEM_PASSWORD
    182e:	8a ef       	ldi	r24, 0xFA	; 250
    1830:	8c af       	std	Y+60, r24	; 0x3c

	sync_recive();    //GETTING UART READY
    1832:	0e 94 2c 07 	call	0xe58	; 0xe58 <sync_recive>
	while(1)
	{
		/*
		 * Sends a flag to HMI_ECU indicating the action the two ECUs will take
		 */
		sync_send();
    1836:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sync_send>
		UART_sendByte(flag);
    183a:	8c ad       	ldd	r24, Y+60	; 0x3c
    183c:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>

		if (flag == CREATE_SYSTEM_PASSWORD)
    1840:	8c ad       	ldd	r24, Y+60	; 0x3c
    1842:	8a 3f       	cpi	r24, 0xFA	; 250
    1844:	09 f0       	breq	.+2      	; 0x1848 <main+0x34>
    1846:	47 c1       	rjmp	.+654    	; 0x1ad6 <main+0x2c2>
		{
			recive_password(password_one);
    1848:	ce 01       	movw	r24, r28
    184a:	cd 96       	adiw	r24, 0x3d	; 61
    184c:	0e 94 5d 07 	call	0xeba	; 0xeba <recive_password>
			recive_password(password_two);
    1850:	ce 01       	movw	r24, r28
    1852:	8e 5b       	subi	r24, 0xBE	; 190
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	0e 94 5d 07 	call	0xeba	; 0xeba <recive_password>
			LCD_clearScreen();
    185a:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
			LCD_displayString("pass 1 :");
    185e:	89 ec       	ldi	r24, 0xC9	; 201
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
			print_pass(password_one);
    1866:	ce 01       	movw	r24, r28
    1868:	cd 96       	adiw	r24, 0x3d	; 61
    186a:	0e 94 b5 0a 	call	0x156a	; 0x156a <print_pass>
			LCD_moveCursor(1,0);
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
			LCD_displayString("pass 2 :");
    1876:	82 ed       	ldi	r24, 0xD2	; 210
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
			print_pass(password_two);
    187e:	ce 01       	movw	r24, r28
    1880:	8e 5b       	subi	r24, 0xBE	; 190
    1882:	9f 4f       	sbci	r25, 0xFF	; 255
    1884:	0e 94 b5 0a 	call	0x156a	; 0x156a <print_pass>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	90 e8       	ldi	r25, 0x80	; 128
    188c:	ab eb       	ldi	r26, 0xBB	; 187
    188e:	b4 e4       	ldi	r27, 0x44	; 68
    1890:	8d ab       	std	Y+53, r24	; 0x35
    1892:	9e ab       	std	Y+54, r25	; 0x36
    1894:	af ab       	std	Y+55, r26	; 0x37
    1896:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1898:	6d a9       	ldd	r22, Y+53	; 0x35
    189a:	7e a9       	ldd	r23, Y+54	; 0x36
    189c:	8f a9       	ldd	r24, Y+55	; 0x37
    189e:	98 ad       	ldd	r25, Y+56	; 0x38
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	4a ef       	ldi	r20, 0xFA	; 250
    18a6:	54 e4       	ldi	r21, 0x44	; 68
    18a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	89 ab       	std	Y+49, r24	; 0x31
    18b2:	9a ab       	std	Y+50, r25	; 0x32
    18b4:	ab ab       	std	Y+51, r26	; 0x33
    18b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18b8:	69 a9       	ldd	r22, Y+49	; 0x31
    18ba:	7a a9       	ldd	r23, Y+50	; 0x32
    18bc:	8b a9       	ldd	r24, Y+51	; 0x33
    18be:	9c a9       	ldd	r25, Y+52	; 0x34
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e8       	ldi	r20, 0x80	; 128
    18c6:	5f e3       	ldi	r21, 0x3F	; 63
    18c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18cc:	88 23       	and	r24, r24
    18ce:	2c f4       	brge	.+10     	; 0x18da <main+0xc6>
		__ticks = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	98 ab       	std	Y+48, r25	; 0x30
    18d6:	8f a7       	std	Y+47, r24	; 0x2f
    18d8:	3f c0       	rjmp	.+126    	; 0x1958 <main+0x144>
	else if (__tmp > 65535)
    18da:	69 a9       	ldd	r22, Y+49	; 0x31
    18dc:	7a a9       	ldd	r23, Y+50	; 0x32
    18de:	8b a9       	ldd	r24, Y+51	; 0x33
    18e0:	9c a9       	ldd	r25, Y+52	; 0x34
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	3f ef       	ldi	r19, 0xFF	; 255
    18e6:	4f e7       	ldi	r20, 0x7F	; 127
    18e8:	57 e4       	ldi	r21, 0x47	; 71
    18ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ee:	18 16       	cp	r1, r24
    18f0:	4c f5       	brge	.+82     	; 0x1944 <main+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f2:	6d a9       	ldd	r22, Y+53	; 0x35
    18f4:	7e a9       	ldd	r23, Y+54	; 0x36
    18f6:	8f a9       	ldd	r24, Y+55	; 0x37
    18f8:	98 ad       	ldd	r25, Y+56	; 0x38
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e2       	ldi	r20, 0x20	; 32
    1900:	51 e4       	ldi	r21, 0x41	; 65
    1902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	bc 01       	movw	r22, r24
    190c:	cd 01       	movw	r24, r26
    190e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	98 ab       	std	Y+48, r25	; 0x30
    1918:	8f a7       	std	Y+47, r24	; 0x2f
    191a:	0f c0       	rjmp	.+30     	; 0x193a <main+0x126>
    191c:	88 ec       	ldi	r24, 0xC8	; 200
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9e a7       	std	Y+46, r25	; 0x2e
    1922:	8d a7       	std	Y+45, r24	; 0x2d
    1924:	8d a5       	ldd	r24, Y+45	; 0x2d
    1926:	9e a5       	ldd	r25, Y+46	; 0x2e
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <main+0x114>
    192c:	9e a7       	std	Y+46, r25	; 0x2e
    192e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1930:	8f a5       	ldd	r24, Y+47	; 0x2f
    1932:	98 a9       	ldd	r25, Y+48	; 0x30
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	98 ab       	std	Y+48, r25	; 0x30
    1938:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193a:	8f a5       	ldd	r24, Y+47	; 0x2f
    193c:	98 a9       	ldd	r25, Y+48	; 0x30
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	69 f7       	brne	.-38     	; 0x191c <main+0x108>
    1942:	14 c0       	rjmp	.+40     	; 0x196c <main+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1944:	69 a9       	ldd	r22, Y+49	; 0x31
    1946:	7a a9       	ldd	r23, Y+50	; 0x32
    1948:	8b a9       	ldd	r24, Y+51	; 0x33
    194a:	9c a9       	ldd	r25, Y+52	; 0x34
    194c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	98 ab       	std	Y+48, r25	; 0x30
    1956:	8f a7       	std	Y+47, r24	; 0x2f
    1958:	8f a5       	ldd	r24, Y+47	; 0x2f
    195a:	98 a9       	ldd	r25, Y+48	; 0x30
    195c:	9c a7       	std	Y+44, r25	; 0x2c
    195e:	8b a7       	std	Y+43, r24	; 0x2b
    1960:	8b a5       	ldd	r24, Y+43	; 0x2b
    1962:	9c a5       	ldd	r25, Y+44	; 0x2c
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <main+0x150>
    1968:	9c a7       	std	Y+44, r25	; 0x2c
    196a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1500);
			LCD_clearScreen();
    196c:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
			if (check_passwords(password_one,password_two) == MATCHED_PASSWORDS)
    1970:	ce 01       	movw	r24, r28
    1972:	cd 96       	adiw	r24, 0x3d	; 61
    1974:	9e 01       	movw	r18, r28
    1976:	2e 5b       	subi	r18, 0xBE	; 190
    1978:	3f 4f       	sbci	r19, 0xFF	; 255
    197a:	b9 01       	movw	r22, r18
    197c:	0e 94 85 07 	call	0xf0a	; 0xf0a <check_passwords>
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	09 f0       	breq	.+2      	; 0x1986 <main+0x172>
    1984:	95 c0       	rjmp	.+298    	; 0x1ab0 <main+0x29c>
			{

				//print matched passwords on the lcd
				display_matched_on_lcd();
    1986:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <display_matched_on_lcd>

				sync_send(); // sync start send matched or unmatched bit
    198a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sync_send>
				UART_sendByte(MATCHED_PASSWORDS);
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>

				/* send the Password to EEOROM through TWI
				 * writing only one password , I chose here password_one[]
			     */
				write_to_eeprom(password_one);
    1994:	ce 01       	movw	r24, r28
    1996:	cd 96       	adiw	r24, 0x3d	; 61
    1998:	0e 94 bf 07 	call	0xf7e	; 0xf7e <write_to_eeprom>

				LCD_clearScreen();
    199c:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>
				LCD_displayString("PASS SAVED IN");
    19a0:	8b ed       	ldi	r24, 0xDB	; 219
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
				LCD_moveCursor(1,3);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	63 e0       	ldi	r22, 0x03	; 3
    19ac:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
				LCD_displayString("EEPROM");
    19b0:	89 ee       	ldi	r24, 0xE9	; 233
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	aa e7       	ldi	r26, 0x7A	; 122
    19be:	b4 e4       	ldi	r27, 0x44	; 68
    19c0:	8f a3       	std	Y+39, r24	; 0x27
    19c2:	98 a7       	std	Y+40, r25	; 0x28
    19c4:	a9 a7       	std	Y+41, r26	; 0x29
    19c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c8:	6f a1       	ldd	r22, Y+39	; 0x27
    19ca:	78 a5       	ldd	r23, Y+40	; 0x28
    19cc:	89 a5       	ldd	r24, Y+41	; 0x29
    19ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	4a ef       	ldi	r20, 0xFA	; 250
    19d6:	54 e4       	ldi	r21, 0x44	; 68
    19d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	8b a3       	std	Y+35, r24	; 0x23
    19e2:	9c a3       	std	Y+36, r25	; 0x24
    19e4:	ad a3       	std	Y+37, r26	; 0x25
    19e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19e8:	6b a1       	ldd	r22, Y+35	; 0x23
    19ea:	7c a1       	ldd	r23, Y+36	; 0x24
    19ec:	8d a1       	ldd	r24, Y+37	; 0x25
    19ee:	9e a1       	ldd	r25, Y+38	; 0x26
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e8       	ldi	r20, 0x80	; 128
    19f6:	5f e3       	ldi	r21, 0x3F	; 63
    19f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fc:	88 23       	and	r24, r24
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <main+0x1f6>
		__ticks = 1;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	9a a3       	std	Y+34, r25	; 0x22
    1a06:	89 a3       	std	Y+33, r24	; 0x21
    1a08:	3f c0       	rjmp	.+126    	; 0x1a88 <main+0x274>
	else if (__tmp > 65535)
    1a0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a10:	9e a1       	ldd	r25, Y+38	; 0x26
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	3f ef       	ldi	r19, 0xFF	; 255
    1a16:	4f e7       	ldi	r20, 0x7F	; 127
    1a18:	57 e4       	ldi	r21, 0x47	; 71
    1a1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a1e:	18 16       	cp	r1, r24
    1a20:	4c f5       	brge	.+82     	; 0x1a74 <main+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a22:	6f a1       	ldd	r22, Y+39	; 0x27
    1a24:	78 a5       	ldd	r23, Y+40	; 0x28
    1a26:	89 a5       	ldd	r24, Y+41	; 0x29
    1a28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e2       	ldi	r20, 0x20	; 32
    1a30:	51 e4       	ldi	r21, 0x41	; 65
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9a a3       	std	Y+34, r25	; 0x22
    1a48:	89 a3       	std	Y+33, r24	; 0x21
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <main+0x256>
    1a4c:	88 ec       	ldi	r24, 0xC8	; 200
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	98 a3       	std	Y+32, r25	; 0x20
    1a52:	8f 8f       	std	Y+31, r24	; 0x1f
    1a54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a56:	98 a1       	ldd	r25, Y+32	; 0x20
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <main+0x244>
    1a5c:	98 a3       	std	Y+32, r25	; 0x20
    1a5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a60:	89 a1       	ldd	r24, Y+33	; 0x21
    1a62:	9a a1       	ldd	r25, Y+34	; 0x22
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	9a a3       	std	Y+34, r25	; 0x22
    1a68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	69 f7       	brne	.-38     	; 0x1a4c <main+0x238>
    1a72:	14 c0       	rjmp	.+40     	; 0x1a9c <main+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a74:	6b a1       	ldd	r22, Y+35	; 0x23
    1a76:	7c a1       	ldd	r23, Y+36	; 0x24
    1a78:	8d a1       	ldd	r24, Y+37	; 0x25
    1a7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9a a3       	std	Y+34, r25	; 0x22
    1a86:	89 a3       	std	Y+33, r24	; 0x21
    1a88:	89 a1       	ldd	r24, Y+33	; 0x21
    1a8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <main+0x280>
    1a98:	9e 8f       	std	Y+30, r25	; 0x1e
    1a9a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				LCD_clearScreen();
    1a9c:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>

				flag = MENU;
    1aa0:	8b ef       	ldi	r24, 0xFB	; 251
    1aa2:	8c af       	std	Y+60, r24	; 0x3c
				sync_send();
    1aa4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sync_send>
				UART_sendByte(flag); // send MENU macro to HMI_ECU
    1aa8:	8c ad       	ldd	r24, Y+60	; 0x3c
    1aaa:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>
    1aae:	13 c0       	rjmp	.+38     	; 0x1ad6 <main+0x2c2>
			}
			else if (check_passwords(password_one,password_two) == UNMATCHED_PASSWORDS)
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	cd 96       	adiw	r24, 0x3d	; 61
    1ab4:	9e 01       	movw	r18, r28
    1ab6:	2e 5b       	subi	r18, 0xBE	; 190
    1ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aba:	b9 01       	movw	r22, r18
    1abc:	0e 94 85 07 	call	0xf0a	; 0xf0a <check_passwords>
    1ac0:	88 23       	and	r24, r24
    1ac2:	49 f4       	brne	.+18     	; 0x1ad6 <main+0x2c2>
			{
				//print UNmatched passwords on the lcd
				display_unmatched_on_lcd();
    1ac4:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <display_unmatched_on_lcd>

				sync_send(); // start send matched or unmatched passwords
    1ac8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sync_send>
				UART_sendByte(UNMATCHED_PASSWORDS);
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>

				/*start the system again and send this flag to MHI_ECU */
				flag = CREATE_SYSTEM_PASSWORD;
    1ad2:	8a ef       	ldi	r24, 0xFA	; 250
    1ad4:	8c af       	std	Y+60, r24	; 0x3c
			}
		}

		if (flag == MENU)
    1ad6:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ad8:	8b 3f       	cpi	r24, 0xFB	; 251
    1ada:	09 f0       	breq	.+2      	; 0x1ade <main+0x2ca>
    1adc:	ac ce       	rjmp	.-680    	; 0x1836 <main+0x22>
		{
			uint8 plus_or_minus;

			sync_recive();
    1ade:	0e 94 2c 07 	call	0xe58	; 0xe58 <sync_recive>
			plus_or_minus = UART_recieveByte(); //receive the pressed key if + or -
    1ae2:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <UART_recieveByte>
    1ae6:	8b af       	std	Y+59, r24	; 0x3b

			if (plus_or_minus == '+')
    1ae8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1aea:	8b 32       	cpi	r24, 0x2B	; 43
    1aec:	09 f0       	breq	.+2      	; 0x1af0 <main+0x2dc>
    1aee:	d2 c0       	rjmp	.+420    	; 0x1c94 <main+0x480>
			{
			    uint8	i=0;
    1af0:	1a ae       	std	Y+58, r1	; 0x3a
    1af2:	cb c0       	rjmp	.+406    	; 0x1c8a <main+0x476>
				while(i<3)
				{
					recive_password(password_three);   //receive password and save it in password_three
    1af4:	ce 01       	movw	r24, r28
    1af6:	89 5b       	subi	r24, 0xB9	; 185
    1af8:	9f 4f       	sbci	r25, 0xFF	; 255
    1afa:	0e 94 5d 07 	call	0xeba	; 0xeba <recive_password>
					read_from_eeprom(password_epprom); //read password saved in eeprom and save it in password_epprom
    1afe:	ce 01       	movw	r24, r28
    1b00:	84 5b       	subi	r24, 0xB4	; 180
    1b02:	9f 4f       	sbci	r25, 0xFF	; 255
    1b04:	0e 94 62 08 	call	0x10c4	; 0x10c4 <read_from_eeprom>

					//display password on the lcd
					LCD_displayString("Entered:");
    1b08:	80 ef       	ldi	r24, 0xF0	; 240
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
					print_pass(password_three);
    1b10:	ce 01       	movw	r24, r28
    1b12:	89 5b       	subi	r24, 0xB9	; 185
    1b14:	9f 4f       	sbci	r25, 0xFF	; 255
    1b16:	0e 94 b5 0a 	call	0x156a	; 0x156a <print_pass>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	aa e7       	ldi	r26, 0x7A	; 122
    1b20:	b4 e4       	ldi	r27, 0x44	; 68
    1b22:	89 8f       	std	Y+25, r24	; 0x19
    1b24:	9a 8f       	std	Y+26, r25	; 0x1a
    1b26:	ab 8f       	std	Y+27, r26	; 0x1b
    1b28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4a ef       	ldi	r20, 0xFA	; 250
    1b38:	54 e4       	ldi	r21, 0x44	; 68
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8d 8b       	std	Y+21, r24	; 0x15
    1b44:	9e 8b       	std	Y+22, r25	; 0x16
    1b46:	af 8b       	std	Y+23, r26	; 0x17
    1b48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b50:	98 8d       	ldd	r25, Y+24	; 0x18
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e8       	ldi	r20, 0x80	; 128
    1b58:	5f e3       	ldi	r21, 0x3F	; 63
    1b5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b5e:	88 23       	and	r24, r24
    1b60:	2c f4       	brge	.+10     	; 0x1b6c <main+0x358>
		__ticks = 1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	9c 8b       	std	Y+20, r25	; 0x14
    1b68:	8b 8b       	std	Y+19, r24	; 0x13
    1b6a:	3f c0       	rjmp	.+126    	; 0x1bea <main+0x3d6>
	else if (__tmp > 65535)
    1b6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b70:	8f 89       	ldd	r24, Y+23	; 0x17
    1b72:	98 8d       	ldd	r25, Y+24	; 0x18
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	57 e4       	ldi	r21, 0x47	; 71
    1b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	4c f5       	brge	.+82     	; 0x1bd6 <main+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b84:	69 8d       	ldd	r22, Y+25	; 0x19
    1b86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e2       	ldi	r20, 0x20	; 32
    1b92:	51 e4       	ldi	r21, 0x41	; 65
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9c 8b       	std	Y+20, r25	; 0x14
    1baa:	8b 8b       	std	Y+19, r24	; 0x13
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <main+0x3b8>
    1bae:	88 ec       	ldi	r24, 0xC8	; 200
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9a 8b       	std	Y+18, r25	; 0x12
    1bb4:	89 8b       	std	Y+17, r24	; 0x11
    1bb6:	89 89       	ldd	r24, Y+17	; 0x11
    1bb8:	9a 89       	ldd	r25, Y+18	; 0x12
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <main+0x3a6>
    1bbe:	9a 8b       	std	Y+18, r25	; 0x12
    1bc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	9c 8b       	std	Y+20, r25	; 0x14
    1bca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bce:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	69 f7       	brne	.-38     	; 0x1bae <main+0x39a>
    1bd4:	14 c0       	rjmp	.+40     	; 0x1bfe <main+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bda:	8f 89       	ldd	r24, Y+23	; 0x17
    1bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9c 8b       	std	Y+20, r25	; 0x14
    1be8:	8b 8b       	std	Y+19, r24	; 0x13
    1bea:	8b 89       	ldd	r24, Y+19	; 0x13
    1bec:	9c 89       	ldd	r25, Y+20	; 0x14
    1bee:	98 8b       	std	Y+16, r25	; 0x10
    1bf0:	8f 87       	std	Y+15, r24	; 0x0f
    1bf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf4:	98 89       	ldd	r25, Y+16	; 0x10
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <main+0x3e2>
    1bfa:	98 8b       	std	Y+16, r25	; 0x10
    1bfc:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					LCD_clearScreen();
    1bfe:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>

					if (check_passwords(password_three,password_epprom) == MATCHED_PASSWORDS)
    1c02:	ce 01       	movw	r24, r28
    1c04:	89 5b       	subi	r24, 0xB9	; 185
    1c06:	9f 4f       	sbci	r25, 0xFF	; 255
    1c08:	9e 01       	movw	r18, r28
    1c0a:	24 5b       	subi	r18, 0xB4	; 180
    1c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0e:	b9 01       	movw	r22, r18
    1c10:	0e 94 85 07 	call	0xf0a	; 0xf0a <check_passwords>
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	61 f4       	brne	.+24     	; 0x1c30 <main+0x41c>
						 * the flag will be sent to HMI_ECU at the begging of the main while(1) after break
						 *
						 */

						//print matched passwords on the lcd
						display_matched_on_lcd();
    1c18:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <display_matched_on_lcd>

						sync_send(); // sync start send matched or unmatched byte
    1c1c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sync_send>
						UART_sendByte(MATCHED_PASSWORDS);
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>
						door_operation();
    1c26:	0e 94 22 0a 	call	0x1444	; 0x1444 <door_operation>

						flag = MENU;
    1c2a:	8b ef       	ldi	r24, 0xFB	; 251
    1c2c:	8c af       	std	Y+60, r24	; 0x3c
    1c2e:	03 ce       	rjmp	.-1018   	; 0x1836 <main+0x22>
						break;  //after break will start from the main while(1) and send the flag to HMI_ECU

					}
					else if ((check_passwords(password_three,password_epprom) == UNMATCHED_PASSWORDS) && (i==2))
    1c30:	ce 01       	movw	r24, r28
    1c32:	89 5b       	subi	r24, 0xB9	; 185
    1c34:	9f 4f       	sbci	r25, 0xFF	; 255
    1c36:	9e 01       	movw	r18, r28
    1c38:	24 5b       	subi	r18, 0xB4	; 180
    1c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3c:	b9 01       	movw	r22, r18
    1c3e:	0e 94 85 07 	call	0xf0a	; 0xf0a <check_passwords>
    1c42:	88 23       	and	r24, r24
    1c44:	69 f4       	brne	.+26     	; 0x1c60 <main+0x44c>
    1c46:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c48:	82 30       	cpi	r24, 0x02	; 2
    1c4a:	51 f4       	brne	.+20     	; 0x1c60 <main+0x44c>
						 * and do system locked operation
						 * and let flag = MENU to start the menu again
						 * and send MENU macro to HMI_ECU to start the MENU either
						 * the flag will be sent to HMI_ECU at the begging of the main while(1) after break
						 */
						sync_send(); // start send matched or unmatched passwords
    1c4c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sync_send>
						UART_sendByte(LOCKED);
    1c50:	8d ef       	ldi	r24, 0xFD	; 253
    1c52:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>
						system_locked();
    1c56:	0e 94 36 0a 	call	0x146c	; 0x146c <system_locked>

						flag = MENU;
    1c5a:	8b ef       	ldi	r24, 0xFB	; 251
    1c5c:	8c af       	std	Y+60, r24	; 0x3c
    1c5e:	eb cd       	rjmp	.-1066   	; 0x1836 <main+0x22>
						break; //after break will start from the main while(1) and send the flag to HMI_ECU
					}
					else if(check_passwords(password_three,password_epprom) == UNMATCHED_PASSWORDS)
    1c60:	ce 01       	movw	r24, r28
    1c62:	89 5b       	subi	r24, 0xB9	; 185
    1c64:	9f 4f       	sbci	r25, 0xFF	; 255
    1c66:	9e 01       	movw	r18, r28
    1c68:	24 5b       	subi	r18, 0xB4	; 180
    1c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6c:	b9 01       	movw	r22, r18
    1c6e:	0e 94 85 07 	call	0xf0a	; 0xf0a <check_passwords>
    1c72:	88 23       	and	r24, r24
    1c74:	39 f4       	brne	.+14     	; 0x1c84 <main+0x470>
					{
						//print UNmatched passwords on the lcd
						display_unmatched_on_lcd();
    1c76:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <display_unmatched_on_lcd>

						sync_send(); // sync start send matched or unmatched byte
    1c7a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sync_send>
						UART_sendByte(UNMATCHED_PASSWORDS);
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>
					}
					i++;
    1c84:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c86:	8f 5f       	subi	r24, 0xFF	; 255
    1c88:	8a af       	std	Y+58, r24	; 0x3a
			plus_or_minus = UART_recieveByte(); //receive the pressed key if + or -

			if (plus_or_minus == '+')
			{
			    uint8	i=0;
				while(i<3)
    1c8a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c8c:	83 30       	cpi	r24, 0x03	; 3
    1c8e:	08 f4       	brcc	.+2      	; 0x1c92 <main+0x47e>
    1c90:	31 cf       	rjmp	.-414    	; 0x1af4 <main+0x2e0>
    1c92:	d1 cd       	rjmp	.-1118   	; 0x1836 <main+0x22>
						UART_sendByte(UNMATCHED_PASSWORDS);
					}
					i++;
				}
			}
			else if (plus_or_minus == '-')
    1c94:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c96:	8d 32       	cpi	r24, 0x2D	; 45
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <main+0x488>
    1c9a:	cd cd       	rjmp	.-1126   	; 0x1836 <main+0x22>
			{
				uint8 i=0;
    1c9c:	19 ae       	std	Y+57, r1	; 0x39
    1c9e:	c9 c0       	rjmp	.+402    	; 0x1e32 <main+0x61e>
				while (i<3)
				{
					recive_password(password_three);   //receive password and save it in password_three
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	89 5b       	subi	r24, 0xB9	; 185
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	0e 94 5d 07 	call	0xeba	; 0xeba <recive_password>
					read_from_eeprom(password_epprom); //read password saved in eeprom and save it in password_epprom
    1caa:	ce 01       	movw	r24, r28
    1cac:	84 5b       	subi	r24, 0xB4	; 180
    1cae:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <read_from_eeprom>

					//display password on the lcd
					LCD_displayString("Entered:");
    1cb4:	80 ef       	ldi	r24, 0xF0	; 240
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
					print_pass(password_three);
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	89 5b       	subi	r24, 0xB9	; 185
    1cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc2:	0e 94 b5 0a 	call	0x156a	; 0x156a <print_pass>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	aa e7       	ldi	r26, 0x7A	; 122
    1ccc:	b4 e4       	ldi	r27, 0x44	; 68
    1cce:	8b 87       	std	Y+11, r24	; 0x0b
    1cd0:	9c 87       	std	Y+12, r25	; 0x0c
    1cd2:	ad 87       	std	Y+13, r26	; 0x0d
    1cd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4a ef       	ldi	r20, 0xFA	; 250
    1ce4:	54 e4       	ldi	r21, 0x44	; 68
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8f 83       	std	Y+7, r24	; 0x07
    1cf0:	98 87       	std	Y+8, r25	; 0x08
    1cf2:	a9 87       	std	Y+9, r26	; 0x09
    1cf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <main+0x504>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
    1d16:	3f c0       	rjmp	.+126    	; 0x1d96 <main+0x582>
	else if (__tmp > 65535)
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	4f e7       	ldi	r20, 0x7F	; 127
    1d26:	57 e4       	ldi	r21, 0x47	; 71
    1d28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2c:	18 16       	cp	r1, r24
    1d2e:	4c f5       	brge	.+82     	; 0x1d82 <main+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e2       	ldi	r20, 0x20	; 32
    1d3e:	51 e4       	ldi	r21, 0x41	; 65
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
    1d58:	0f c0       	rjmp	.+30     	; 0x1d78 <main+0x564>
    1d5a:	88 ec       	ldi	r24, 0xC8	; 200
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	8b 83       	std	Y+3, r24	; 0x03
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <main+0x552>
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <main+0x546>
    1d80:	14 c0       	rjmp	.+40     	; 0x1daa <main+0x596>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	9a 83       	std	Y+2, r25	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <main+0x58e>
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					LCD_clearScreen();
    1daa:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_clearScreen>

					if (check_passwords(password_three,password_epprom) == MATCHED_PASSWORDS)
    1dae:	ce 01       	movw	r24, r28
    1db0:	89 5b       	subi	r24, 0xB9	; 185
    1db2:	9f 4f       	sbci	r25, 0xFF	; 255
    1db4:	9e 01       	movw	r18, r28
    1db6:	24 5b       	subi	r18, 0xB4	; 180
    1db8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dba:	b9 01       	movw	r22, r18
    1dbc:	0e 94 85 07 	call	0xf0a	; 0xf0a <check_passwords>
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	51 f4       	brne	.+20     	; 0x1dd8 <main+0x5c4>
						 * and send CREATE_SYSTEM_PASSWORD macro to HMI_ECU to start the create system password either
						 * the flag will be sent to HMI_ECU at the begging of the main while(1) after break
						 */

						//print matched passwords on the lcd
						display_matched_on_lcd();
    1dc4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <display_matched_on_lcd>

						sync_send();
    1dc8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sync_send>
						UART_sendByte(MATCHED_PASSWORDS);
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>

						flag = CREATE_SYSTEM_PASSWORD;
    1dd2:	8a ef       	ldi	r24, 0xFA	; 250
    1dd4:	8c af       	std	Y+60, r24	; 0x3c
    1dd6:	2f cd       	rjmp	.-1442   	; 0x1836 <main+0x22>
						break;//after break will start from the main while(1) and send the flag to HMI_ECU


					}
					else if ((check_passwords(password_three,password_epprom) == UNMATCHED_PASSWORDS) && (i==2))
    1dd8:	ce 01       	movw	r24, r28
    1dda:	89 5b       	subi	r24, 0xB9	; 185
    1ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dde:	9e 01       	movw	r18, r28
    1de0:	24 5b       	subi	r18, 0xB4	; 180
    1de2:	3f 4f       	sbci	r19, 0xFF	; 255
    1de4:	b9 01       	movw	r22, r18
    1de6:	0e 94 85 07 	call	0xf0a	; 0xf0a <check_passwords>
    1dea:	88 23       	and	r24, r24
    1dec:	69 f4       	brne	.+26     	; 0x1e08 <main+0x5f4>
    1dee:	89 ad       	ldd	r24, Y+57	; 0x39
    1df0:	82 30       	cpi	r24, 0x02	; 2
    1df2:	51 f4       	brne	.+20     	; 0x1e08 <main+0x5f4>
						* and do system locked operation
						* and let flag = MENU to start the menu again
						* and send MENU macro to HMI_ECU to start the MENU either
						* the flag will be sent to HMI_ECU at the begging of the main while(1) after break
						*/
						sync_send();
    1df4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sync_send>
						UART_sendByte(LOCKED);
    1df8:	8d ef       	ldi	r24, 0xFD	; 253
    1dfa:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>
						system_locked();
    1dfe:	0e 94 36 0a 	call	0x146c	; 0x146c <system_locked>

						flag = MENU;
    1e02:	8b ef       	ldi	r24, 0xFB	; 251
    1e04:	8c af       	std	Y+60, r24	; 0x3c
    1e06:	17 cd       	rjmp	.-1490   	; 0x1836 <main+0x22>
						break; //after break will start from the main while(1) and send the flag to HMI_ECU
					}
					else if(check_passwords(password_three,password_epprom) == UNMATCHED_PASSWORDS)
    1e08:	ce 01       	movw	r24, r28
    1e0a:	89 5b       	subi	r24, 0xB9	; 185
    1e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0e:	9e 01       	movw	r18, r28
    1e10:	24 5b       	subi	r18, 0xB4	; 180
    1e12:	3f 4f       	sbci	r19, 0xFF	; 255
    1e14:	b9 01       	movw	r22, r18
    1e16:	0e 94 85 07 	call	0xf0a	; 0xf0a <check_passwords>
    1e1a:	88 23       	and	r24, r24
    1e1c:	39 f4       	brne	.+14     	; 0x1e2c <main+0x618>
					{

						//print UNmatched passwords on the lcd
						display_unmatched_on_lcd();
    1e1e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <display_unmatched_on_lcd>

						sync_send();
    1e22:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sync_send>
						UART_sendByte(UNMATCHED_PASSWORDS);
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>
					}
					i++;
    1e2c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e2e:	8f 5f       	subi	r24, 0xFF	; 255
    1e30:	89 af       	std	Y+57, r24	; 0x39
				}
			}
			else if (plus_or_minus == '-')
			{
				uint8 i=0;
				while (i<3)
    1e32:	89 ad       	ldd	r24, Y+57	; 0x39
    1e34:	83 30       	cpi	r24, 0x03	; 3
    1e36:	08 f4       	brcc	.+2      	; 0x1e3a <main+0x626>
    1e38:	33 cf       	rjmp	.-410    	; 0x1ca0 <main+0x48c>
    1e3a:	fd cc       	rjmp	.-1542   	; 0x1836 <main+0x22>

00001e3c <Buzzer_init>:
 *  Description:
 *  Setup the direction for the buzzer pin as output pin
 *  Turn off the buzzer in the beginning
 */
void Buzzer_init(void)
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN,PIN_OUTPUT);
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	63 e0       	ldi	r22, 0x03	; 3
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 3b 10 	call	0x2076	; 0x2076 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	63 e0       	ldi	r22, 0x03	; 3
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
}
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <Buzzer_on>:
/*
 * Description:
 * Function to enable the Buzzer
 */
void Buzzer_on(void)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	63 e0       	ldi	r22, 0x03	; 3
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
}
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <Buzzer_off>:
/*
 * Description:
 * Function to disable the Buzzer
 */
void Buzzer_off(void)
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	63 e0       	ldi	r22, 0x03	; 3
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
}
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <DcMotor_Init>:




void DcMotor_Init(void)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID, PIN_OUTPUT);
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	41 e0       	ldi	r20, 0x01	; 1
    1e9c:	0e 94 3b 10 	call	0x2076	; 0x2076 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID, PIN_OUTPUT);
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	61 e0       	ldi	r22, 0x01	; 1
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 3b 10 	call	0x2076	; 0x2076 <GPIO_setupPinDirection>

	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	40 e0       	ldi	r20, 0x00	; 0
    1eb0:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	61 e0       	ldi	r22, 0x01	; 1
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
}
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <DcMotor_Rotate>:


void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <DcMotor_Rotate+0x6>
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	6a 83       	std	Y+2, r22	; 0x02
	if (state == STOP)
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	88 23       	and	r24, r24
    1ed6:	59 f4       	brne	.+22     	; 0x1eee <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	40 e0       	ldi	r20, 0x00	; 0
    1ee8:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
    1eec:	1b c0       	rjmp	.+54     	; 0x1f24 <DcMotor_Rotate+0x60>
	}
	else if ( state == CW )
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	59 f4       	brne	.+22     	; 0x1f0a <DcMotor_Rotate+0x46>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	41 e0       	ldi	r20, 0x01	; 1
    1efa:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	61 e0       	ldi	r22, 0x01	; 1
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
    1f08:	0d c0       	rjmp	.+26     	; 0x1f24 <DcMotor_Rotate+0x60>
	}
	else if (state == A_CW)
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	51 f4       	brne	.+20     	; 0x1f24 <DcMotor_Rotate+0x60>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	61 e0       	ldi	r22, 0x01	; 1
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
	}


	/*speed Controlling*/
	PWM_Timer0_Start( speed);
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	0e 94 a4 18 	call	0x3148	; 0x3148 <PWM_Timer0_Start>
}
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <EEPROM_writeByte+0x6>
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <EEPROM_writeByte+0x8>
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	9a 83       	std	Y+2, r25	; 0x02
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	6b 83       	std	Y+3, r22	; 0x03

	/*
	 * كل حاجه هعملها هتشيك ان هي حصلت مظبوط عن طريق ان اقرا الرقم الموجود جوه الاستتس رجيستر لو حصلت هنكمل محصلتش هنرجع ايرور
	 */
	/* Send the Start Bit */
    TWI_start();
    1f46:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1f4a:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <TWI_getStatus>
    1f4e:	88 30       	cpi	r24, 0x08	; 8
    1f50:	11 f0       	breq	.+4      	; 0x1f56 <EEPROM_writeByte+0x22>
        return ERROR;
    1f52:	1c 82       	std	Y+4, r1	; 0x04
    1f54:	28 c0       	rjmp	.+80     	; 0x1fa6 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5a:	80 70       	andi	r24, 0x00	; 0
    1f5c:	97 70       	andi	r25, 0x07	; 7
    1f5e:	88 0f       	add	r24, r24
    1f60:	89 2f       	mov	r24, r25
    1f62:	88 1f       	adc	r24, r24
    1f64:	99 0b       	sbc	r25, r25
    1f66:	91 95       	neg	r25
    1f68:	80 6a       	ori	r24, 0xA0	; 160
    1f6a:	0e 94 16 1a 	call	0x342c	; 0x342c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1f6e:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <TWI_getStatus>
    1f72:	88 31       	cpi	r24, 0x18	; 24
    1f74:	11 f0       	breq	.+4      	; 0x1f7a <EEPROM_writeByte+0x46>
        return ERROR;
    1f76:	1c 82       	std	Y+4, r1	; 0x04
    1f78:	16 c0       	rjmp	.+44     	; 0x1fa6 <EEPROM_writeByte+0x72>
    /*
     * when you are sending the address inside the memory just sent the first 8-bit ,
     * the last three bit we have already sent it with the device address
     * that's why we made casting to uint8
     */
    TWI_writeByte((uint8)(u16addr));
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	0e 94 16 1a 	call	0x342c	; 0x342c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1f80:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <TWI_getStatus>
    1f84:	88 32       	cpi	r24, 0x28	; 40
    1f86:	11 f0       	breq	.+4      	; 0x1f8c <EEPROM_writeByte+0x58>
        return ERROR;
    1f88:	1c 82       	std	Y+4, r1	; 0x04
    1f8a:	0d c0       	rjmp	.+26     	; 0x1fa6 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	0e 94 16 1a 	call	0x342c	; 0x342c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1f92:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <TWI_getStatus>
    1f96:	88 32       	cpi	r24, 0x28	; 40
    1f98:	11 f0       	breq	.+4      	; 0x1f9e <EEPROM_writeByte+0x6a>
        return ERROR;
    1f9a:	1c 82       	std	Y+4, r1	; 0x04
    1f9c:	04 c0       	rjmp	.+8      	; 0x1fa6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1f9e:	0e 94 0b 1a 	call	0x3416	; 0x3416 <TWI_stop>

    return SUCCESS;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	8c 83       	std	Y+4, r24	; 0x04
    1fa6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <EEPROM_readByte+0x6>
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <EEPROM_readByte+0x8>
    1fbe:	0f 92       	push	r0
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	7c 83       	std	Y+4, r23	; 0x04
    1fca:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1fcc:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1fd0:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <TWI_getStatus>
    1fd4:	88 30       	cpi	r24, 0x08	; 8
    1fd6:	11 f0       	breq	.+4      	; 0x1fdc <EEPROM_readByte+0x26>
        return ERROR;
    1fd8:	1d 82       	std	Y+5, r1	; 0x05
    1fda:	44 c0       	rjmp	.+136    	; 0x2064 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	80 70       	andi	r24, 0x00	; 0
    1fe2:	97 70       	andi	r25, 0x07	; 7
    1fe4:	88 0f       	add	r24, r24
    1fe6:	89 2f       	mov	r24, r25
    1fe8:	88 1f       	adc	r24, r24
    1fea:	99 0b       	sbc	r25, r25
    1fec:	91 95       	neg	r25
    1fee:	80 6a       	ori	r24, 0xA0	; 160
    1ff0:	0e 94 16 1a 	call	0x342c	; 0x342c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1ff4:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <TWI_getStatus>
    1ff8:	88 31       	cpi	r24, 0x18	; 24
    1ffa:	11 f0       	breq	.+4      	; 0x2000 <EEPROM_readByte+0x4a>
        return ERROR;
    1ffc:	1d 82       	std	Y+5, r1	; 0x05
    1ffe:	32 c0       	rjmp	.+100    	; 0x2064 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	0e 94 16 1a 	call	0x342c	; 0x342c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2006:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <TWI_getStatus>
    200a:	88 32       	cpi	r24, 0x28	; 40
    200c:	11 f0       	breq	.+4      	; 0x2012 <EEPROM_readByte+0x5c>
        return ERROR;
    200e:	1d 82       	std	Y+5, r1	; 0x05
    2010:	29 c0       	rjmp	.+82     	; 0x2064 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    2012:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2016:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <TWI_getStatus>
    201a:	80 31       	cpi	r24, 0x10	; 16
    201c:	11 f0       	breq	.+4      	; 0x2022 <EEPROM_readByte+0x6c>
        return ERROR;
    201e:	1d 82       	std	Y+5, r1	; 0x05
    2020:	21 c0       	rjmp	.+66     	; 0x2064 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	9a 81       	ldd	r25, Y+2	; 0x02
    2026:	80 70       	andi	r24, 0x00	; 0
    2028:	97 70       	andi	r25, 0x07	; 7
    202a:	88 0f       	add	r24, r24
    202c:	89 2f       	mov	r24, r25
    202e:	88 1f       	adc	r24, r24
    2030:	99 0b       	sbc	r25, r25
    2032:	91 95       	neg	r25
    2034:	81 6a       	ori	r24, 0xA1	; 161
    2036:	0e 94 16 1a 	call	0x342c	; 0x342c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    203a:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <TWI_getStatus>
    203e:	80 34       	cpi	r24, 0x40	; 64
    2040:	11 f0       	breq	.+4      	; 0x2046 <EEPROM_readByte+0x90>
        return ERROR;
    2042:	1d 82       	std	Y+5, r1	; 0x05
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2046:	0e 94 40 1a 	call	0x3480	; 0x3480 <TWI_readByteWithNACK>
    204a:	eb 81       	ldd	r30, Y+3	; 0x03
    204c:	fc 81       	ldd	r31, Y+4	; 0x04
    204e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2050:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <TWI_getStatus>
    2054:	88 35       	cpi	r24, 0x58	; 88
    2056:	11 f0       	breq	.+4      	; 0x205c <EEPROM_readByte+0xa6>
        return ERROR;
    2058:	1d 82       	std	Y+5, r1	; 0x05
    205a:	04 c0       	rjmp	.+8      	; 0x2064 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    205c:	0e 94 0b 1a 	call	0x3416	; 0x3416 <TWI_stop>

    return SUCCESS;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	8d 83       	std	Y+5, r24	; 0x05
    2064:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	00 d0       	rcall	.+0      	; 0x207c <GPIO_setupPinDirection+0x6>
    207c:	00 d0       	rcall	.+0      	; 0x207e <GPIO_setupPinDirection+0x8>
    207e:	0f 92       	push	r0
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	6a 83       	std	Y+2, r22	; 0x02
    2088:	4b 83       	std	Y+3, r20	; 0x03
	/*check if the input port is grater than NUM_OF_PINS_PER_PORT
	 * Or if the input pin numbers is greater than NUM_OF_PORTS Do Nothing
	 * ELSE setup pin direction as input or output
	 *
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	88 30       	cpi	r24, 0x08	; 8
    208e:	08 f0       	brcs	.+2      	; 0x2092 <GPIO_setupPinDirection+0x1c>
    2090:	d5 c0       	rjmp	.+426    	; 0x223c <GPIO_setupPinDirection+0x1c6>
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	84 30       	cpi	r24, 0x04	; 4
    2096:	08 f0       	brcs	.+2      	; 0x209a <GPIO_setupPinDirection+0x24>
    2098:	d1 c0       	rjmp	.+418    	; 0x223c <GPIO_setupPinDirection+0x1c6>
	{
			/* Do Nothing */
	}
	else
	{
		switch (port_num)
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	28 2f       	mov	r18, r24
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	3d 83       	std	Y+5, r19	; 0x05
    20a2:	2c 83       	std	Y+4, r18	; 0x04
    20a4:	8c 81       	ldd	r24, Y+4	; 0x04
    20a6:	9d 81       	ldd	r25, Y+5	; 0x05
    20a8:	81 30       	cpi	r24, 0x01	; 1
    20aa:	91 05       	cpc	r25, r1
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <GPIO_setupPinDirection+0x3a>
    20ae:	43 c0       	rjmp	.+134    	; 0x2136 <GPIO_setupPinDirection+0xc0>
    20b0:	2c 81       	ldd	r18, Y+4	; 0x04
    20b2:	3d 81       	ldd	r19, Y+5	; 0x05
    20b4:	22 30       	cpi	r18, 0x02	; 2
    20b6:	31 05       	cpc	r19, r1
    20b8:	2c f4       	brge	.+10     	; 0x20c4 <GPIO_setupPinDirection+0x4e>
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	9d 81       	ldd	r25, Y+5	; 0x05
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	71 f0       	breq	.+28     	; 0x20de <GPIO_setupPinDirection+0x68>
    20c2:	bc c0       	rjmp	.+376    	; 0x223c <GPIO_setupPinDirection+0x1c6>
    20c4:	2c 81       	ldd	r18, Y+4	; 0x04
    20c6:	3d 81       	ldd	r19, Y+5	; 0x05
    20c8:	22 30       	cpi	r18, 0x02	; 2
    20ca:	31 05       	cpc	r19, r1
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <GPIO_setupPinDirection+0x5a>
    20ce:	5f c0       	rjmp	.+190    	; 0x218e <GPIO_setupPinDirection+0x118>
    20d0:	8c 81       	ldd	r24, Y+4	; 0x04
    20d2:	9d 81       	ldd	r25, Y+5	; 0x05
    20d4:	83 30       	cpi	r24, 0x03	; 3
    20d6:	91 05       	cpc	r25, r1
    20d8:	09 f4       	brne	.+2      	; 0x20dc <GPIO_setupPinDirection+0x66>
    20da:	85 c0       	rjmp	.+266    	; 0x21e6 <GPIO_setupPinDirection+0x170>
    20dc:	af c0       	rjmp	.+350    	; 0x223c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	81 30       	cpi	r24, 0x01	; 1
    20e2:	a1 f4       	brne	.+40     	; 0x210c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    20e4:	aa e3       	ldi	r26, 0x3A	; 58
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	ea e3       	ldi	r30, 0x3A	; 58
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	48 2f       	mov	r20, r24
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	02 2e       	mov	r0, r18
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <GPIO_setupPinDirection+0x8c>
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	0a 94       	dec	r0
    2104:	e2 f7       	brpl	.-8      	; 0x20fe <GPIO_setupPinDirection+0x88>
    2106:	84 2b       	or	r24, r20
    2108:	8c 93       	st	X, r24
    210a:	98 c0       	rjmp	.+304    	; 0x223c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    210c:	aa e3       	ldi	r26, 0x3A	; 58
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	ea e3       	ldi	r30, 0x3A	; 58
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	48 2f       	mov	r20, r24
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	02 2e       	mov	r0, r18
    2124:	02 c0       	rjmp	.+4      	; 0x212a <GPIO_setupPinDirection+0xb4>
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	0a 94       	dec	r0
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <GPIO_setupPinDirection+0xb0>
    212e:	80 95       	com	r24
    2130:	84 23       	and	r24, r20
    2132:	8c 93       	st	X, r24
    2134:	83 c0       	rjmp	.+262    	; 0x223c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	81 30       	cpi	r24, 0x01	; 1
    213a:	a1 f4       	brne	.+40     	; 0x2164 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    213c:	a7 e3       	ldi	r26, 0x37	; 55
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	e7 e3       	ldi	r30, 0x37	; 55
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	48 2f       	mov	r20, r24
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	02 2e       	mov	r0, r18
    2154:	02 c0       	rjmp	.+4      	; 0x215a <GPIO_setupPinDirection+0xe4>
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	0a 94       	dec	r0
    215c:	e2 f7       	brpl	.-8      	; 0x2156 <GPIO_setupPinDirection+0xe0>
    215e:	84 2b       	or	r24, r20
    2160:	8c 93       	st	X, r24
    2162:	6c c0       	rjmp	.+216    	; 0x223c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2164:	a7 e3       	ldi	r26, 0x37	; 55
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e7 e3       	ldi	r30, 0x37	; 55
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	48 2f       	mov	r20, r24
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	02 2e       	mov	r0, r18
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <GPIO_setupPinDirection+0x10c>
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	0a 94       	dec	r0
    2184:	e2 f7       	brpl	.-8      	; 0x217e <GPIO_setupPinDirection+0x108>
    2186:	80 95       	com	r24
    2188:	84 23       	and	r24, r20
    218a:	8c 93       	st	X, r24
    218c:	57 c0       	rjmp	.+174    	; 0x223c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	81 30       	cpi	r24, 0x01	; 1
    2192:	a1 f4       	brne	.+40     	; 0x21bc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2194:	a4 e3       	ldi	r26, 0x34	; 52
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e4 e3       	ldi	r30, 0x34	; 52
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	48 2f       	mov	r20, r24
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	02 2e       	mov	r0, r18
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <GPIO_setupPinDirection+0x13c>
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	0a 94       	dec	r0
    21b4:	e2 f7       	brpl	.-8      	; 0x21ae <GPIO_setupPinDirection+0x138>
    21b6:	84 2b       	or	r24, r20
    21b8:	8c 93       	st	X, r24
    21ba:	40 c0       	rjmp	.+128    	; 0x223c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    21bc:	a4 e3       	ldi	r26, 0x34	; 52
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e4 e3       	ldi	r30, 0x34	; 52
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	48 2f       	mov	r20, r24
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	02 2e       	mov	r0, r18
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <GPIO_setupPinDirection+0x164>
    21d6:	88 0f       	add	r24, r24
    21d8:	99 1f       	adc	r25, r25
    21da:	0a 94       	dec	r0
    21dc:	e2 f7       	brpl	.-8      	; 0x21d6 <GPIO_setupPinDirection+0x160>
    21de:	80 95       	com	r24
    21e0:	84 23       	and	r24, r20
    21e2:	8c 93       	st	X, r24
    21e4:	2b c0       	rjmp	.+86     	; 0x223c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID :
			if (direction == PIN_OUTPUT)
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	81 30       	cpi	r24, 0x01	; 1
    21ea:	a1 f4       	brne	.+40     	; 0x2214 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    21ec:	a1 e3       	ldi	r26, 0x31	; 49
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e1 e3       	ldi	r30, 0x31	; 49
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	48 2f       	mov	r20, r24
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	02 2e       	mov	r0, r18
    2204:	02 c0       	rjmp	.+4      	; 0x220a <GPIO_setupPinDirection+0x194>
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	0a 94       	dec	r0
    220c:	e2 f7       	brpl	.-8      	; 0x2206 <GPIO_setupPinDirection+0x190>
    220e:	84 2b       	or	r24, r20
    2210:	8c 93       	st	X, r24
    2212:	14 c0       	rjmp	.+40     	; 0x223c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2214:	a1 e3       	ldi	r26, 0x31	; 49
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e1 e3       	ldi	r30, 0x31	; 49
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	48 2f       	mov	r20, r24
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	02 2e       	mov	r0, r18
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <GPIO_setupPinDirection+0x1bc>
    222e:	88 0f       	add	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	0a 94       	dec	r0
    2234:	e2 f7       	brpl	.-8      	; 0x222e <GPIO_setupPinDirection+0x1b8>
    2236:	80 95       	com	r24
    2238:	84 23       	and	r24, r20
    223a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <GPIO_writePin+0x6>
    2252:	00 d0       	rcall	.+0      	; 0x2254 <GPIO_writePin+0x8>
    2254:	0f 92       	push	r0
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	6a 83       	std	Y+2, r22	; 0x02
    225e:	4b 83       	std	Y+3, r20	; 0x03
	 Description :
     * Write the value Logic High or Logic Low on the required pin.
     * If the input port number or pin number are not correct, The function will not handle the request.
     * If the pin is input, this function will enable/disable the internal pull-up resistor.
	 */
	if ( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT) )
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	84 30       	cpi	r24, 0x04	; 4
    2264:	08 f0       	brcs	.+2      	; 0x2268 <GPIO_writePin+0x1c>
    2266:	d5 c0       	rjmp	.+426    	; 0x2412 <GPIO_writePin+0x1c6>
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	88 30       	cpi	r24, 0x08	; 8
    226c:	08 f0       	brcs	.+2      	; 0x2270 <GPIO_writePin+0x24>
    226e:	d1 c0       	rjmp	.+418    	; 0x2412 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch (port_num)
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	3d 83       	std	Y+5, r19	; 0x05
    2278:	2c 83       	std	Y+4, r18	; 0x04
    227a:	8c 81       	ldd	r24, Y+4	; 0x04
    227c:	9d 81       	ldd	r25, Y+5	; 0x05
    227e:	81 30       	cpi	r24, 0x01	; 1
    2280:	91 05       	cpc	r25, r1
    2282:	09 f4       	brne	.+2      	; 0x2286 <GPIO_writePin+0x3a>
    2284:	43 c0       	rjmp	.+134    	; 0x230c <GPIO_writePin+0xc0>
    2286:	2c 81       	ldd	r18, Y+4	; 0x04
    2288:	3d 81       	ldd	r19, Y+5	; 0x05
    228a:	22 30       	cpi	r18, 0x02	; 2
    228c:	31 05       	cpc	r19, r1
    228e:	2c f4       	brge	.+10     	; 0x229a <GPIO_writePin+0x4e>
    2290:	8c 81       	ldd	r24, Y+4	; 0x04
    2292:	9d 81       	ldd	r25, Y+5	; 0x05
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	71 f0       	breq	.+28     	; 0x22b4 <GPIO_writePin+0x68>
    2298:	bc c0       	rjmp	.+376    	; 0x2412 <GPIO_writePin+0x1c6>
    229a:	2c 81       	ldd	r18, Y+4	; 0x04
    229c:	3d 81       	ldd	r19, Y+5	; 0x05
    229e:	22 30       	cpi	r18, 0x02	; 2
    22a0:	31 05       	cpc	r19, r1
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <GPIO_writePin+0x5a>
    22a4:	5f c0       	rjmp	.+190    	; 0x2364 <GPIO_writePin+0x118>
    22a6:	8c 81       	ldd	r24, Y+4	; 0x04
    22a8:	9d 81       	ldd	r25, Y+5	; 0x05
    22aa:	83 30       	cpi	r24, 0x03	; 3
    22ac:	91 05       	cpc	r25, r1
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <GPIO_writePin+0x66>
    22b0:	85 c0       	rjmp	.+266    	; 0x23bc <GPIO_writePin+0x170>
    22b2:	af c0       	rjmp	.+350    	; 0x2412 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if (value == LOGIC_HIGH )
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	81 30       	cpi	r24, 0x01	; 1
    22b8:	a1 f4       	brne	.+40     	; 0x22e2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    22ba:	ab e3       	ldi	r26, 0x3B	; 59
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	eb e3       	ldi	r30, 0x3B	; 59
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	48 2f       	mov	r20, r24
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	02 2e       	mov	r0, r18
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <GPIO_writePin+0x8c>
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	0a 94       	dec	r0
    22da:	e2 f7       	brpl	.-8      	; 0x22d4 <GPIO_writePin+0x88>
    22dc:	84 2b       	or	r24, r20
    22de:	8c 93       	st	X, r24
    22e0:	98 c0       	rjmp	.+304    	; 0x2412 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    22e2:	ab e3       	ldi	r26, 0x3B	; 59
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	eb e3       	ldi	r30, 0x3B	; 59
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	48 2f       	mov	r20, r24
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	02 2e       	mov	r0, r18
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <GPIO_writePin+0xb4>
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	0a 94       	dec	r0
    2302:	e2 f7       	brpl	.-8      	; 0x22fc <GPIO_writePin+0xb0>
    2304:	80 95       	com	r24
    2306:	84 23       	and	r24, r20
    2308:	8c 93       	st	X, r24
    230a:	83 c0       	rjmp	.+262    	; 0x2412 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID :
			if (value == LOGIC_HIGH)
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	81 30       	cpi	r24, 0x01	; 1
    2310:	a1 f4       	brne	.+40     	; 0x233a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2312:	a8 e3       	ldi	r26, 0x38	; 56
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e8 e3       	ldi	r30, 0x38	; 56
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	48 2f       	mov	r20, r24
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	02 2e       	mov	r0, r18
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <GPIO_writePin+0xe4>
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	0a 94       	dec	r0
    2332:	e2 f7       	brpl	.-8      	; 0x232c <GPIO_writePin+0xe0>
    2334:	84 2b       	or	r24, r20
    2336:	8c 93       	st	X, r24
    2338:	6c c0       	rjmp	.+216    	; 0x2412 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    233a:	a8 e3       	ldi	r26, 0x38	; 56
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e8 e3       	ldi	r30, 0x38	; 56
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	48 2f       	mov	r20, r24
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	02 2e       	mov	r0, r18
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <GPIO_writePin+0x10c>
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	0a 94       	dec	r0
    235a:	e2 f7       	brpl	.-8      	; 0x2354 <GPIO_writePin+0x108>
    235c:	80 95       	com	r24
    235e:	84 23       	and	r24, r20
    2360:	8c 93       	st	X, r24
    2362:	57 c0       	rjmp	.+174    	; 0x2412 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID :
			if (value == LOGIC_HIGH)
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	a1 f4       	brne	.+40     	; 0x2392 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    236a:	a5 e3       	ldi	r26, 0x35	; 53
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e5 e3       	ldi	r30, 0x35	; 53
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	48 2f       	mov	r20, r24
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	02 2e       	mov	r0, r18
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <GPIO_writePin+0x13c>
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	0a 94       	dec	r0
    238a:	e2 f7       	brpl	.-8      	; 0x2384 <GPIO_writePin+0x138>
    238c:	84 2b       	or	r24, r20
    238e:	8c 93       	st	X, r24
    2390:	40 c0       	rjmp	.+128    	; 0x2412 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2392:	a5 e3       	ldi	r26, 0x35	; 53
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	e5 e3       	ldi	r30, 0x35	; 53
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	48 2f       	mov	r20, r24
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	02 2e       	mov	r0, r18
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <GPIO_writePin+0x164>
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	0a 94       	dec	r0
    23b2:	e2 f7       	brpl	.-8      	; 0x23ac <GPIO_writePin+0x160>
    23b4:	80 95       	com	r24
    23b6:	84 23       	and	r24, r20
    23b8:	8c 93       	st	X, r24
    23ba:	2b c0       	rjmp	.+86     	; 0x2412 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID :
			if (value == LOGIC_HIGH)
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	81 30       	cpi	r24, 0x01	; 1
    23c0:	a1 f4       	brne	.+40     	; 0x23ea <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    23c2:	a2 e3       	ldi	r26, 0x32	; 50
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e2 e3       	ldi	r30, 0x32	; 50
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	48 2f       	mov	r20, r24
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	02 2e       	mov	r0, r18
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <GPIO_writePin+0x194>
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	0a 94       	dec	r0
    23e2:	e2 f7       	brpl	.-8      	; 0x23dc <GPIO_writePin+0x190>
    23e4:	84 2b       	or	r24, r20
    23e6:	8c 93       	st	X, r24
    23e8:	14 c0       	rjmp	.+40     	; 0x2412 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    23ea:	a2 e3       	ldi	r26, 0x32	; 50
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e2 e3       	ldi	r30, 0x32	; 50
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	48 2f       	mov	r20, r24
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	02 2e       	mov	r0, r18
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <GPIO_writePin+0x1bc>
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	0a 94       	dec	r0
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <GPIO_writePin+0x1b8>
    240c:	80 95       	com	r24
    240e:	84 23       	and	r24, r20
    2410:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	00 d0       	rcall	.+0      	; 0x2428 <GPIO_readPin+0x6>
    2428:	00 d0       	rcall	.+0      	; 0x242a <GPIO_readPin+0x8>
    242a:	0f 92       	push	r0
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	8a 83       	std	Y+2, r24	; 0x02
    2432:	6b 83       	std	Y+3, r22	; 0x03
	 * Description :
     * Read and return the value for the required pin, it should be Logic High or Logic Low.
     * If the input port number or pin number are not correct, The function will return Logic Low.
	 */

	uint8 pin_value = LOGIC_LOW; //if not changed
    2434:	19 82       	std	Y+1, r1	; 0x01

	if ((port_num >= NUM_OF_PORTS ) || pin_num >= NUM_OF_PINS_PER_PORT)
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	84 30       	cpi	r24, 0x04	; 4
    243a:	08 f0       	brcs	.+2      	; 0x243e <GPIO_readPin+0x1c>
    243c:	84 c0       	rjmp	.+264    	; 0x2546 <GPIO_readPin+0x124>
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	88 30       	cpi	r24, 0x08	; 8
    2442:	08 f0       	brcs	.+2      	; 0x2446 <GPIO_readPin+0x24>
    2444:	80 c0       	rjmp	.+256    	; 0x2546 <GPIO_readPin+0x124>
	{
		// Do Nothing
	}
	else
	{
		switch (port_num)
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	3d 83       	std	Y+5, r19	; 0x05
    244e:	2c 83       	std	Y+4, r18	; 0x04
    2450:	4c 81       	ldd	r20, Y+4	; 0x04
    2452:	5d 81       	ldd	r21, Y+5	; 0x05
    2454:	41 30       	cpi	r20, 0x01	; 1
    2456:	51 05       	cpc	r21, r1
    2458:	79 f1       	breq	.+94     	; 0x24b8 <GPIO_readPin+0x96>
    245a:	8c 81       	ldd	r24, Y+4	; 0x04
    245c:	9d 81       	ldd	r25, Y+5	; 0x05
    245e:	82 30       	cpi	r24, 0x02	; 2
    2460:	91 05       	cpc	r25, r1
    2462:	34 f4       	brge	.+12     	; 0x2470 <GPIO_readPin+0x4e>
    2464:	2c 81       	ldd	r18, Y+4	; 0x04
    2466:	3d 81       	ldd	r19, Y+5	; 0x05
    2468:	21 15       	cp	r18, r1
    246a:	31 05       	cpc	r19, r1
    246c:	69 f0       	breq	.+26     	; 0x2488 <GPIO_readPin+0x66>
    246e:	6b c0       	rjmp	.+214    	; 0x2546 <GPIO_readPin+0x124>
    2470:	4c 81       	ldd	r20, Y+4	; 0x04
    2472:	5d 81       	ldd	r21, Y+5	; 0x05
    2474:	42 30       	cpi	r20, 0x02	; 2
    2476:	51 05       	cpc	r21, r1
    2478:	b9 f1       	breq	.+110    	; 0x24e8 <GPIO_readPin+0xc6>
    247a:	8c 81       	ldd	r24, Y+4	; 0x04
    247c:	9d 81       	ldd	r25, Y+5	; 0x05
    247e:	83 30       	cpi	r24, 0x03	; 3
    2480:	91 05       	cpc	r25, r1
    2482:	09 f4       	brne	.+2      	; 0x2486 <GPIO_readPin+0x64>
    2484:	49 c0       	rjmp	.+146    	; 0x2518 <GPIO_readPin+0xf6>
    2486:	5f c0       	rjmp	.+190    	; 0x2546 <GPIO_readPin+0x124>
		{
		case PORTA_ID :
			if (BIT_IS_SET(PINA,pin_num))
    2488:	e9 e3       	ldi	r30, 0x39	; 57
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	88 2f       	mov	r24, r24
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	a9 01       	movw	r20, r18
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <GPIO_readPin+0x7e>
    249c:	55 95       	asr	r21
    249e:	47 95       	ror	r20
    24a0:	8a 95       	dec	r24
    24a2:	e2 f7       	brpl	.-8      	; 0x249c <GPIO_readPin+0x7a>
    24a4:	ca 01       	movw	r24, r20
    24a6:	81 70       	andi	r24, 0x01	; 1
    24a8:	90 70       	andi	r25, 0x00	; 0
    24aa:	88 23       	and	r24, r24
    24ac:	19 f0       	breq	.+6      	; 0x24b4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	89 83       	std	Y+1, r24	; 0x01
    24b2:	49 c0       	rjmp	.+146    	; 0x2546 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24b4:	19 82       	std	Y+1, r1	; 0x01
    24b6:	47 c0       	rjmp	.+142    	; 0x2546 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID :
			if (BIT_IS_SET(PINB,pin_num))
    24b8:	e6 e3       	ldi	r30, 0x36	; 54
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	88 2f       	mov	r24, r24
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a9 01       	movw	r20, r18
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <GPIO_readPin+0xae>
    24cc:	55 95       	asr	r21
    24ce:	47 95       	ror	r20
    24d0:	8a 95       	dec	r24
    24d2:	e2 f7       	brpl	.-8      	; 0x24cc <GPIO_readPin+0xaa>
    24d4:	ca 01       	movw	r24, r20
    24d6:	81 70       	andi	r24, 0x01	; 1
    24d8:	90 70       	andi	r25, 0x00	; 0
    24da:	88 23       	and	r24, r24
    24dc:	19 f0       	breq	.+6      	; 0x24e4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	31 c0       	rjmp	.+98     	; 0x2546 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24e4:	19 82       	std	Y+1, r1	; 0x01
    24e6:	2f c0       	rjmp	.+94     	; 0x2546 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID :
			if (BIT_IS_SET(PINC,pin_num))
    24e8:	e3 e3       	ldi	r30, 0x33	; 51
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	88 2f       	mov	r24, r24
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a9 01       	movw	r20, r18
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <GPIO_readPin+0xde>
    24fc:	55 95       	asr	r21
    24fe:	47 95       	ror	r20
    2500:	8a 95       	dec	r24
    2502:	e2 f7       	brpl	.-8      	; 0x24fc <GPIO_readPin+0xda>
    2504:	ca 01       	movw	r24, r20
    2506:	81 70       	andi	r24, 0x01	; 1
    2508:	90 70       	andi	r25, 0x00	; 0
    250a:	88 23       	and	r24, r24
    250c:	19 f0       	breq	.+6      	; 0x2514 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	89 83       	std	Y+1, r24	; 0x01
    2512:	19 c0       	rjmp	.+50     	; 0x2546 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2514:	19 82       	std	Y+1, r1	; 0x01
    2516:	17 c0       	rjmp	.+46     	; 0x2546 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID :
			if (BIT_IS_SET(PIND,pin_num))
    2518:	e0 e3       	ldi	r30, 0x30	; 48
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a9 01       	movw	r20, r18
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <GPIO_readPin+0x10e>
    252c:	55 95       	asr	r21
    252e:	47 95       	ror	r20
    2530:	8a 95       	dec	r24
    2532:	e2 f7       	brpl	.-8      	; 0x252c <GPIO_readPin+0x10a>
    2534:	ca 01       	movw	r24, r20
    2536:	81 70       	andi	r24, 0x01	; 1
    2538:	90 70       	andi	r25, 0x00	; 0
    253a:	88 23       	and	r24, r24
    253c:	19 f0       	breq	.+6      	; 0x2544 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	01 c0       	rjmp	.+2      	; 0x2546 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2544:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    2546:	89 81       	ldd	r24, Y+1	; 0x01
}
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	00 d0       	rcall	.+0      	; 0x255e <GPIO_setupPortDirection+0x6>
    255e:	00 d0       	rcall	.+0      	; 0x2560 <GPIO_setupPortDirection+0x8>
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	6a 83       	std	Y+2, r22	; 0x02
	/*
	* Check if the input number is greater than NUM_OF_PORTS value.
    * In this case the input is not valid port number
	*/
	if (port_num >= NUM_OF_PORTS)
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	84 30       	cpi	r24, 0x04	; 4
    256c:	90 f5       	brcc	.+100    	; 0x25d2 <GPIO_setupPortDirection+0x7a>
	{
		/*DO Nothing */
	}
	else
	{
		switch (port_num)
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	3c 83       	std	Y+4, r19	; 0x04
    2576:	2b 83       	std	Y+3, r18	; 0x03
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	9c 81       	ldd	r25, Y+4	; 0x04
    257c:	81 30       	cpi	r24, 0x01	; 1
    257e:	91 05       	cpc	r25, r1
    2580:	d1 f0       	breq	.+52     	; 0x25b6 <GPIO_setupPortDirection+0x5e>
    2582:	2b 81       	ldd	r18, Y+3	; 0x03
    2584:	3c 81       	ldd	r19, Y+4	; 0x04
    2586:	22 30       	cpi	r18, 0x02	; 2
    2588:	31 05       	cpc	r19, r1
    258a:	2c f4       	brge	.+10     	; 0x2596 <GPIO_setupPortDirection+0x3e>
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	9c 81       	ldd	r25, Y+4	; 0x04
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	61 f0       	breq	.+24     	; 0x25ac <GPIO_setupPortDirection+0x54>
    2594:	1e c0       	rjmp	.+60     	; 0x25d2 <GPIO_setupPortDirection+0x7a>
    2596:	2b 81       	ldd	r18, Y+3	; 0x03
    2598:	3c 81       	ldd	r19, Y+4	; 0x04
    259a:	22 30       	cpi	r18, 0x02	; 2
    259c:	31 05       	cpc	r19, r1
    259e:	81 f0       	breq	.+32     	; 0x25c0 <GPIO_setupPortDirection+0x68>
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	83 30       	cpi	r24, 0x03	; 3
    25a6:	91 05       	cpc	r25, r1
    25a8:	81 f0       	breq	.+32     	; 0x25ca <GPIO_setupPortDirection+0x72>
    25aa:	13 c0       	rjmp	.+38     	; 0x25d2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID :
			DDRA = direction;
    25ac:	ea e3       	ldi	r30, 0x3A	; 58
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	80 83       	st	Z, r24
    25b4:	0e c0       	rjmp	.+28     	; 0x25d2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID :
			DDRB = direction;
    25b6:	e7 e3       	ldi	r30, 0x37	; 55
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	80 83       	st	Z, r24
    25be:	09 c0       	rjmp	.+18     	; 0x25d2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    25c0:	e4 e3       	ldi	r30, 0x34	; 52
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	80 83       	st	Z, r24
    25c8:	04 c0       	rjmp	.+8      	; 0x25d2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID :
			DDRD = direction;
    25ca:	e1 e3       	ldi	r30, 0x31	; 49
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	80 83       	st	Z, r24
			break;
		}
	}
}
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <GPIO_writePort+0x6>
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <GPIO_writePort+0x8>
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS)
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	84 30       	cpi	r24, 0x04	; 4
    25f4:	90 f5       	brcc	.+100    	; 0x265a <GPIO_writePort+0x7a>
	{
		//Do Nothing
	}
	else
	{
		switch (port_num)
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	28 2f       	mov	r18, r24
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	3c 83       	std	Y+4, r19	; 0x04
    25fe:	2b 83       	std	Y+3, r18	; 0x03
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	9c 81       	ldd	r25, Y+4	; 0x04
    2604:	81 30       	cpi	r24, 0x01	; 1
    2606:	91 05       	cpc	r25, r1
    2608:	d1 f0       	breq	.+52     	; 0x263e <GPIO_writePort+0x5e>
    260a:	2b 81       	ldd	r18, Y+3	; 0x03
    260c:	3c 81       	ldd	r19, Y+4	; 0x04
    260e:	22 30       	cpi	r18, 0x02	; 2
    2610:	31 05       	cpc	r19, r1
    2612:	2c f4       	brge	.+10     	; 0x261e <GPIO_writePort+0x3e>
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	61 f0       	breq	.+24     	; 0x2634 <GPIO_writePort+0x54>
    261c:	1e c0       	rjmp	.+60     	; 0x265a <GPIO_writePort+0x7a>
    261e:	2b 81       	ldd	r18, Y+3	; 0x03
    2620:	3c 81       	ldd	r19, Y+4	; 0x04
    2622:	22 30       	cpi	r18, 0x02	; 2
    2624:	31 05       	cpc	r19, r1
    2626:	81 f0       	breq	.+32     	; 0x2648 <GPIO_writePort+0x68>
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	83 30       	cpi	r24, 0x03	; 3
    262e:	91 05       	cpc	r25, r1
    2630:	81 f0       	breq	.+32     	; 0x2652 <GPIO_writePort+0x72>
    2632:	13 c0       	rjmp	.+38     	; 0x265a <GPIO_writePort+0x7a>
		{
		case PORTA_ID :
			PORTA = value;
    2634:	eb e3       	ldi	r30, 0x3B	; 59
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	80 83       	st	Z, r24
    263c:	0e c0       	rjmp	.+28     	; 0x265a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID :
			PORTB = value;
    263e:	e8 e3       	ldi	r30, 0x38	; 56
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	80 83       	st	Z, r24
    2646:	09 c0       	rjmp	.+18     	; 0x265a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID :
			PORTC = value;
    2648:	e5 e3       	ldi	r30, 0x35	; 53
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	80 83       	st	Z, r24
    2650:	04 c0       	rjmp	.+8      	; 0x265a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID :
			PORTD = value;
    2652:	e2 e3       	ldi	r30, 0x32	; 50
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	80 83       	st	Z, r24
			break;
		}
	}
}
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	00 d0       	rcall	.+0      	; 0x266e <GPIO_readPort+0x6>
    266e:	00 d0       	rcall	.+0      	; 0x2670 <GPIO_readPort+0x8>
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2676:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	84 30       	cpi	r24, 0x04	; 4
    267c:	90 f5       	brcc	.+100    	; 0x26e2 <GPIO_readPort+0x7a>
	{
		// Do Nothing
	}
	else
	{
		switch (port_num)
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	3c 83       	std	Y+4, r19	; 0x04
    2686:	2b 83       	std	Y+3, r18	; 0x03
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	81 30       	cpi	r24, 0x01	; 1
    268e:	91 05       	cpc	r25, r1
    2690:	d1 f0       	breq	.+52     	; 0x26c6 <GPIO_readPort+0x5e>
    2692:	2b 81       	ldd	r18, Y+3	; 0x03
    2694:	3c 81       	ldd	r19, Y+4	; 0x04
    2696:	22 30       	cpi	r18, 0x02	; 2
    2698:	31 05       	cpc	r19, r1
    269a:	2c f4       	brge	.+10     	; 0x26a6 <GPIO_readPort+0x3e>
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	9c 81       	ldd	r25, Y+4	; 0x04
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	61 f0       	breq	.+24     	; 0x26bc <GPIO_readPort+0x54>
    26a4:	1e c0       	rjmp	.+60     	; 0x26e2 <GPIO_readPort+0x7a>
    26a6:	2b 81       	ldd	r18, Y+3	; 0x03
    26a8:	3c 81       	ldd	r19, Y+4	; 0x04
    26aa:	22 30       	cpi	r18, 0x02	; 2
    26ac:	31 05       	cpc	r19, r1
    26ae:	81 f0       	breq	.+32     	; 0x26d0 <GPIO_readPort+0x68>
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	9c 81       	ldd	r25, Y+4	; 0x04
    26b4:	83 30       	cpi	r24, 0x03	; 3
    26b6:	91 05       	cpc	r25, r1
    26b8:	81 f0       	breq	.+32     	; 0x26da <GPIO_readPort+0x72>
    26ba:	13 c0       	rjmp	.+38     	; 0x26e2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID :
			value =PINA  ;
    26bc:	e9 e3       	ldi	r30, 0x39	; 57
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	0e c0       	rjmp	.+28     	; 0x26e2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID :
			value =PINB  ;
    26c6:	e6 e3       	ldi	r30, 0x36	; 54
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	09 c0       	rjmp	.+18     	; 0x26e2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID :
			value =PINC  ;
    26d0:	e3 e3       	ldi	r30, 0x33	; 51
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	89 83       	std	Y+1, r24	; 0x01
    26d8:	04 c0       	rjmp	.+8      	; 0x26e2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID :
			value =PIND  ;
    26da:	e0 e3       	ldi	r30, 0x30	; 48
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	89 83       	std	Y+1, r24	; 0x01
			break;

		}
	}
	return value;
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	2e 97       	sbiw	r28, 0x0e	; 14
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	66 e0       	ldi	r22, 0x06	; 6
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 3b 10 	call	0x2076	; 0x2076 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	65 e0       	ldi	r22, 0x05	; 5
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	0e 94 3b 10 	call	0x2076	; 0x2076 <GPIO_setupPinDirection>
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	a0 ea       	ldi	r26, 0xA0	; 160
    2720:	b1 e4       	ldi	r27, 0x41	; 65
    2722:	8b 87       	std	Y+11, r24	; 0x0b
    2724:	9c 87       	std	Y+12, r25	; 0x0c
    2726:	ad 87       	std	Y+13, r26	; 0x0d
    2728:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272a:	6b 85       	ldd	r22, Y+11	; 0x0b
    272c:	7c 85       	ldd	r23, Y+12	; 0x0c
    272e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2730:	9e 85       	ldd	r25, Y+14	; 0x0e
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	4a ef       	ldi	r20, 0xFA	; 250
    2738:	54 e4       	ldi	r21, 0x44	; 68
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	8f 83       	std	Y+7, r24	; 0x07
    2744:	98 87       	std	Y+8, r25	; 0x08
    2746:	a9 87       	std	Y+9, r26	; 0x09
    2748:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    274a:	6f 81       	ldd	r22, Y+7	; 0x07
    274c:	78 85       	ldd	r23, Y+8	; 0x08
    274e:	89 85       	ldd	r24, Y+9	; 0x09
    2750:	9a 85       	ldd	r25, Y+10	; 0x0a
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e8       	ldi	r20, 0x80	; 128
    2758:	5f e3       	ldi	r21, 0x3F	; 63
    275a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    275e:	88 23       	and	r24, r24
    2760:	2c f4       	brge	.+10     	; 0x276c <LCD_init+0x7a>
		__ticks = 1;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	9e 83       	std	Y+6, r25	; 0x06
    2768:	8d 83       	std	Y+5, r24	; 0x05
    276a:	3f c0       	rjmp	.+126    	; 0x27ea <LCD_init+0xf8>
	else if (__tmp > 65535)
    276c:	6f 81       	ldd	r22, Y+7	; 0x07
    276e:	78 85       	ldd	r23, Y+8	; 0x08
    2770:	89 85       	ldd	r24, Y+9	; 0x09
    2772:	9a 85       	ldd	r25, Y+10	; 0x0a
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	3f ef       	ldi	r19, 0xFF	; 255
    2778:	4f e7       	ldi	r20, 0x7F	; 127
    277a:	57 e4       	ldi	r21, 0x47	; 71
    277c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2780:	18 16       	cp	r1, r24
    2782:	4c f5       	brge	.+82     	; 0x27d6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2784:	6b 85       	ldd	r22, Y+11	; 0x0b
    2786:	7c 85       	ldd	r23, Y+12	; 0x0c
    2788:	8d 85       	ldd	r24, Y+13	; 0x0d
    278a:	9e 85       	ldd	r25, Y+14	; 0x0e
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e2       	ldi	r20, 0x20	; 32
    2792:	51 e4       	ldi	r21, 0x41	; 65
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	bc 01       	movw	r22, r24
    279e:	cd 01       	movw	r24, r26
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9e 83       	std	Y+6, r25	; 0x06
    27aa:	8d 83       	std	Y+5, r24	; 0x05
    27ac:	0f c0       	rjmp	.+30     	; 0x27cc <LCD_init+0xda>
    27ae:	88 ec       	ldi	r24, 0xC8	; 200
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	9c 83       	std	Y+4, r25	; 0x04
    27b4:	8b 83       	std	Y+3, r24	; 0x03
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <LCD_init+0xc8>
    27be:	9c 83       	std	Y+4, r25	; 0x04
    27c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c2:	8d 81       	ldd	r24, Y+5	; 0x05
    27c4:	9e 81       	ldd	r25, Y+6	; 0x06
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27cc:	8d 81       	ldd	r24, Y+5	; 0x05
    27ce:	9e 81       	ldd	r25, Y+6	; 0x06
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	69 f7       	brne	.-38     	; 0x27ae <LCD_init+0xbc>
    27d4:	14 c0       	rjmp	.+40     	; 0x27fe <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d6:	6f 81       	ldd	r22, Y+7	; 0x07
    27d8:	78 85       	ldd	r23, Y+8	; 0x08
    27da:	89 85       	ldd	r24, Y+9	; 0x09
    27dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9e 83       	std	Y+6, r25	; 0x06
    27e8:	8d 83       	std	Y+5, r24	; 0x05
    27ea:	8d 81       	ldd	r24, Y+5	; 0x05
    27ec:	9e 81       	ldd	r25, Y+6	; 0x06
    27ee:	9a 83       	std	Y+2, r25	; 0x02
    27f0:	89 83       	std	Y+1, r24	; 0x01
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	9a 81       	ldd	r25, Y+2	; 0x02
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <LCD_init+0x104>
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	6f ef       	ldi	r22, 0xFF	; 255
    2802:	0e 94 ac 12 	call	0x2558	; 0x2558 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2806:	88 e3       	ldi	r24, 0x38	; 56
    2808:	0e 94 15 14 	call	0x282a	; 0x282a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    280c:	8c e0       	ldi	r24, 0x0C	; 12
    280e:	0e 94 15 14 	call	0x282a	; 0x282a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	0e 94 15 14 	call	0x282a	; 0x282a <LCD_sendCommand>
}
    2818:	2e 96       	adiw	r28, 0x0e	; 14
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <LCD_sendCommand>:
/*
 * Description
 * send the command to the LCD
 */
void LCD_sendCommand(uint8 command)
{
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	e9 97       	sbiw	r28, 0x39	; 57
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	66 e0       	ldi	r22, 0x06	; 6
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	a0 e8       	ldi	r26, 0x80	; 128
    2850:	bf e3       	ldi	r27, 0x3F	; 63
    2852:	8d ab       	std	Y+53, r24	; 0x35
    2854:	9e ab       	std	Y+54, r25	; 0x36
    2856:	af ab       	std	Y+55, r26	; 0x37
    2858:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285a:	6d a9       	ldd	r22, Y+53	; 0x35
    285c:	7e a9       	ldd	r23, Y+54	; 0x36
    285e:	8f a9       	ldd	r24, Y+55	; 0x37
    2860:	98 ad       	ldd	r25, Y+56	; 0x38
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4a ef       	ldi	r20, 0xFA	; 250
    2868:	54 e4       	ldi	r21, 0x44	; 68
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	89 ab       	std	Y+49, r24	; 0x31
    2874:	9a ab       	std	Y+50, r25	; 0x32
    2876:	ab ab       	std	Y+51, r26	; 0x33
    2878:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    287a:	69 a9       	ldd	r22, Y+49	; 0x31
    287c:	7a a9       	ldd	r23, Y+50	; 0x32
    287e:	8b a9       	ldd	r24, Y+51	; 0x33
    2880:	9c a9       	ldd	r25, Y+52	; 0x34
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e8       	ldi	r20, 0x80	; 128
    2888:	5f e3       	ldi	r21, 0x3F	; 63
    288a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    288e:	88 23       	and	r24, r24
    2890:	2c f4       	brge	.+10     	; 0x289c <LCD_sendCommand+0x72>
		__ticks = 1;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	98 ab       	std	Y+48, r25	; 0x30
    2898:	8f a7       	std	Y+47, r24	; 0x2f
    289a:	3f c0       	rjmp	.+126    	; 0x291a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    289c:	69 a9       	ldd	r22, Y+49	; 0x31
    289e:	7a a9       	ldd	r23, Y+50	; 0x32
    28a0:	8b a9       	ldd	r24, Y+51	; 0x33
    28a2:	9c a9       	ldd	r25, Y+52	; 0x34
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	3f ef       	ldi	r19, 0xFF	; 255
    28a8:	4f e7       	ldi	r20, 0x7F	; 127
    28aa:	57 e4       	ldi	r21, 0x47	; 71
    28ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b0:	18 16       	cp	r1, r24
    28b2:	4c f5       	brge	.+82     	; 0x2906 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b4:	6d a9       	ldd	r22, Y+53	; 0x35
    28b6:	7e a9       	ldd	r23, Y+54	; 0x36
    28b8:	8f a9       	ldd	r24, Y+55	; 0x37
    28ba:	98 ad       	ldd	r25, Y+56	; 0x38
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e2       	ldi	r20, 0x20	; 32
    28c2:	51 e4       	ldi	r21, 0x41	; 65
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	bc 01       	movw	r22, r24
    28ce:	cd 01       	movw	r24, r26
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	98 ab       	std	Y+48, r25	; 0x30
    28da:	8f a7       	std	Y+47, r24	; 0x2f
    28dc:	0f c0       	rjmp	.+30     	; 0x28fc <LCD_sendCommand+0xd2>
    28de:	88 ec       	ldi	r24, 0xC8	; 200
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	9e a7       	std	Y+46, r25	; 0x2e
    28e4:	8d a7       	std	Y+45, r24	; 0x2d
    28e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    28e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <LCD_sendCommand+0xc0>
    28ee:	9e a7       	std	Y+46, r25	; 0x2e
    28f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f4:	98 a9       	ldd	r25, Y+48	; 0x30
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	98 ab       	std	Y+48, r25	; 0x30
    28fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	69 f7       	brne	.-38     	; 0x28de <LCD_sendCommand+0xb4>
    2904:	14 c0       	rjmp	.+40     	; 0x292e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2906:	69 a9       	ldd	r22, Y+49	; 0x31
    2908:	7a a9       	ldd	r23, Y+50	; 0x32
    290a:	8b a9       	ldd	r24, Y+51	; 0x33
    290c:	9c a9       	ldd	r25, Y+52	; 0x34
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	98 ab       	std	Y+48, r25	; 0x30
    2918:	8f a7       	std	Y+47, r24	; 0x2f
    291a:	8f a5       	ldd	r24, Y+47	; 0x2f
    291c:	98 a9       	ldd	r25, Y+48	; 0x30
    291e:	9c a7       	std	Y+44, r25	; 0x2c
    2920:	8b a7       	std	Y+43, r24	; 0x2b
    2922:	8b a5       	ldd	r24, Y+43	; 0x2b
    2924:	9c a5       	ldd	r25, Y+44	; 0x2c
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <LCD_sendCommand+0xfc>
    292a:	9c a7       	std	Y+44, r25	; 0x2c
    292c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Tas = 50ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	65 e0       	ldi	r22, 0x05	; 5
    2932:	41 e0       	ldi	r20, 0x01	; 1
    2934:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	a0 e8       	ldi	r26, 0x80	; 128
    293e:	bf e3       	ldi	r27, 0x3F	; 63
    2940:	8f a3       	std	Y+39, r24	; 0x27
    2942:	98 a7       	std	Y+40, r25	; 0x28
    2944:	a9 a7       	std	Y+41, r26	; 0x29
    2946:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2948:	6f a1       	ldd	r22, Y+39	; 0x27
    294a:	78 a5       	ldd	r23, Y+40	; 0x28
    294c:	89 a5       	ldd	r24, Y+41	; 0x29
    294e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	4a ef       	ldi	r20, 0xFA	; 250
    2956:	54 e4       	ldi	r21, 0x44	; 68
    2958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	8b a3       	std	Y+35, r24	; 0x23
    2962:	9c a3       	std	Y+36, r25	; 0x24
    2964:	ad a3       	std	Y+37, r26	; 0x25
    2966:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2968:	6b a1       	ldd	r22, Y+35	; 0x23
    296a:	7c a1       	ldd	r23, Y+36	; 0x24
    296c:	8d a1       	ldd	r24, Y+37	; 0x25
    296e:	9e a1       	ldd	r25, Y+38	; 0x26
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e8       	ldi	r20, 0x80	; 128
    2976:	5f e3       	ldi	r21, 0x3F	; 63
    2978:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    297c:	88 23       	and	r24, r24
    297e:	2c f4       	brge	.+10     	; 0x298a <LCD_sendCommand+0x160>
		__ticks = 1;
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	9a a3       	std	Y+34, r25	; 0x22
    2986:	89 a3       	std	Y+33, r24	; 0x21
    2988:	3f c0       	rjmp	.+126    	; 0x2a08 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    298a:	6b a1       	ldd	r22, Y+35	; 0x23
    298c:	7c a1       	ldd	r23, Y+36	; 0x24
    298e:	8d a1       	ldd	r24, Y+37	; 0x25
    2990:	9e a1       	ldd	r25, Y+38	; 0x26
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	3f ef       	ldi	r19, 0xFF	; 255
    2996:	4f e7       	ldi	r20, 0x7F	; 127
    2998:	57 e4       	ldi	r21, 0x47	; 71
    299a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    299e:	18 16       	cp	r1, r24
    29a0:	4c f5       	brge	.+82     	; 0x29f4 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a2:	6f a1       	ldd	r22, Y+39	; 0x27
    29a4:	78 a5       	ldd	r23, Y+40	; 0x28
    29a6:	89 a5       	ldd	r24, Y+41	; 0x29
    29a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e2       	ldi	r20, 0x20	; 32
    29b0:	51 e4       	ldi	r21, 0x41	; 65
    29b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	9a a3       	std	Y+34, r25	; 0x22
    29c8:	89 a3       	std	Y+33, r24	; 0x21
    29ca:	0f c0       	rjmp	.+30     	; 0x29ea <LCD_sendCommand+0x1c0>
    29cc:	88 ec       	ldi	r24, 0xC8	; 200
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	98 a3       	std	Y+32, r25	; 0x20
    29d2:	8f 8f       	std	Y+31, r24	; 0x1f
    29d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29d6:	98 a1       	ldd	r25, Y+32	; 0x20
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <LCD_sendCommand+0x1ae>
    29dc:	98 a3       	std	Y+32, r25	; 0x20
    29de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e0:	89 a1       	ldd	r24, Y+33	; 0x21
    29e2:	9a a1       	ldd	r25, Y+34	; 0x22
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	9a a3       	std	Y+34, r25	; 0x22
    29e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ea:	89 a1       	ldd	r24, Y+33	; 0x21
    29ec:	9a a1       	ldd	r25, Y+34	; 0x22
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	69 f7       	brne	.-38     	; 0x29cc <LCD_sendCommand+0x1a2>
    29f2:	14 c0       	rjmp	.+40     	; 0x2a1c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f4:	6b a1       	ldd	r22, Y+35	; 0x23
    29f6:	7c a1       	ldd	r23, Y+36	; 0x24
    29f8:	8d a1       	ldd	r24, Y+37	; 0x25
    29fa:	9e a1       	ldd	r25, Y+38	; 0x26
    29fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	9a a3       	std	Y+34, r25	; 0x22
    2a06:	89 a3       	std	Y+33, r24	; 0x21
    2a08:	89 a1       	ldd	r24, Y+33	; 0x21
    2a0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a0e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <LCD_sendCommand+0x1ea>
    2a18:	9e 8f       	std	Y+30, r25	; 0x1e
    2a1a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */

	#elif(LCD_DATA_BITS_MODE == 8)
		GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	69 ad       	ldd	r22, Y+57	; 0x39
    2a20:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <GPIO_writePort>
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	a0 e8       	ldi	r26, 0x80	; 128
    2a2a:	bf e3       	ldi	r27, 0x3F	; 63
    2a2c:	89 8f       	std	Y+25, r24	; 0x19
    2a2e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a30:	ab 8f       	std	Y+27, r26	; 0x1b
    2a32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a34:	69 8d       	ldd	r22, Y+25	; 0x19
    2a36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	4a ef       	ldi	r20, 0xFA	; 250
    2a42:	54 e4       	ldi	r21, 0x44	; 68
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	8d 8b       	std	Y+21, r24	; 0x15
    2a4e:	9e 8b       	std	Y+22, r25	; 0x16
    2a50:	af 8b       	std	Y+23, r26	; 0x17
    2a52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a54:	6d 89       	ldd	r22, Y+21	; 0x15
    2a56:	7e 89       	ldd	r23, Y+22	; 0x16
    2a58:	8f 89       	ldd	r24, Y+23	; 0x17
    2a5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e8       	ldi	r20, 0x80	; 128
    2a62:	5f e3       	ldi	r21, 0x3F	; 63
    2a64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a68:	88 23       	and	r24, r24
    2a6a:	2c f4       	brge	.+10     	; 0x2a76 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	9c 8b       	std	Y+20, r25	; 0x14
    2a72:	8b 8b       	std	Y+19, r24	; 0x13
    2a74:	3f c0       	rjmp	.+126    	; 0x2af4 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2a76:	6d 89       	ldd	r22, Y+21	; 0x15
    2a78:	7e 89       	ldd	r23, Y+22	; 0x16
    2a7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	3f ef       	ldi	r19, 0xFF	; 255
    2a82:	4f e7       	ldi	r20, 0x7F	; 127
    2a84:	57 e4       	ldi	r21, 0x47	; 71
    2a86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a8a:	18 16       	cp	r1, r24
    2a8c:	4c f5       	brge	.+82     	; 0x2ae0 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e2       	ldi	r20, 0x20	; 32
    2a9c:	51 e4       	ldi	r21, 0x41	; 65
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	9c 8b       	std	Y+20, r25	; 0x14
    2ab4:	8b 8b       	std	Y+19, r24	; 0x13
    2ab6:	0f c0       	rjmp	.+30     	; 0x2ad6 <LCD_sendCommand+0x2ac>
    2ab8:	88 ec       	ldi	r24, 0xC8	; 200
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9a 8b       	std	Y+18, r25	; 0x12
    2abe:	89 8b       	std	Y+17, r24	; 0x11
    2ac0:	89 89       	ldd	r24, Y+17	; 0x11
    2ac2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <LCD_sendCommand+0x29a>
    2ac8:	9a 8b       	std	Y+18, r25	; 0x12
    2aca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2acc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ace:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	9c 8b       	std	Y+20, r25	; 0x14
    2ad4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	69 f7       	brne	.-38     	; 0x2ab8 <LCD_sendCommand+0x28e>
    2ade:	14 c0       	rjmp	.+40     	; 0x2b08 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	9c 8b       	std	Y+20, r25	; 0x14
    2af2:	8b 8b       	std	Y+19, r24	; 0x13
    2af4:	8b 89       	ldd	r24, Y+19	; 0x13
    2af6:	9c 89       	ldd	r25, Y+20	; 0x14
    2af8:	98 8b       	std	Y+16, r25	; 0x10
    2afa:	8f 87       	std	Y+15, r24	; 0x0f
    2afc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2afe:	98 89       	ldd	r25, Y+16	; 0x10
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	f1 f7       	brne	.-4      	; 0x2b00 <LCD_sendCommand+0x2d6>
    2b04:	98 8b       	std	Y+16, r25	; 0x10
    2b06:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	65 e0       	ldi	r22, 0x05	; 5
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	a0 e8       	ldi	r26, 0x80	; 128
    2b18:	bf e3       	ldi	r27, 0x3F	; 63
    2b1a:	8b 87       	std	Y+11, r24	; 0x0b
    2b1c:	9c 87       	std	Y+12, r25	; 0x0c
    2b1e:	ad 87       	std	Y+13, r26	; 0x0d
    2b20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	4a ef       	ldi	r20, 0xFA	; 250
    2b30:	54 e4       	ldi	r21, 0x44	; 68
    2b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	8f 83       	std	Y+7, r24	; 0x07
    2b3c:	98 87       	std	Y+8, r25	; 0x08
    2b3e:	a9 87       	std	Y+9, r26	; 0x09
    2b40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b42:	6f 81       	ldd	r22, Y+7	; 0x07
    2b44:	78 85       	ldd	r23, Y+8	; 0x08
    2b46:	89 85       	ldd	r24, Y+9	; 0x09
    2b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e8       	ldi	r20, 0x80	; 128
    2b50:	5f e3       	ldi	r21, 0x3F	; 63
    2b52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b56:	88 23       	and	r24, r24
    2b58:	2c f4       	brge	.+10     	; 0x2b64 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9e 83       	std	Y+6, r25	; 0x06
    2b60:	8d 83       	std	Y+5, r24	; 0x05
    2b62:	3f c0       	rjmp	.+126    	; 0x2be2 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2b64:	6f 81       	ldd	r22, Y+7	; 0x07
    2b66:	78 85       	ldd	r23, Y+8	; 0x08
    2b68:	89 85       	ldd	r24, Y+9	; 0x09
    2b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	3f ef       	ldi	r19, 0xFF	; 255
    2b70:	4f e7       	ldi	r20, 0x7F	; 127
    2b72:	57 e4       	ldi	r21, 0x47	; 71
    2b74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b78:	18 16       	cp	r1, r24
    2b7a:	4c f5       	brge	.+82     	; 0x2bce <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e2       	ldi	r20, 0x20	; 32
    2b8a:	51 e4       	ldi	r21, 0x41	; 65
    2b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	bc 01       	movw	r22, r24
    2b96:	cd 01       	movw	r24, r26
    2b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9e 83       	std	Y+6, r25	; 0x06
    2ba2:	8d 83       	std	Y+5, r24	; 0x05
    2ba4:	0f c0       	rjmp	.+30     	; 0x2bc4 <LCD_sendCommand+0x39a>
    2ba6:	88 ec       	ldi	r24, 0xC8	; 200
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	9c 83       	std	Y+4, r25	; 0x04
    2bac:	8b 83       	std	Y+3, r24	; 0x03
    2bae:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <LCD_sendCommand+0x388>
    2bb6:	9c 83       	std	Y+4, r25	; 0x04
    2bb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bba:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	9e 83       	std	Y+6, r25	; 0x06
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	69 f7       	brne	.-38     	; 0x2ba6 <LCD_sendCommand+0x37c>
    2bcc:	14 c0       	rjmp	.+40     	; 0x2bf6 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bce:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd0:	78 85       	ldd	r23, Y+8	; 0x08
    2bd2:	89 85       	ldd	r24, Y+9	; 0x09
    2bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9e 83       	std	Y+6, r25	; 0x06
    2be0:	8d 83       	std	Y+5, r24	; 0x05
    2be2:	8d 81       	ldd	r24, Y+5	; 0x05
    2be4:	9e 81       	ldd	r25, Y+6	; 0x06
    2be6:	9a 83       	std	Y+2, r25	; 0x02
    2be8:	89 83       	std	Y+1, r24	; 0x01
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	9a 81       	ldd	r25, Y+2	; 0x02
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <LCD_sendCommand+0x3c4>
    2bf2:	9a 83       	std	Y+2, r25	; 0x02
    2bf4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif

}
    2bf6:	e9 96       	adiw	r28, 0x39	; 57
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <LCD_displayCharacter>:
 * Description
 * display char in the lcd
 *
 */
void LCD_displayCharacter(uint8 data)
{
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	e9 97       	sbiw	r28, 0x39	; 57
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	66 e0       	ldi	r22, 0x06	; 6
    2c22:	41 e0       	ldi	r20, 0x01	; 1
    2c24:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a0 e8       	ldi	r26, 0x80	; 128
    2c2e:	bf e3       	ldi	r27, 0x3F	; 63
    2c30:	8d ab       	std	Y+53, r24	; 0x35
    2c32:	9e ab       	std	Y+54, r25	; 0x36
    2c34:	af ab       	std	Y+55, r26	; 0x37
    2c36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	6d a9       	ldd	r22, Y+53	; 0x35
    2c3a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c3c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c3e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	4a ef       	ldi	r20, 0xFA	; 250
    2c46:	54 e4       	ldi	r21, 0x44	; 68
    2c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	89 ab       	std	Y+49, r24	; 0x31
    2c52:	9a ab       	std	Y+50, r25	; 0x32
    2c54:	ab ab       	std	Y+51, r26	; 0x33
    2c56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c58:	69 a9       	ldd	r22, Y+49	; 0x31
    2c5a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c5c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c5e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e8       	ldi	r20, 0x80	; 128
    2c66:	5f e3       	ldi	r21, 0x3F	; 63
    2c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c6c:	88 23       	and	r24, r24
    2c6e:	2c f4       	brge	.+10     	; 0x2c7a <LCD_displayCharacter+0x72>
		__ticks = 1;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	98 ab       	std	Y+48, r25	; 0x30
    2c76:	8f a7       	std	Y+47, r24	; 0x2f
    2c78:	3f c0       	rjmp	.+126    	; 0x2cf8 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2c7a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c7c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c7e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c80:	9c a9       	ldd	r25, Y+52	; 0x34
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	3f ef       	ldi	r19, 0xFF	; 255
    2c86:	4f e7       	ldi	r20, 0x7F	; 127
    2c88:	57 e4       	ldi	r21, 0x47	; 71
    2c8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c8e:	18 16       	cp	r1, r24
    2c90:	4c f5       	brge	.+82     	; 0x2ce4 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c92:	6d a9       	ldd	r22, Y+53	; 0x35
    2c94:	7e a9       	ldd	r23, Y+54	; 0x36
    2c96:	8f a9       	ldd	r24, Y+55	; 0x37
    2c98:	98 ad       	ldd	r25, Y+56	; 0x38
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e2       	ldi	r20, 0x20	; 32
    2ca0:	51 e4       	ldi	r21, 0x41	; 65
    2ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	bc 01       	movw	r22, r24
    2cac:	cd 01       	movw	r24, r26
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	98 ab       	std	Y+48, r25	; 0x30
    2cb8:	8f a7       	std	Y+47, r24	; 0x2f
    2cba:	0f c0       	rjmp	.+30     	; 0x2cda <LCD_displayCharacter+0xd2>
    2cbc:	88 ec       	ldi	r24, 0xC8	; 200
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	9e a7       	std	Y+46, r25	; 0x2e
    2cc2:	8d a7       	std	Y+45, r24	; 0x2d
    2cc4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cc6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	f1 f7       	brne	.-4      	; 0x2cc8 <LCD_displayCharacter+0xc0>
    2ccc:	9e a7       	std	Y+46, r25	; 0x2e
    2cce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cd2:	98 a9       	ldd	r25, Y+48	; 0x30
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	98 ab       	std	Y+48, r25	; 0x30
    2cd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cda:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cdc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	69 f7       	brne	.-38     	; 0x2cbc <LCD_displayCharacter+0xb4>
    2ce2:	14 c0       	rjmp	.+40     	; 0x2d0c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ce6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ce8:	8b a9       	ldd	r24, Y+51	; 0x33
    2cea:	9c a9       	ldd	r25, Y+52	; 0x34
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	98 ab       	std	Y+48, r25	; 0x30
    2cf6:	8f a7       	std	Y+47, r24	; 0x2f
    2cf8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cfa:	98 a9       	ldd	r25, Y+48	; 0x30
    2cfc:	9c a7       	std	Y+44, r25	; 0x2c
    2cfe:	8b a7       	std	Y+43, r24	; 0x2b
    2d00:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d02:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <LCD_displayCharacter+0xfc>
    2d08:	9c a7       	std	Y+44, r25	; 0x2c
    2d0a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Tas = 50ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	65 e0       	ldi	r22, 0x05	; 5
    2d10:	41 e0       	ldi	r20, 0x01	; 1
    2d12:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	a0 e8       	ldi	r26, 0x80	; 128
    2d1c:	bf e3       	ldi	r27, 0x3F	; 63
    2d1e:	8f a3       	std	Y+39, r24	; 0x27
    2d20:	98 a7       	std	Y+40, r25	; 0x28
    2d22:	a9 a7       	std	Y+41, r26	; 0x29
    2d24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d26:	6f a1       	ldd	r22, Y+39	; 0x27
    2d28:	78 a5       	ldd	r23, Y+40	; 0x28
    2d2a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	4a ef       	ldi	r20, 0xFA	; 250
    2d34:	54 e4       	ldi	r21, 0x44	; 68
    2d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	8b a3       	std	Y+35, r24	; 0x23
    2d40:	9c a3       	std	Y+36, r25	; 0x24
    2d42:	ad a3       	std	Y+37, r26	; 0x25
    2d44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d46:	6b a1       	ldd	r22, Y+35	; 0x23
    2d48:	7c a1       	ldd	r23, Y+36	; 0x24
    2d4a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d4c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e8       	ldi	r20, 0x80	; 128
    2d54:	5f e3       	ldi	r21, 0x3F	; 63
    2d56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d5a:	88 23       	and	r24, r24
    2d5c:	2c f4       	brge	.+10     	; 0x2d68 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	9a a3       	std	Y+34, r25	; 0x22
    2d64:	89 a3       	std	Y+33, r24	; 0x21
    2d66:	3f c0       	rjmp	.+126    	; 0x2de6 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2d68:	6b a1       	ldd	r22, Y+35	; 0x23
    2d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	3f ef       	ldi	r19, 0xFF	; 255
    2d74:	4f e7       	ldi	r20, 0x7F	; 127
    2d76:	57 e4       	ldi	r21, 0x47	; 71
    2d78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d7c:	18 16       	cp	r1, r24
    2d7e:	4c f5       	brge	.+82     	; 0x2dd2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d80:	6f a1       	ldd	r22, Y+39	; 0x27
    2d82:	78 a5       	ldd	r23, Y+40	; 0x28
    2d84:	89 a5       	ldd	r24, Y+41	; 0x29
    2d86:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	40 e2       	ldi	r20, 0x20	; 32
    2d8e:	51 e4       	ldi	r21, 0x41	; 65
    2d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	bc 01       	movw	r22, r24
    2d9a:	cd 01       	movw	r24, r26
    2d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	9a a3       	std	Y+34, r25	; 0x22
    2da6:	89 a3       	std	Y+33, r24	; 0x21
    2da8:	0f c0       	rjmp	.+30     	; 0x2dc8 <LCD_displayCharacter+0x1c0>
    2daa:	88 ec       	ldi	r24, 0xC8	; 200
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	98 a3       	std	Y+32, r25	; 0x20
    2db0:	8f 8f       	std	Y+31, r24	; 0x1f
    2db2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2db4:	98 a1       	ldd	r25, Y+32	; 0x20
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	f1 f7       	brne	.-4      	; 0x2db6 <LCD_displayCharacter+0x1ae>
    2dba:	98 a3       	std	Y+32, r25	; 0x20
    2dbc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dbe:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc0:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc2:	01 97       	sbiw	r24, 0x01	; 1
    2dc4:	9a a3       	std	Y+34, r25	; 0x22
    2dc6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dca:	9a a1       	ldd	r25, Y+34	; 0x22
    2dcc:	00 97       	sbiw	r24, 0x00	; 0
    2dce:	69 f7       	brne	.-38     	; 0x2daa <LCD_displayCharacter+0x1a2>
    2dd0:	14 c0       	rjmp	.+40     	; 0x2dfa <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd2:	6b a1       	ldd	r22, Y+35	; 0x23
    2dd4:	7c a1       	ldd	r23, Y+36	; 0x24
    2dd6:	8d a1       	ldd	r24, Y+37	; 0x25
    2dd8:	9e a1       	ldd	r25, Y+38	; 0x26
    2dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	9a a3       	std	Y+34, r25	; 0x22
    2de4:	89 a3       	std	Y+33, r24	; 0x21
    2de6:	89 a1       	ldd	r24, Y+33	; 0x21
    2de8:	9a a1       	ldd	r25, Y+34	; 0x22
    2dea:	9e 8f       	std	Y+30, r25	; 0x1e
    2dec:	8d 8f       	std	Y+29, r24	; 0x1d
    2dee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2df0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2df2:	01 97       	sbiw	r24, 0x01	; 1
    2df4:	f1 f7       	brne	.-4      	; 0x2df2 <LCD_displayCharacter+0x1ea>
    2df6:	9e 8f       	std	Y+30, r25	; 0x1e
    2df8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */

	#elif(LCD_DATA_BITS_MODE == 8)
		GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	69 ad       	ldd	r22, Y+57	; 0x39
    2dfe:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <GPIO_writePort>
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	a0 e8       	ldi	r26, 0x80	; 128
    2e08:	bf e3       	ldi	r27, 0x3F	; 63
    2e0a:	89 8f       	std	Y+25, r24	; 0x19
    2e0c:	9a 8f       	std	Y+26, r25	; 0x1a
    2e0e:	ab 8f       	std	Y+27, r26	; 0x1b
    2e10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e12:	69 8d       	ldd	r22, Y+25	; 0x19
    2e14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	4a ef       	ldi	r20, 0xFA	; 250
    2e20:	54 e4       	ldi	r21, 0x44	; 68
    2e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	8d 8b       	std	Y+21, r24	; 0x15
    2e2c:	9e 8b       	std	Y+22, r25	; 0x16
    2e2e:	af 8b       	std	Y+23, r26	; 0x17
    2e30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e32:	6d 89       	ldd	r22, Y+21	; 0x15
    2e34:	7e 89       	ldd	r23, Y+22	; 0x16
    2e36:	8f 89       	ldd	r24, Y+23	; 0x17
    2e38:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e8       	ldi	r20, 0x80	; 128
    2e40:	5f e3       	ldi	r21, 0x3F	; 63
    2e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e46:	88 23       	and	r24, r24
    2e48:	2c f4       	brge	.+10     	; 0x2e54 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9c 8b       	std	Y+20, r25	; 0x14
    2e50:	8b 8b       	std	Y+19, r24	; 0x13
    2e52:	3f c0       	rjmp	.+126    	; 0x2ed2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2e54:	6d 89       	ldd	r22, Y+21	; 0x15
    2e56:	7e 89       	ldd	r23, Y+22	; 0x16
    2e58:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	3f ef       	ldi	r19, 0xFF	; 255
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	57 e4       	ldi	r21, 0x47	; 71
    2e64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e68:	18 16       	cp	r1, r24
    2e6a:	4c f5       	brge	.+82     	; 0x2ebe <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e2       	ldi	r20, 0x20	; 32
    2e7a:	51 e4       	ldi	r21, 0x41	; 65
    2e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9c 8b       	std	Y+20, r25	; 0x14
    2e92:	8b 8b       	std	Y+19, r24	; 0x13
    2e94:	0f c0       	rjmp	.+30     	; 0x2eb4 <LCD_displayCharacter+0x2ac>
    2e96:	88 ec       	ldi	r24, 0xC8	; 200
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	9a 8b       	std	Y+18, r25	; 0x12
    2e9c:	89 8b       	std	Y+17, r24	; 0x11
    2e9e:	89 89       	ldd	r24, Y+17	; 0x11
    2ea0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	f1 f7       	brne	.-4      	; 0x2ea2 <LCD_displayCharacter+0x29a>
    2ea6:	9a 8b       	std	Y+18, r25	; 0x12
    2ea8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eaa:	8b 89       	ldd	r24, Y+19	; 0x13
    2eac:	9c 89       	ldd	r25, Y+20	; 0x14
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	9c 8b       	std	Y+20, r25	; 0x14
    2eb2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	69 f7       	brne	.-38     	; 0x2e96 <LCD_displayCharacter+0x28e>
    2ebc:	14 c0       	rjmp	.+40     	; 0x2ee6 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	9c 8b       	std	Y+20, r25	; 0x14
    2ed0:	8b 8b       	std	Y+19, r24	; 0x13
    2ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed6:	98 8b       	std	Y+16, r25	; 0x10
    2ed8:	8f 87       	std	Y+15, r24	; 0x0f
    2eda:	8f 85       	ldd	r24, Y+15	; 0x0f
    2edc:	98 89       	ldd	r25, Y+16	; 0x10
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	f1 f7       	brne	.-4      	; 0x2ede <LCD_displayCharacter+0x2d6>
    2ee2:	98 8b       	std	Y+16, r25	; 0x10
    2ee4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	65 e0       	ldi	r22, 0x05	; 5
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePin>
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	a0 e8       	ldi	r26, 0x80	; 128
    2ef6:	bf e3       	ldi	r27, 0x3F	; 63
    2ef8:	8b 87       	std	Y+11, r24	; 0x0b
    2efa:	9c 87       	std	Y+12, r25	; 0x0c
    2efc:	ad 87       	std	Y+13, r26	; 0x0d
    2efe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	4a ef       	ldi	r20, 0xFA	; 250
    2f0e:	54 e4       	ldi	r21, 0x44	; 68
    2f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	8f 83       	std	Y+7, r24	; 0x07
    2f1a:	98 87       	std	Y+8, r25	; 0x08
    2f1c:	a9 87       	std	Y+9, r26	; 0x09
    2f1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f20:	6f 81       	ldd	r22, Y+7	; 0x07
    2f22:	78 85       	ldd	r23, Y+8	; 0x08
    2f24:	89 85       	ldd	r24, Y+9	; 0x09
    2f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e8       	ldi	r20, 0x80	; 128
    2f2e:	5f e3       	ldi	r21, 0x3F	; 63
    2f30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f34:	88 23       	and	r24, r24
    2f36:	2c f4       	brge	.+10     	; 0x2f42 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	9e 83       	std	Y+6, r25	; 0x06
    2f3e:	8d 83       	std	Y+5, r24	; 0x05
    2f40:	3f c0       	rjmp	.+126    	; 0x2fc0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2f42:	6f 81       	ldd	r22, Y+7	; 0x07
    2f44:	78 85       	ldd	r23, Y+8	; 0x08
    2f46:	89 85       	ldd	r24, Y+9	; 0x09
    2f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	3f ef       	ldi	r19, 0xFF	; 255
    2f4e:	4f e7       	ldi	r20, 0x7F	; 127
    2f50:	57 e4       	ldi	r21, 0x47	; 71
    2f52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f56:	18 16       	cp	r1, r24
    2f58:	4c f5       	brge	.+82     	; 0x2fac <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e2       	ldi	r20, 0x20	; 32
    2f68:	51 e4       	ldi	r21, 0x41	; 65
    2f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	bc 01       	movw	r22, r24
    2f74:	cd 01       	movw	r24, r26
    2f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	9e 83       	std	Y+6, r25	; 0x06
    2f80:	8d 83       	std	Y+5, r24	; 0x05
    2f82:	0f c0       	rjmp	.+30     	; 0x2fa2 <LCD_displayCharacter+0x39a>
    2f84:	88 ec       	ldi	r24, 0xC8	; 200
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	9c 83       	std	Y+4, r25	; 0x04
    2f8a:	8b 83       	std	Y+3, r24	; 0x03
    2f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <LCD_displayCharacter+0x388>
    2f94:	9c 83       	std	Y+4, r25	; 0x04
    2f96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f98:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	9e 83       	std	Y+6, r25	; 0x06
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	69 f7       	brne	.-38     	; 0x2f84 <LCD_displayCharacter+0x37c>
    2faa:	14 c0       	rjmp	.+40     	; 0x2fd4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fac:	6f 81       	ldd	r22, Y+7	; 0x07
    2fae:	78 85       	ldd	r23, Y+8	; 0x08
    2fb0:	89 85       	ldd	r24, Y+9	; 0x09
    2fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	8d 83       	std	Y+5, r24	; 0x05
    2fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc4:	9a 83       	std	Y+2, r25	; 0x02
    2fc6:	89 83       	std	Y+1, r24	; 0x01
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	9a 81       	ldd	r25, Y+2	; 0x02
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	f1 f7       	brne	.-4      	; 0x2fcc <LCD_displayCharacter+0x3c4>
    2fd0:	9a 83       	std	Y+2, r25	; 0x02
    2fd2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif
}
    2fd4:	e9 96       	adiw	r28, 0x39	; 57
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	08 95       	ret

00002fe6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
 {
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <LCD_displayString+0x6>
    2fec:	0f 92       	push	r0
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	9b 83       	std	Y+3, r25	; 0x03
    2ff4:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    2ff6:	19 82       	std	Y+1, r1	; 0x01
    2ff8:	0e c0       	rjmp	.+28     	; 0x3016 <LCD_displayString+0x30>
			while(Str[i] != '\0')
			{
				LCD_displayCharacter(Str[i]);
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	28 2f       	mov	r18, r24
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	8a 81       	ldd	r24, Y+2	; 0x02
    3002:	9b 81       	ldd	r25, Y+3	; 0x03
    3004:	fc 01       	movw	r30, r24
    3006:	e2 0f       	add	r30, r18
    3008:	f3 1f       	adc	r31, r19
    300a:	80 81       	ld	r24, Z
    300c:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_displayCharacter>
				i++;
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	8f 5f       	subi	r24, 0xFF	; 255
    3014:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const char *Str)
 {

	uint8 i = 0;
			while(Str[i] != '\0')
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	8a 81       	ldd	r24, Y+2	; 0x02
    301e:	9b 81       	ldd	r25, Y+3	; 0x03
    3020:	fc 01       	movw	r30, r24
    3022:	e2 0f       	add	r30, r18
    3024:	f3 1f       	adc	r31, r19
    3026:	80 81       	ld	r24, Z
    3028:	88 23       	and	r24, r24
    302a:	39 f7       	brne	.-50     	; 0x2ffa <LCD_displayString+0x14>
				LCD_displayCharacter(*Str);
				Str++;
			}
			*********************************************************/

 }
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	08 95       	ret

00003038 <LCD_moveCursor>:
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */

void LCD_moveCursor(uint8 row,uint8 col)
{
    3038:	df 93       	push	r29
    303a:	cf 93       	push	r28
    303c:	00 d0       	rcall	.+0      	; 0x303e <LCD_moveCursor+0x6>
    303e:	00 d0       	rcall	.+0      	; 0x3040 <LCD_moveCursor+0x8>
    3040:	0f 92       	push	r0
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	8a 83       	std	Y+2, r24	; 0x02
    3048:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch (row)
    304a:	8a 81       	ldd	r24, Y+2	; 0x02
    304c:	28 2f       	mov	r18, r24
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	3d 83       	std	Y+5, r19	; 0x05
    3052:	2c 83       	std	Y+4, r18	; 0x04
    3054:	8c 81       	ldd	r24, Y+4	; 0x04
    3056:	9d 81       	ldd	r25, Y+5	; 0x05
    3058:	81 30       	cpi	r24, 0x01	; 1
    305a:	91 05       	cpc	r25, r1
    305c:	c1 f0       	breq	.+48     	; 0x308e <LCD_moveCursor+0x56>
    305e:	2c 81       	ldd	r18, Y+4	; 0x04
    3060:	3d 81       	ldd	r19, Y+5	; 0x05
    3062:	22 30       	cpi	r18, 0x02	; 2
    3064:	31 05       	cpc	r19, r1
    3066:	2c f4       	brge	.+10     	; 0x3072 <LCD_moveCursor+0x3a>
    3068:	8c 81       	ldd	r24, Y+4	; 0x04
    306a:	9d 81       	ldd	r25, Y+5	; 0x05
    306c:	00 97       	sbiw	r24, 0x00	; 0
    306e:	61 f0       	breq	.+24     	; 0x3088 <LCD_moveCursor+0x50>
    3070:	19 c0       	rjmp	.+50     	; 0x30a4 <LCD_moveCursor+0x6c>
    3072:	2c 81       	ldd	r18, Y+4	; 0x04
    3074:	3d 81       	ldd	r19, Y+5	; 0x05
    3076:	22 30       	cpi	r18, 0x02	; 2
    3078:	31 05       	cpc	r19, r1
    307a:	69 f0       	breq	.+26     	; 0x3096 <LCD_moveCursor+0x5e>
    307c:	8c 81       	ldd	r24, Y+4	; 0x04
    307e:	9d 81       	ldd	r25, Y+5	; 0x05
    3080:	83 30       	cpi	r24, 0x03	; 3
    3082:	91 05       	cpc	r25, r1
    3084:	61 f0       	breq	.+24     	; 0x309e <LCD_moveCursor+0x66>
    3086:	0e c0       	rjmp	.+28     	; 0x30a4 <LCD_moveCursor+0x6c>
	{
	case 0 :
		lcd_memory_address = col;
    3088:	8b 81       	ldd	r24, Y+3	; 0x03
    308a:	89 83       	std	Y+1, r24	; 0x01
    308c:	0b c0       	rjmp	.+22     	; 0x30a4 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = 0x40 +col;
    308e:	8b 81       	ldd	r24, Y+3	; 0x03
    3090:	80 5c       	subi	r24, 0xC0	; 192
    3092:	89 83       	std	Y+1, r24	; 0x01
    3094:	07 c0       	rjmp	.+14     	; 0x30a4 <LCD_moveCursor+0x6c>
		break;
	case 2 :
		lcd_memory_address = 0x10 +col;
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	80 5f       	subi	r24, 0xF0	; 240
    309a:	89 83       	std	Y+1, r24	; 0x01
    309c:	03 c0       	rjmp	.+6      	; 0x30a4 <LCD_moveCursor+0x6c>
		break;
	case 3 :
		lcd_memory_address = 0x50 +col;
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	80 5b       	subi	r24, 0xB0	; 176
    30a2:	89 83       	std	Y+1, r24	; 0x01
	 * you need to set the last of the address with one
	 * so or the address with 0x80 the result send it as command to LCD_sendCommand(command)
	 * command  = 0x80 | lcd_memory_address
	 * we defined LCD_SET_CURSOR_LOCATION  with      0x80
	 */
	LCD_sendCommand(lcd_memory_address| LCD_SET_CURSOR_LOCATION);
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	80 68       	ori	r24, 0x80	; 128
    30a8:	0e 94 15 14 	call	0x282a	; 0x282a <LCD_sendCommand>

}
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	08 95       	ret

000030bc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    30bc:	df 93       	push	r29
    30be:	cf 93       	push	r28
    30c0:	00 d0       	rcall	.+0      	; 0x30c2 <LCD_displayStringRowColumn+0x6>
    30c2:	00 d0       	rcall	.+0      	; 0x30c4 <LCD_displayStringRowColumn+0x8>
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
    30c8:	89 83       	std	Y+1, r24	; 0x01
    30ca:	6a 83       	std	Y+2, r22	; 0x02
    30cc:	5c 83       	std	Y+4, r21	; 0x04
    30ce:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);   /* go to to the required LCD position */
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
    30d2:	6a 81       	ldd	r22, Y+2	; 0x02
    30d4:	0e 94 1c 18 	call	0x3038	; 0x3038 <LCD_moveCursor>
	LCD_displayString(Str);
    30d8:	8b 81       	ldd	r24, Y+3	; 0x03
    30da:	9c 81       	ldd	r25, Y+4	; 0x04
    30dc:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
}
    30e0:	0f 90       	pop	r0
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	cf 91       	pop	r28
    30ea:	df 91       	pop	r29
    30ec:	08 95       	ret

000030ee <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
    30f6:	62 97       	sbiw	r28, 0x12	; 18
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
    3102:	9a 8b       	std	Y+18, r25	; 0x12
    3104:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3106:	89 89       	ldd	r24, Y+17	; 0x11
    3108:	9a 89       	ldd	r25, Y+18	; 0x12
    310a:	9e 01       	movw	r18, r28
    310c:	2f 5f       	subi	r18, 0xFF	; 255
    310e:	3f 4f       	sbci	r19, 0xFF	; 255
    3110:	b9 01       	movw	r22, r18
    3112:	4a e0       	ldi	r20, 0x0A	; 10
    3114:	50 e0       	ldi	r21, 0x00	; 0
    3116:	0e 94 18 1c 	call	0x3830	; 0x3830 <itoa>
   LCD_displayString(buff); /* Display the string */
    311a:	ce 01       	movw	r24, r28
    311c:	01 96       	adiw	r24, 0x01	; 1
    311e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_displayString>
}
    3122:	62 96       	adiw	r28, 0x12	; 18
    3124:	0f b6       	in	r0, 0x3f	; 63
    3126:	f8 94       	cli
    3128:	de bf       	out	0x3e, r29	; 62
    312a:	0f be       	out	0x3f, r0	; 63
    312c:	cd bf       	out	0x3d, r28	; 61
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret

00003134 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	0e 94 15 14 	call	0x282a	; 0x282a <LCD_sendCommand>
}
    3142:	cf 91       	pop	r28
    3144:	df 91       	pop	r29
    3146:	08 95       	ret

00003148 <PWM_Timer0_Start>:




void PWM_Timer0_Start(uint8 duty_cycle)
{
    3148:	0f 93       	push	r16
    314a:	1f 93       	push	r17
    314c:	df 93       	push	r29
    314e:	cf 93       	push	r28
    3150:	0f 92       	push	r0
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62
    3156:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; // Set Timer Initial Value to 0
    3158:	e2 e5       	ldi	r30, 0x52	; 82
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	10 82       	st	Z, r1

	OCR0  = (duty_cycle)*2.55; // Set Compare Value (the duty cycle multiple *2.55)
    315e:	0c e5       	ldi	r16, 0x5C	; 92
    3160:	10 e0       	ldi	r17, 0x00	; 0
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	88 2f       	mov	r24, r24
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	aa 27       	eor	r26, r26
    316a:	97 fd       	sbrc	r25, 7
    316c:	a0 95       	com	r26
    316e:	ba 2f       	mov	r27, r26
    3170:	bc 01       	movw	r22, r24
    3172:	cd 01       	movw	r24, r26
    3174:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	bc 01       	movw	r22, r24
    317e:	cd 01       	movw	r24, r26
    3180:	23 e3       	ldi	r18, 0x33	; 51
    3182:	33 e3       	ldi	r19, 0x33	; 51
    3184:	43 e2       	ldi	r20, 0x23	; 35
    3186:	50 e4       	ldi	r21, 0x40	; 64
    3188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	bc 01       	movw	r22, r24
    3192:	cd 01       	movw	r24, r26
    3194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	f8 01       	movw	r30, r16
    319e:	80 83       	st	Z, r24

    /* Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC*/

	GPIO_setupPinDirection(PWM_TIMER0_PORT_ID,PWM_TIMER0_PIN_ID , PIN_OUTPUT);
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	63 e0       	ldi	r22, 0x03	; 3
    31a4:	41 e0       	ldi	r20, 0x01	; 1
    31a6:	0e 94 3b 10 	call	0x2076	; 0x2076 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    31aa:	e3 e5       	ldi	r30, 0x53	; 83
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	8a e6       	ldi	r24, 0x6A	; 106
    31b0:	80 83       	st	Z, r24
}
    31b2:	0f 90       	pop	r0
    31b4:	cf 91       	pop	r28
    31b6:	df 91       	pop	r29
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	08 95       	ret

000031be <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    31be:	1f 92       	push	r1
    31c0:	0f 92       	push	r0
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	0f 92       	push	r0
    31c6:	11 24       	eor	r1, r1
    31c8:	2f 93       	push	r18
    31ca:	3f 93       	push	r19
    31cc:	4f 93       	push	r20
    31ce:	5f 93       	push	r21
    31d0:	6f 93       	push	r22
    31d2:	7f 93       	push	r23
    31d4:	8f 93       	push	r24
    31d6:	9f 93       	push	r25
    31d8:	af 93       	push	r26
    31da:	bf 93       	push	r27
    31dc:	ef 93       	push	r30
    31de:	ff 93       	push	r31
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    31e8:	80 91 21 02 	lds	r24, 0x0221
    31ec:	90 91 22 02 	lds	r25, 0x0222
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	29 f0       	breq	.+10     	; 0x31fe <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    31f4:	e0 91 21 02 	lds	r30, 0x0221
    31f8:	f0 91 22 02 	lds	r31, 0x0222
    31fc:	09 95       	icall
	}
}
    31fe:	cf 91       	pop	r28
    3200:	df 91       	pop	r29
    3202:	ff 91       	pop	r31
    3204:	ef 91       	pop	r30
    3206:	bf 91       	pop	r27
    3208:	af 91       	pop	r26
    320a:	9f 91       	pop	r25
    320c:	8f 91       	pop	r24
    320e:	7f 91       	pop	r23
    3210:	6f 91       	pop	r22
    3212:	5f 91       	pop	r21
    3214:	4f 91       	pop	r20
    3216:	3f 91       	pop	r19
    3218:	2f 91       	pop	r18
    321a:	0f 90       	pop	r0
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	0f 90       	pop	r0
    3220:	1f 90       	pop	r1
    3222:	18 95       	reti

00003224 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3224:	1f 92       	push	r1
    3226:	0f 92       	push	r0
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	0f 92       	push	r0
    322c:	11 24       	eor	r1, r1
    322e:	2f 93       	push	r18
    3230:	3f 93       	push	r19
    3232:	4f 93       	push	r20
    3234:	5f 93       	push	r21
    3236:	6f 93       	push	r22
    3238:	7f 93       	push	r23
    323a:	8f 93       	push	r24
    323c:	9f 93       	push	r25
    323e:	af 93       	push	r26
    3240:	bf 93       	push	r27
    3242:	ef 93       	push	r30
    3244:	ff 93       	push	r31
    3246:	df 93       	push	r29
    3248:	cf 93       	push	r28
    324a:	cd b7       	in	r28, 0x3d	; 61
    324c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    324e:	80 91 21 02 	lds	r24, 0x0221
    3252:	90 91 22 02 	lds	r25, 0x0222
    3256:	00 97       	sbiw	r24, 0x00	; 0
    3258:	29 f0       	breq	.+10     	; 0x3264 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    325a:	e0 91 21 02 	lds	r30, 0x0221
    325e:	f0 91 22 02 	lds	r31, 0x0222
    3262:	09 95       	icall
	}
}
    3264:	cf 91       	pop	r28
    3266:	df 91       	pop	r29
    3268:	ff 91       	pop	r31
    326a:	ef 91       	pop	r30
    326c:	bf 91       	pop	r27
    326e:	af 91       	pop	r26
    3270:	9f 91       	pop	r25
    3272:	8f 91       	pop	r24
    3274:	7f 91       	pop	r23
    3276:	6f 91       	pop	r22
    3278:	5f 91       	pop	r21
    327a:	4f 91       	pop	r20
    327c:	3f 91       	pop	r19
    327e:	2f 91       	pop	r18
    3280:	0f 90       	pop	r0
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	0f 90       	pop	r0
    3286:	1f 90       	pop	r1
    3288:	18 95       	reti

0000328a <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    328a:	df 93       	push	r29
    328c:	cf 93       	push	r28
    328e:	00 d0       	rcall	.+0      	; 0x3290 <Timer1_init+0x6>
    3290:	cd b7       	in	r28, 0x3d	; 61
    3292:	de b7       	in	r29, 0x3e	; 62
    3294:	9a 83       	std	Y+2, r25	; 0x02
    3296:	89 83       	std	Y+1, r24	; 0x01

	// Set initial value
	TCNT1 = (Config_Ptr -> initial_value);
    3298:	ac e4       	ldi	r26, 0x4C	; 76
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	e9 81       	ldd	r30, Y+1	; 0x01
    329e:	fa 81       	ldd	r31, Y+2	; 0x02
    32a0:	80 81       	ld	r24, Z
    32a2:	91 81       	ldd	r25, Z+1	; 0x01
    32a4:	11 96       	adiw	r26, 0x01	; 1
    32a6:	9c 93       	st	X, r25
    32a8:	8e 93       	st	-X, r24


	if((Config_Ptr->mode)==COMPARE)
    32aa:	e9 81       	ldd	r30, Y+1	; 0x01
    32ac:	fa 81       	ldd	r31, Y+2	; 0x02
    32ae:	85 81       	ldd	r24, Z+5	; 0x05
    32b0:	88 30       	cpi	r24, 0x08	; 8
    32b2:	29 f5       	brne	.+74     	; 0x32fe <Timer1_init+0x74>
	{
		//choose CMP mode
		TCCR1B = (TCCR1B ) | (Config_Ptr -> mode);
    32b4:	ae e4       	ldi	r26, 0x4E	; 78
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	ee e4       	ldi	r30, 0x4E	; 78
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	90 81       	ld	r25, Z
    32be:	e9 81       	ldd	r30, Y+1	; 0x01
    32c0:	fa 81       	ldd	r31, Y+2	; 0x02
    32c2:	85 81       	ldd	r24, Z+5	; 0x05
    32c4:	89 2b       	or	r24, r25
    32c6:	8c 93       	st	X, r24
		//set compare value
		OCR1A = (Config_Ptr -> compare_value);
    32c8:	aa e4       	ldi	r26, 0x4A	; 74
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	e9 81       	ldd	r30, Y+1	; 0x01
    32ce:	fa 81       	ldd	r31, Y+2	; 0x02
    32d0:	82 81       	ldd	r24, Z+2	; 0x02
    32d2:	93 81       	ldd	r25, Z+3	; 0x03
    32d4:	11 96       	adiw	r26, 0x01	; 1
    32d6:	9c 93       	st	X, r25
    32d8:	8e 93       	st	-X, r24
		/*Force Output Compare for Compare unit A */
		TCCR1A = (1<<FOC1A);
    32da:	ef e4       	ldi	r30, 0x4F	; 79
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	88 e0       	ldi	r24, 0x08	; 8
    32e0:	80 83       	st	Z, r24
		// Set prescaler
		TCCR1B = (TCCR1B) | (Config_Ptr -> prescaler);
    32e2:	ae e4       	ldi	r26, 0x4E	; 78
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	ee e4       	ldi	r30, 0x4E	; 78
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	90 81       	ld	r25, Z
    32ec:	e9 81       	ldd	r30, Y+1	; 0x01
    32ee:	fa 81       	ldd	r31, Y+2	; 0x02
    32f0:	84 81       	ldd	r24, Z+4	; 0x04
    32f2:	89 2b       	or	r24, r25
    32f4:	8c 93       	st	X, r24


		// Enable compare interrupt
		TIMSK =  (1<<OCIE1A);
    32f6:	e9 e5       	ldi	r30, 0x59	; 89
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	80 e1       	ldi	r24, 0x10	; 16
    32fc:	80 83       	st	Z, r24

	}
	if ((Config_Ptr -> mode) == NORMAL)
    32fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3300:	fa 81       	ldd	r31, Y+2	; 0x02
    3302:	85 81       	ldd	r24, Z+5	; 0x05
    3304:	88 23       	and	r24, r24
    3306:	71 f4       	brne	.+28     	; 0x3324 <Timer1_init+0x9a>
	{


		// Set prescaler
		TCCR1B = (TCCR1B) | (Config_Ptr -> prescaler);
    3308:	ae e4       	ldi	r26, 0x4E	; 78
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	ee e4       	ldi	r30, 0x4E	; 78
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	90 81       	ld	r25, Z
    3312:	e9 81       	ldd	r30, Y+1	; 0x01
    3314:	fa 81       	ldd	r31, Y+2	; 0x02
    3316:	84 81       	ldd	r24, Z+4	; 0x04
    3318:	89 2b       	or	r24, r25
    331a:	8c 93       	st	X, r24
		// Enable overflow interrupt
		TIMSK = (1<<TOIE1);
    331c:	e9 e5       	ldi	r30, 0x59	; 89
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	84 e0       	ldi	r24, 0x04	; 4
    3322:	80 83       	st	Z, r24

	}



}
    3324:	0f 90       	pop	r0
    3326:	0f 90       	pop	r0
    3328:	cf 91       	pop	r28
    332a:	df 91       	pop	r29
    332c:	08 95       	ret

0000332e <Timer1_deInit>:

void Timer1_deInit(void)
{
    332e:	df 93       	push	r29
    3330:	cf 93       	push	r28
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
	TCCR1A =0 ;
    3336:	ef e4       	ldi	r30, 0x4F	; 79
    3338:	f0 e0       	ldi	r31, 0x00	; 0
    333a:	10 82       	st	Z, r1
	TCCR1B =0 ;
    333c:	ee e4       	ldi	r30, 0x4E	; 78
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	10 82       	st	Z, r1
	TCNT1 = 0 ;
    3342:	ec e4       	ldi	r30, 0x4C	; 76
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	11 82       	std	Z+1, r1	; 0x01
    3348:	10 82       	st	Z, r1
	OCR1A = 0 ;
    334a:	ea e4       	ldi	r30, 0x4A	; 74
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	11 82       	std	Z+1, r1	; 0x01
    3350:	10 82       	st	Z, r1
	TIMSK = 0 ;
    3352:	e9 e5       	ldi	r30, 0x59	; 89
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	10 82       	st	Z, r1
	//g_callBackPtr = NULL_PTR ;
}
    3358:	cf 91       	pop	r28
    335a:	df 91       	pop	r29
    335c:	08 95       	ret

0000335e <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    335e:	df 93       	push	r29
    3360:	cf 93       	push	r28
    3362:	00 d0       	rcall	.+0      	; 0x3364 <Timer1_setCallBack+0x6>
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
    3368:	9a 83       	std	Y+2, r25	; 0x02
    336a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	9a 81       	ldd	r25, Y+2	; 0x02
    3370:	90 93 22 02 	sts	0x0222, r25
    3374:	80 93 21 02 	sts	0x0221, r24


}
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	08 95       	ret

00003382 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	00 d0       	rcall	.+0      	; 0x338c <TWI_init+0xa>
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
    3390:	9a 83       	std	Y+2, r25	; 0x02
    3392:	89 83       	std	Y+1, r24	; 0x01

	 TWCR = (1<<TWEN); /* enable TWI */
    3394:	e6 e5       	ldi	r30, 0x56	; 86
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	84 e0       	ldi	r24, 0x04	; 4
    339a:	80 83       	st	Z, r24

	 /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */


	 TWSR = 0x00;
    339c:	e1 e2       	ldi	r30, 0x21	; 33
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	10 82       	st	Z, r1
	 /*
	  * TWPS should change based on the other factors
	  * we will assume here TWPS =0 , so 4 power 0 = 1
	  */
	 TWBR  = ((F_CPU /(Config_Ptr->bit_rate)) - 16) / (2 * 1);
    33a2:	00 e2       	ldi	r16, 0x20	; 32
    33a4:	10 e0       	ldi	r17, 0x00	; 0
    33a6:	e9 81       	ldd	r30, Y+1	; 0x01
    33a8:	fa 81       	ldd	r31, Y+2	; 0x02
    33aa:	81 81       	ldd	r24, Z+1	; 0x01
    33ac:	28 2f       	mov	r18, r24
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	40 e0       	ldi	r20, 0x00	; 0
    33b2:	50 e0       	ldi	r21, 0x00	; 0
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	92 e1       	ldi	r25, 0x12	; 18
    33b8:	aa e7       	ldi	r26, 0x7A	; 122
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	bc 01       	movw	r22, r24
    33be:	cd 01       	movw	r24, r26
    33c0:	0e 94 bf 1b 	call	0x377e	; 0x377e <__udivmodsi4>
    33c4:	da 01       	movw	r26, r20
    33c6:	c9 01       	movw	r24, r18
    33c8:	40 97       	sbiw	r24, 0x10	; 16
    33ca:	a1 09       	sbc	r26, r1
    33cc:	b1 09       	sbc	r27, r1
    33ce:	b6 95       	lsr	r27
    33d0:	a7 95       	ror	r26
    33d2:	97 95       	ror	r25
    33d4:	87 95       	ror	r24
    33d6:	f8 01       	movw	r30, r16
    33d8:	80 83       	st	Z, r24

	  /* Two Wire Bus address my address if any master device want to call me:with my address
	   *  (used in case this MC is a slave device) General Call Recognition: Off
	   */

	  TWAR = ((Config_Ptr-> address)<<1); // my address = 0x01 :)
    33da:	a2 e2       	ldi	r26, 0x22	; 34
    33dc:	b0 e0       	ldi	r27, 0x00	; 0
    33de:	e9 81       	ldd	r30, Y+1	; 0x01
    33e0:	fa 81       	ldd	r31, Y+2	; 0x02
    33e2:	80 81       	ld	r24, Z
    33e4:	88 0f       	add	r24, r24
    33e6:	8c 93       	st	X, r24
}
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	cf 91       	pop	r28
    33ee:	df 91       	pop	r29
    33f0:	1f 91       	pop	r17
    33f2:	0f 91       	pop	r16
    33f4:	08 95       	ret

000033f6 <TWI_start>:

void TWI_start(void)
{
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
	 * | (1 << TWINT) ----> دي بتمسح الفلاج احنا هنا بنمسحه واحنا داخلين عشان نمسح الفلاج بنحطه بواحد
	 * | (1 << TWEN) ---> enable twi module
	 * | (1 << TWSTA) ---> clear start bit at the start or end of the function
	 *
	 */
    TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT );
    33fe:	e6 e5       	ldi	r30, 0x56	; 86
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	84 ea       	ldi	r24, 0xA4	; 164
    3404:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));    //طول ما هو ب زيرو هو قاعد مستني اول مايبقي  ب 1 يبقي خلص بعت يخرج
    3406:	e6 e5       	ldi	r30, 0x56	; 86
    3408:	f0 e0       	ldi	r31, 0x00	; 0
    340a:	80 81       	ld	r24, Z
    340c:	88 23       	and	r24, r24
    340e:	dc f7       	brge	.-10     	; 0x3406 <TWI_start+0x10>
}
    3410:	cf 91       	pop	r28
    3412:	df 91       	pop	r29
    3414:	08 95       	ret

00003416 <TWI_stop>:


void TWI_stop(void)
{
    3416:	df 93       	push	r29
    3418:	cf 93       	push	r28
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 *  (using polling like in the start function)مالهاش لازمه انك تمسح الفلاج هنا زي في الستارت انت كده كده خلصت فملهاش معني
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    341e:	e6 e5       	ldi	r30, 0x56	; 86
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	84 e9       	ldi	r24, 0x94	; 148
    3424:	80 83       	st	Z, r24
}
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	08 95       	ret

0000342c <TWI_writeByte>:


void TWI_writeByte(uint8 data)
{
    342c:	df 93       	push	r29
    342e:	cf 93       	push	r28
    3430:	0f 92       	push	r0
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	89 83       	std	Y+1, r24	; 0x01
	 /* Put data On TWI data Register */
	  TWDR = data;
    3438:	e3 e2       	ldi	r30, 0x23	; 35
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	80 83       	st	Z, r24
	 /*
	  * Clear the TWINT flag before sending the data TWINT=1 (تمسح الفلاج قبل ما تدخل كل فانكشن زي ما قولنا )
	  * Enable TWI Module TWEN=1  (and enable the module)
	  */
	  TWCR = (1 << TWINT) | (1 << TWEN);
    3440:	e6 e5       	ldi	r30, 0x56	; 86
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	84 e8       	ldi	r24, 0x84	; 132
    3446:	80 83       	st	Z, r24
	 /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	  while(BIT_IS_CLEAR(TWCR,TWINT));
    3448:	e6 e5       	ldi	r30, 0x56	; 86
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	80 81       	ld	r24, Z
    344e:	88 23       	and	r24, r24
    3450:	dc f7       	brge	.-10     	; 0x3448 <TWI_writeByte+0x1c>
}
    3452:	0f 90       	pop	r0
    3454:	cf 91       	pop	r28
    3456:	df 91       	pop	r29
    3458:	08 95       	ret

0000345a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    3462:	e6 e5       	ldi	r30, 0x56	; 86
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	84 ec       	ldi	r24, 0xC4	; 196
    3468:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    346a:	e6 e5       	ldi	r30, 0x56	; 86
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	88 23       	and	r24, r24
    3472:	dc f7       	brge	.-10     	; 0x346a <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    3474:	e3 e2       	ldi	r30, 0x23	; 35
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
}
    347a:	cf 91       	pop	r28
    347c:	df 91       	pop	r29
    347e:	08 95       	ret

00003480 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    3480:	df 93       	push	r29
    3482:	cf 93       	push	r28
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 * الفرق بين دي والتانيه ان هنا مش بتعمل اينبل لل ااك
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    3488:	e6 e5       	ldi	r30, 0x56	; 86
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	84 e8       	ldi	r24, 0x84	; 132
    348e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3490:	e6 e5       	ldi	r30, 0x56	; 86
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	88 23       	and	r24, r24
    3498:	dc f7       	brge	.-10     	; 0x3490 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    349a:	e3 e2       	ldi	r30, 0x23	; 35
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	80 81       	ld	r24, Z
}
    34a0:	cf 91       	pop	r28
    34a2:	df 91       	pop	r29
    34a4:	08 95       	ret

000034a6 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    34a6:	df 93       	push	r29
    34a8:	cf 93       	push	r28
    34aa:	0f 92       	push	r0
    34ac:	cd b7       	in	r28, 0x3d	; 61
    34ae:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    34b0:	e1 e2       	ldi	r30, 0x21	; 33
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	80 81       	ld	r24, Z
    34b6:	88 7f       	andi	r24, 0xF8	; 248
    34b8:	89 83       	std	Y+1, r24	; 0x01
    return status;
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    34bc:	0f 90       	pop	r0
    34be:	cf 91       	pop	r28
    34c0:	df 91       	pop	r29
    34c2:	08 95       	ret

000034c4 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    34c4:	df 93       	push	r29
    34c6:	cf 93       	push	r28
    34c8:	00 d0       	rcall	.+0      	; 0x34ca <UART_init+0x6>
    34ca:	00 d0       	rcall	.+0      	; 0x34cc <UART_init+0x8>
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62
    34d0:	9c 83       	std	Y+4, r25	; 0x04
    34d2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    34d4:	1a 82       	std	Y+2, r1	; 0x02
    34d6:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    34d8:	eb e2       	ldi	r30, 0x2B	; 43
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	82 e0       	ldi	r24, 0x02	; 2
    34de:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 --> configured
	 * XB8 & TXB8 not used for 8-bit data mode
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
    34e0:	ea e2       	ldi	r30, 0x2A	; 42
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	88 e1       	ldi	r24, 0x18	; 24
    34e6:	80 83       	st	Z, r24
	/*
	 * to insert the bit number two in UCSRB with 0 or 1 based on  it's value
	 * performs a bitwise OR operation between the current value of UCSRB and the
	 *  result of the expression ((Config_Ptr -> bit_data) & (0x04))
	 */
	UCSRB = UCSRB | ((Config_Ptr -> bit_data) & (0x04));
    34e8:	aa e2       	ldi	r26, 0x2A	; 42
    34ea:	b0 e0       	ldi	r27, 0x00	; 0
    34ec:	ea e2       	ldi	r30, 0x2A	; 42
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	80 81       	ld	r24, Z
    34f2:	98 2f       	mov	r25, r24
    34f4:	eb 81       	ldd	r30, Y+3	; 0x03
    34f6:	fc 81       	ldd	r31, Y+4	; 0x04
    34f8:	80 81       	ld	r24, Z
    34fa:	84 70       	andi	r24, 0x04	; 4
    34fc:	89 2b       	or	r24, r25
    34fe:	8c 93       	st	X, r24
	 * Bit 5:4 – UPM1:0 --> (parity) configured
	 * Bit 3 – USBS --> (stop bit select) configured
	 * Bit 2:1 – UCSZ1:0 --> configured
	 * Bit 0 – UCPOL = 0 Used with the Synchronous operation only
	 */
	UCSRC =  ((Config_Ptr -> parity)<<4) | (1<<URSEL) | ((Config_Ptr -> stop_bit)<<3) ;
    3500:	a0 e4       	ldi	r26, 0x40	; 64
    3502:	b0 e0       	ldi	r27, 0x00	; 0
    3504:	eb 81       	ldd	r30, Y+3	; 0x03
    3506:	fc 81       	ldd	r31, Y+4	; 0x04
    3508:	81 81       	ldd	r24, Z+1	; 0x01
    350a:	88 2f       	mov	r24, r24
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	82 95       	swap	r24
    3510:	92 95       	swap	r25
    3512:	90 7f       	andi	r25, 0xF0	; 240
    3514:	98 27       	eor	r25, r24
    3516:	80 7f       	andi	r24, 0xF0	; 240
    3518:	98 27       	eor	r25, r24
    351a:	28 2f       	mov	r18, r24
    351c:	20 68       	ori	r18, 0x80	; 128
    351e:	eb 81       	ldd	r30, Y+3	; 0x03
    3520:	fc 81       	ldd	r31, Y+4	; 0x04
    3522:	82 81       	ldd	r24, Z+2	; 0x02
    3524:	88 2f       	mov	r24, r24
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	88 0f       	add	r24, r24
    352a:	99 1f       	adc	r25, r25
    352c:	88 0f       	add	r24, r24
    352e:	99 1f       	adc	r25, r25
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	82 2b       	or	r24, r18
    3536:	8c 93       	st	X, r24
	UCSRC =  UCSRC | ( (((Config_Ptr -> bit_data) & 0x03) <<1) );
    3538:	a0 e4       	ldi	r26, 0x40	; 64
    353a:	b0 e0       	ldi	r27, 0x00	; 0
    353c:	e0 e4       	ldi	r30, 0x40	; 64
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	80 81       	ld	r24, Z
    3542:	28 2f       	mov	r18, r24
    3544:	eb 81       	ldd	r30, Y+3	; 0x03
    3546:	fc 81       	ldd	r31, Y+4	; 0x04
    3548:	80 81       	ld	r24, Z
    354a:	88 2f       	mov	r24, r24
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	83 70       	andi	r24, 0x03	; 3
    3550:	90 70       	andi	r25, 0x00	; 0
    3552:	88 0f       	add	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	82 2b       	or	r24, r18
    3558:	8c 93       	st	X, r24


	ubrr_value =(uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    355a:	eb 81       	ldd	r30, Y+3	; 0x03
    355c:	fc 81       	ldd	r31, Y+4	; 0x04
    355e:	83 81       	ldd	r24, Z+3	; 0x03
    3560:	94 81       	ldd	r25, Z+4	; 0x04
    3562:	a5 81       	ldd	r26, Z+5	; 0x05
    3564:	b6 81       	ldd	r27, Z+6	; 0x06
    3566:	88 0f       	add	r24, r24
    3568:	99 1f       	adc	r25, r25
    356a:	aa 1f       	adc	r26, r26
    356c:	bb 1f       	adc	r27, r27
    356e:	88 0f       	add	r24, r24
    3570:	99 1f       	adc	r25, r25
    3572:	aa 1f       	adc	r26, r26
    3574:	bb 1f       	adc	r27, r27
    3576:	88 0f       	add	r24, r24
    3578:	99 1f       	adc	r25, r25
    357a:	aa 1f       	adc	r26, r26
    357c:	bb 1f       	adc	r27, r27
    357e:	9c 01       	movw	r18, r24
    3580:	ad 01       	movw	r20, r26
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	92 e1       	ldi	r25, 0x12	; 18
    3586:	aa e7       	ldi	r26, 0x7A	; 122
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	bc 01       	movw	r22, r24
    358c:	cd 01       	movw	r24, r26
    358e:	0e 94 bf 1b 	call	0x377e	; 0x377e <__udivmodsi4>
    3592:	da 01       	movw	r26, r20
    3594:	c9 01       	movw	r24, r18
    3596:	01 97       	sbiw	r24, 0x01	; 1
    3598:	9a 83       	std	Y+2, r25	; 0x02
    359a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    359c:	e0 e4       	ldi	r30, 0x40	; 64
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	9a 81       	ldd	r25, Y+2	; 0x02
    35a4:	89 2f       	mov	r24, r25
    35a6:	99 27       	eor	r25, r25
    35a8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    35aa:	e9 e2       	ldi	r30, 0x29	; 41
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	80 83       	st	Z, r24

}
    35b2:	0f 90       	pop	r0
    35b4:	0f 90       	pop	r0
    35b6:	0f 90       	pop	r0
    35b8:	0f 90       	pop	r0
    35ba:	cf 91       	pop	r28
    35bc:	df 91       	pop	r29
    35be:	08 95       	ret

000035c0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    35c0:	df 93       	push	r29
    35c2:	cf 93       	push	r28
    35c4:	0f 92       	push	r0
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
    35ca:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    35cc:	eb e2       	ldi	r30, 0x2B	; 43
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	80 81       	ld	r24, Z
    35d2:	88 2f       	mov	r24, r24
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	80 72       	andi	r24, 0x20	; 32
    35d8:	90 70       	andi	r25, 0x00	; 0
    35da:	00 97       	sbiw	r24, 0x00	; 0
    35dc:	b9 f3       	breq	.-18     	; 0x35cc <UART_sendByte+0xc>

	/*
	* Put the required data in the UDR register and it also clear the UDRE flag as
	* the UDR register is not empty now
	*/
	UDR = data;
    35de:	ec e2       	ldi	r30, 0x2C	; 44
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    35e6:	0f 90       	pop	r0
    35e8:	cf 91       	pop	r28
    35ea:	df 91       	pop	r29
    35ec:	08 95       	ret

000035ee <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    35f6:	eb e2       	ldi	r30, 0x2B	; 43
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	80 81       	ld	r24, Z
    35fc:	88 23       	and	r24, r24
    35fe:	dc f7       	brge	.-10     	; 0x35f6 <UART_recieveByte+0x8>
	/*
	* Read the received data from the Rx buffer (UDR)
	* The RXC flag will be cleared after read the data
	*/
	return UDR;
    3600:	ec e2       	ldi	r30, 0x2C	; 44
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	80 81       	ld	r24, Z
}
    3606:	cf 91       	pop	r28
    3608:	df 91       	pop	r29
    360a:	08 95       	ret

0000360c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    360c:	df 93       	push	r29
    360e:	cf 93       	push	r28
    3610:	00 d0       	rcall	.+0      	; 0x3612 <UART_sendString+0x6>
    3612:	0f 92       	push	r0
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
    3618:	9b 83       	std	Y+3, r25	; 0x03
    361a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    361c:	19 82       	std	Y+1, r1	; 0x01
    361e:	0e c0       	rjmp	.+28     	; 0x363c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	28 2f       	mov	r18, r24
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	8a 81       	ldd	r24, Y+2	; 0x02
    3628:	9b 81       	ldd	r25, Y+3	; 0x03
    362a:	fc 01       	movw	r30, r24
    362c:	e2 0f       	add	r30, r18
    362e:	f3 1f       	adc	r31, r19
    3630:	80 81       	ld	r24, Z
    3632:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>
		i++;
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	8f 5f       	subi	r24, 0xFF	; 255
    363a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	28 2f       	mov	r18, r24
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	8a 81       	ldd	r24, Y+2	; 0x02
    3644:	9b 81       	ldd	r25, Y+3	; 0x03
    3646:	fc 01       	movw	r30, r24
    3648:	e2 0f       	add	r30, r18
    364a:	f3 1f       	adc	r31, r19
    364c:	80 81       	ld	r24, Z
    364e:	88 23       	and	r24, r24
    3650:	39 f7       	brne	.-50     	; 0x3620 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	cf 91       	pop	r28
    365a:	df 91       	pop	r29
    365c:	08 95       	ret

0000365e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    365e:	0f 93       	push	r16
    3660:	1f 93       	push	r17
    3662:	df 93       	push	r29
    3664:	cf 93       	push	r28
    3666:	00 d0       	rcall	.+0      	; 0x3668 <UART_receiveString+0xa>
    3668:	0f 92       	push	r0
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    366e:	9b 83       	std	Y+3, r25	; 0x03
    3670:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3672:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	28 2f       	mov	r18, r24
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	8a 81       	ldd	r24, Y+2	; 0x02
    367c:	9b 81       	ldd	r25, Y+3	; 0x03
    367e:	8c 01       	movw	r16, r24
    3680:	02 0f       	add	r16, r18
    3682:	13 1f       	adc	r17, r19
    3684:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <UART_recieveByte>
    3688:	f8 01       	movw	r30, r16
    368a:	80 83       	st	Z, r24
    368c:	0f c0       	rjmp	.+30     	; 0x36ac <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    368e:	89 81       	ldd	r24, Y+1	; 0x01
    3690:	8f 5f       	subi	r24, 0xFF	; 255
    3692:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3694:	89 81       	ldd	r24, Y+1	; 0x01
    3696:	28 2f       	mov	r18, r24
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	8a 81       	ldd	r24, Y+2	; 0x02
    369c:	9b 81       	ldd	r25, Y+3	; 0x03
    369e:	8c 01       	movw	r16, r24
    36a0:	02 0f       	add	r16, r18
    36a2:	13 1f       	adc	r17, r19
    36a4:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <UART_recieveByte>
    36a8:	f8 01       	movw	r30, r16
    36aa:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	9b 81       	ldd	r25, Y+3	; 0x03
    36b6:	fc 01       	movw	r30, r24
    36b8:	e2 0f       	add	r30, r18
    36ba:	f3 1f       	adc	r31, r19
    36bc:	80 81       	ld	r24, Z
    36be:	83 32       	cpi	r24, 0x23	; 35
    36c0:	31 f7       	brne	.-52     	; 0x368e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	28 2f       	mov	r18, r24
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ca:	9b 81       	ldd	r25, Y+3	; 0x03
    36cc:	fc 01       	movw	r30, r24
    36ce:	e2 0f       	add	r30, r18
    36d0:	f3 1f       	adc	r31, r19
    36d2:	10 82       	st	Z, r1
}
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	cf 91       	pop	r28
    36dc:	df 91       	pop	r29
    36de:	1f 91       	pop	r17
    36e0:	0f 91       	pop	r16
    36e2:	08 95       	ret

000036e4 <UART_sendArrOfData>:
/*
 * Description :
 * Send the required Data through UART to the other UART device.
 */
void UART_sendArrOfData(const uint8 *Data , uint8 size)
{
    36e4:	df 93       	push	r29
    36e6:	cf 93       	push	r28
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <UART_sendArrOfData+0x6>
    36ea:	00 d0       	rcall	.+0      	; 0x36ec <UART_sendArrOfData+0x8>
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	9b 83       	std	Y+3, r25	; 0x03
    36f2:	8a 83       	std	Y+2, r24	; 0x02
    36f4:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	/* Send the whole array  */
	for (i =0 ; i<size ; i++)
    36f6:	19 82       	std	Y+1, r1	; 0x01
    36f8:	0e c0       	rjmp	.+28     	; 0x3716 <UART_sendArrOfData+0x32>
	{
		UART_sendByte(Data[i]);
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	28 2f       	mov	r18, r24
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	8a 81       	ldd	r24, Y+2	; 0x02
    3702:	9b 81       	ldd	r25, Y+3	; 0x03
    3704:	fc 01       	movw	r30, r24
    3706:	e2 0f       	add	r30, r18
    3708:	f3 1f       	adc	r31, r19
    370a:	80 81       	ld	r24, Z
    370c:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <UART_sendByte>
 */
void UART_sendArrOfData(const uint8 *Data , uint8 size)
{
	uint8 i;
	/* Send the whole array  */
	for (i =0 ; i<size ; i++)
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	8f 5f       	subi	r24, 0xFF	; 255
    3714:	89 83       	std	Y+1, r24	; 0x01
    3716:	99 81       	ldd	r25, Y+1	; 0x01
    3718:	8c 81       	ldd	r24, Y+4	; 0x04
    371a:	98 17       	cp	r25, r24
    371c:	70 f3       	brcs	.-36     	; 0x36fa <UART_sendArrOfData+0x16>
	{
		UART_sendByte(Data[i]);
	}

}
    371e:	0f 90       	pop	r0
    3720:	0f 90       	pop	r0
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	08 95       	ret

0000372c <UART_receiveArrOfData>:
/*
 * Description :
 * Receive the required Data u through UART from the other UART device.
 */
void UART_receiveArrOfData(uint8 *Data , uint8 size)
{
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    3730:	df 93       	push	r29
    3732:	cf 93       	push	r28
    3734:	00 d0       	rcall	.+0      	; 0x3736 <UART_receiveArrOfData+0xa>
    3736:	00 d0       	rcall	.+0      	; 0x3738 <UART_receiveArrOfData+0xc>
    3738:	cd b7       	in	r28, 0x3d	; 61
    373a:	de b7       	in	r29, 0x3e	; 62
    373c:	9b 83       	std	Y+3, r25	; 0x03
    373e:	8a 83       	std	Y+2, r24	; 0x02
    3740:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i ;
	/* Receive the whole array */
	for (i=0 ; i <size ; i++)
    3742:	19 82       	std	Y+1, r1	; 0x01
    3744:	0f c0       	rjmp	.+30     	; 0x3764 <UART_receiveArrOfData+0x38>
	{
		Data[i] = UART_recieveByte();
    3746:	89 81       	ldd	r24, Y+1	; 0x01
    3748:	28 2f       	mov	r18, r24
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	8a 81       	ldd	r24, Y+2	; 0x02
    374e:	9b 81       	ldd	r25, Y+3	; 0x03
    3750:	8c 01       	movw	r16, r24
    3752:	02 0f       	add	r16, r18
    3754:	13 1f       	adc	r17, r19
    3756:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <UART_recieveByte>
    375a:	f8 01       	movw	r30, r16
    375c:	80 83       	st	Z, r24
 */
void UART_receiveArrOfData(uint8 *Data , uint8 size)
{
	uint8 i ;
	/* Receive the whole array */
	for (i=0 ; i <size ; i++)
    375e:	89 81       	ldd	r24, Y+1	; 0x01
    3760:	8f 5f       	subi	r24, 0xFF	; 255
    3762:	89 83       	std	Y+1, r24	; 0x01
    3764:	99 81       	ldd	r25, Y+1	; 0x01
    3766:	8c 81       	ldd	r24, Y+4	; 0x04
    3768:	98 17       	cp	r25, r24
    376a:	68 f3       	brcs	.-38     	; 0x3746 <UART_receiveArrOfData+0x1a>
	{
		Data[i] = UART_recieveByte();
	}
}
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	0f 90       	pop	r0
    3772:	0f 90       	pop	r0
    3774:	cf 91       	pop	r28
    3776:	df 91       	pop	r29
    3778:	1f 91       	pop	r17
    377a:	0f 91       	pop	r16
    377c:	08 95       	ret

0000377e <__udivmodsi4>:
    377e:	a1 e2       	ldi	r26, 0x21	; 33
    3780:	1a 2e       	mov	r1, r26
    3782:	aa 1b       	sub	r26, r26
    3784:	bb 1b       	sub	r27, r27
    3786:	fd 01       	movw	r30, r26
    3788:	0d c0       	rjmp	.+26     	; 0x37a4 <__udivmodsi4_ep>

0000378a <__udivmodsi4_loop>:
    378a:	aa 1f       	adc	r26, r26
    378c:	bb 1f       	adc	r27, r27
    378e:	ee 1f       	adc	r30, r30
    3790:	ff 1f       	adc	r31, r31
    3792:	a2 17       	cp	r26, r18
    3794:	b3 07       	cpc	r27, r19
    3796:	e4 07       	cpc	r30, r20
    3798:	f5 07       	cpc	r31, r21
    379a:	20 f0       	brcs	.+8      	; 0x37a4 <__udivmodsi4_ep>
    379c:	a2 1b       	sub	r26, r18
    379e:	b3 0b       	sbc	r27, r19
    37a0:	e4 0b       	sbc	r30, r20
    37a2:	f5 0b       	sbc	r31, r21

000037a4 <__udivmodsi4_ep>:
    37a4:	66 1f       	adc	r22, r22
    37a6:	77 1f       	adc	r23, r23
    37a8:	88 1f       	adc	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	1a 94       	dec	r1
    37ae:	69 f7       	brne	.-38     	; 0x378a <__udivmodsi4_loop>
    37b0:	60 95       	com	r22
    37b2:	70 95       	com	r23
    37b4:	80 95       	com	r24
    37b6:	90 95       	com	r25
    37b8:	9b 01       	movw	r18, r22
    37ba:	ac 01       	movw	r20, r24
    37bc:	bd 01       	movw	r22, r26
    37be:	cf 01       	movw	r24, r30
    37c0:	08 95       	ret

000037c2 <__prologue_saves__>:
    37c2:	2f 92       	push	r2
    37c4:	3f 92       	push	r3
    37c6:	4f 92       	push	r4
    37c8:	5f 92       	push	r5
    37ca:	6f 92       	push	r6
    37cc:	7f 92       	push	r7
    37ce:	8f 92       	push	r8
    37d0:	9f 92       	push	r9
    37d2:	af 92       	push	r10
    37d4:	bf 92       	push	r11
    37d6:	cf 92       	push	r12
    37d8:	df 92       	push	r13
    37da:	ef 92       	push	r14
    37dc:	ff 92       	push	r15
    37de:	0f 93       	push	r16
    37e0:	1f 93       	push	r17
    37e2:	cf 93       	push	r28
    37e4:	df 93       	push	r29
    37e6:	cd b7       	in	r28, 0x3d	; 61
    37e8:	de b7       	in	r29, 0x3e	; 62
    37ea:	ca 1b       	sub	r28, r26
    37ec:	db 0b       	sbc	r29, r27
    37ee:	0f b6       	in	r0, 0x3f	; 63
    37f0:	f8 94       	cli
    37f2:	de bf       	out	0x3e, r29	; 62
    37f4:	0f be       	out	0x3f, r0	; 63
    37f6:	cd bf       	out	0x3d, r28	; 61
    37f8:	09 94       	ijmp

000037fa <__epilogue_restores__>:
    37fa:	2a 88       	ldd	r2, Y+18	; 0x12
    37fc:	39 88       	ldd	r3, Y+17	; 0x11
    37fe:	48 88       	ldd	r4, Y+16	; 0x10
    3800:	5f 84       	ldd	r5, Y+15	; 0x0f
    3802:	6e 84       	ldd	r6, Y+14	; 0x0e
    3804:	7d 84       	ldd	r7, Y+13	; 0x0d
    3806:	8c 84       	ldd	r8, Y+12	; 0x0c
    3808:	9b 84       	ldd	r9, Y+11	; 0x0b
    380a:	aa 84       	ldd	r10, Y+10	; 0x0a
    380c:	b9 84       	ldd	r11, Y+9	; 0x09
    380e:	c8 84       	ldd	r12, Y+8	; 0x08
    3810:	df 80       	ldd	r13, Y+7	; 0x07
    3812:	ee 80       	ldd	r14, Y+6	; 0x06
    3814:	fd 80       	ldd	r15, Y+5	; 0x05
    3816:	0c 81       	ldd	r16, Y+4	; 0x04
    3818:	1b 81       	ldd	r17, Y+3	; 0x03
    381a:	aa 81       	ldd	r26, Y+2	; 0x02
    381c:	b9 81       	ldd	r27, Y+1	; 0x01
    381e:	ce 0f       	add	r28, r30
    3820:	d1 1d       	adc	r29, r1
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	ed 01       	movw	r28, r26
    382e:	08 95       	ret

00003830 <itoa>:
    3830:	fb 01       	movw	r30, r22
    3832:	9f 01       	movw	r18, r30
    3834:	e8 94       	clt
    3836:	42 30       	cpi	r20, 0x02	; 2
    3838:	c4 f0       	brlt	.+48     	; 0x386a <itoa+0x3a>
    383a:	45 32       	cpi	r20, 0x25	; 37
    383c:	b4 f4       	brge	.+44     	; 0x386a <itoa+0x3a>
    383e:	4a 30       	cpi	r20, 0x0A	; 10
    3840:	29 f4       	brne	.+10     	; 0x384c <itoa+0x1c>
    3842:	97 fb       	bst	r25, 7
    3844:	1e f4       	brtc	.+6      	; 0x384c <itoa+0x1c>
    3846:	90 95       	com	r25
    3848:	81 95       	neg	r24
    384a:	9f 4f       	sbci	r25, 0xFF	; 255
    384c:	64 2f       	mov	r22, r20
    384e:	77 27       	eor	r23, r23
    3850:	0e 94 49 1c 	call	0x3892	; 0x3892 <__udivmodhi4>
    3854:	80 5d       	subi	r24, 0xD0	; 208
    3856:	8a 33       	cpi	r24, 0x3A	; 58
    3858:	0c f0       	brlt	.+2      	; 0x385c <itoa+0x2c>
    385a:	89 5d       	subi	r24, 0xD9	; 217
    385c:	81 93       	st	Z+, r24
    385e:	cb 01       	movw	r24, r22
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	a1 f7       	brne	.-24     	; 0x384c <itoa+0x1c>
    3864:	16 f4       	brtc	.+4      	; 0x386a <itoa+0x3a>
    3866:	5d e2       	ldi	r21, 0x2D	; 45
    3868:	51 93       	st	Z+, r21
    386a:	10 82       	st	Z, r1
    386c:	c9 01       	movw	r24, r18
    386e:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <strrev>

00003872 <strrev>:
    3872:	dc 01       	movw	r26, r24
    3874:	fc 01       	movw	r30, r24
    3876:	67 2f       	mov	r22, r23
    3878:	71 91       	ld	r23, Z+
    387a:	77 23       	and	r23, r23
    387c:	e1 f7       	brne	.-8      	; 0x3876 <strrev+0x4>
    387e:	32 97       	sbiw	r30, 0x02	; 2
    3880:	04 c0       	rjmp	.+8      	; 0x388a <strrev+0x18>
    3882:	7c 91       	ld	r23, X
    3884:	6d 93       	st	X+, r22
    3886:	70 83       	st	Z, r23
    3888:	62 91       	ld	r22, -Z
    388a:	ae 17       	cp	r26, r30
    388c:	bf 07       	cpc	r27, r31
    388e:	c8 f3       	brcs	.-14     	; 0x3882 <strrev+0x10>
    3890:	08 95       	ret

00003892 <__udivmodhi4>:
    3892:	aa 1b       	sub	r26, r26
    3894:	bb 1b       	sub	r27, r27
    3896:	51 e1       	ldi	r21, 0x11	; 17
    3898:	07 c0       	rjmp	.+14     	; 0x38a8 <__udivmodhi4_ep>

0000389a <__udivmodhi4_loop>:
    389a:	aa 1f       	adc	r26, r26
    389c:	bb 1f       	adc	r27, r27
    389e:	a6 17       	cp	r26, r22
    38a0:	b7 07       	cpc	r27, r23
    38a2:	10 f0       	brcs	.+4      	; 0x38a8 <__udivmodhi4_ep>
    38a4:	a6 1b       	sub	r26, r22
    38a6:	b7 0b       	sbc	r27, r23

000038a8 <__udivmodhi4_ep>:
    38a8:	88 1f       	adc	r24, r24
    38aa:	99 1f       	adc	r25, r25
    38ac:	5a 95       	dec	r21
    38ae:	a9 f7       	brne	.-22     	; 0x389a <__udivmodhi4_loop>
    38b0:	80 95       	com	r24
    38b2:	90 95       	com	r25
    38b4:	bc 01       	movw	r22, r24
    38b6:	cd 01       	movw	r24, r26
    38b8:	08 95       	ret

000038ba <_exit>:
    38ba:	f8 94       	cli

000038bc <__stop_program>:
    38bc:	ff cf       	rjmp	.-2      	; 0x38bc <__stop_program>
