
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  000031fa  0000328e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800176  00800176  000033a4  2**0
                  ALLOC
  3 .stab         0000315c  00000000  00000000  000033a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001363  00000000  00000000  00006500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007863  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000079a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000975c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a647  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b3f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b7e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <main>
      8a:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e4       	ldi	r26, 0x4E	; 78
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e4       	ldi	r24, 0x4E	; 78
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <count_second>:


uint8 seconds = 0 ;
/*timer1 call back function*/
void count_second()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	seconds++;
     b4e:	80 91 76 01 	lds	r24, 0x0176
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 76 01 	sts	0x0176, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <initialization>:
/*
 * Description :
 * intializations of the global interrupt , LCD , UART and TIMER1
 */
void initialization(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	6a 97       	sbiw	r28, 0x1a	; 26
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);
     b72:	af e5       	ldi	r26, 0x5F	; 95
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ef e5       	ldi	r30, 0x5F	; 95
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	80 68       	ori	r24, 0x80	; 128
     b7e:	8c 93       	st	X, r24
	LCD_init();
     b80:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <LCD_init>
	UART_ConfigType uart_configurations = {DATA_8_BIT,DISABLED,ONE_STOP_BIT,9600};
     b84:	ce 01       	movw	r24, r28
     b86:	0f 96       	adiw	r24, 0x0f	; 15
     b88:	9f 8b       	std	Y+23, r25	; 0x17
     b8a:	8e 8b       	std	Y+22, r24	; 0x16
     b8c:	e6 e5       	ldi	r30, 0x56	; 86
     b8e:	f1 e0       	ldi	r31, 0x01	; 1
     b90:	f9 8f       	std	Y+25, r31	; 0x19
     b92:	e8 8f       	std	Y+24, r30	; 0x18
     b94:	f7 e0       	ldi	r31, 0x07	; 7
     b96:	fa 8f       	std	Y+26, r31	; 0x1a
     b98:	e8 8d       	ldd	r30, Y+24	; 0x18
     b9a:	f9 8d       	ldd	r31, Y+25	; 0x19
     b9c:	00 80       	ld	r0, Z
     b9e:	88 8d       	ldd	r24, Y+24	; 0x18
     ba0:	99 8d       	ldd	r25, Y+25	; 0x19
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	99 8f       	std	Y+25, r25	; 0x19
     ba6:	88 8f       	std	Y+24, r24	; 0x18
     ba8:	ee 89       	ldd	r30, Y+22	; 0x16
     baa:	ff 89       	ldd	r31, Y+23	; 0x17
     bac:	00 82       	st	Z, r0
     bae:	8e 89       	ldd	r24, Y+22	; 0x16
     bb0:	9f 89       	ldd	r25, Y+23	; 0x17
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	9f 8b       	std	Y+23, r25	; 0x17
     bb6:	8e 8b       	std	Y+22, r24	; 0x16
     bb8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bba:	91 50       	subi	r25, 0x01	; 1
     bbc:	9a 8f       	std	Y+26, r25	; 0x1a
     bbe:	ea 8d       	ldd	r30, Y+26	; 0x1a
     bc0:	ee 23       	and	r30, r30
     bc2:	51 f7       	brne	.-44     	; 0xb98 <initialization+0x3a>
	UART_init(&uart_configurations);
     bc4:	ce 01       	movw	r24, r28
     bc6:	0f 96       	adiw	r24, 0x0f	; 15
     bc8:	0e 94 00 17 	call	0x2e00	; 0x2e00 <UART_init>
	Timer1_setCallBack(count_second);
     bcc:	83 ea       	ldi	r24, 0xA3	; 163
     bce:	95 e0       	ldi	r25, 0x05	; 5
     bd0:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <Timer1_setCallBack>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	a6 e9       	ldi	r26, 0x96	; 150
     bda:	b3 e4       	ldi	r27, 0x43	; 67
     bdc:	8b 87       	std	Y+11, r24	; 0x0b
     bde:	9c 87       	std	Y+12, r25	; 0x0c
     be0:	ad 87       	std	Y+13, r26	; 0x0d
     be2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be4:	6b 85       	ldd	r22, Y+11	; 0x0b
     be6:	7c 85       	ldd	r23, Y+12	; 0x0c
     be8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bea:	9e 85       	ldd	r25, Y+14	; 0x0e
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	4a ef       	ldi	r20, 0xFA	; 250
     bf2:	54 e4       	ldi	r21, 0x44	; 68
     bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	8f 83       	std	Y+7, r24	; 0x07
     bfe:	98 87       	std	Y+8, r25	; 0x08
     c00:	a9 87       	std	Y+9, r26	; 0x09
     c02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c04:	6f 81       	ldd	r22, Y+7	; 0x07
     c06:	78 85       	ldd	r23, Y+8	; 0x08
     c08:	89 85       	ldd	r24, Y+9	; 0x09
     c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 e8       	ldi	r20, 0x80	; 128
     c12:	5f e3       	ldi	r21, 0x3F	; 63
     c14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c18:	88 23       	and	r24, r24
     c1a:	2c f4       	brge	.+10     	; 0xc26 <initialization+0xc8>
		__ticks = 1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	3f c0       	rjmp	.+126    	; 0xca4 <initialization+0x146>
	else if (__tmp > 65535)
     c26:	6f 81       	ldd	r22, Y+7	; 0x07
     c28:	78 85       	ldd	r23, Y+8	; 0x08
     c2a:	89 85       	ldd	r24, Y+9	; 0x09
     c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	3f ef       	ldi	r19, 0xFF	; 255
     c32:	4f e7       	ldi	r20, 0x7F	; 127
     c34:	57 e4       	ldi	r21, 0x47	; 71
     c36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c3a:	18 16       	cp	r1, r24
     c3c:	4c f5       	brge	.+82     	; 0xc90 <initialization+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c40:	7c 85       	ldd	r23, Y+12	; 0x0c
     c42:	8d 85       	ldd	r24, Y+13	; 0x0d
     c44:	9e 85       	ldd	r25, Y+14	; 0x0e
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e2       	ldi	r20, 0x20	; 32
     c4c:	51 e4       	ldi	r21, 0x41	; 65
     c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	bc 01       	movw	r22, r24
     c58:	cd 01       	movw	r24, r26
     c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	0f c0       	rjmp	.+30     	; 0xc86 <initialization+0x128>
     c68:	88 ec       	ldi	r24, 0xC8	; 200
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	9c 83       	std	Y+4, r25	; 0x04
     c6e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	9c 81       	ldd	r25, Y+4	; 0x04
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <initialization+0x116>
     c78:	9c 83       	std	Y+4, r25	; 0x04
     c7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	9e 83       	std	Y+6, r25	; 0x06
     c84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	9e 81       	ldd	r25, Y+6	; 0x06
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	69 f7       	brne	.-38     	; 0xc68 <initialization+0x10a>
     c8e:	14 c0       	rjmp	.+40     	; 0xcb8 <initialization+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c90:	6f 81       	ldd	r22, Y+7	; 0x07
     c92:	78 85       	ldd	r23, Y+8	; 0x08
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	9a 85       	ldd	r25, Y+10	; 0x0a
     c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	9e 83       	std	Y+6, r25	; 0x06
     ca2:	8d 83       	std	Y+5, r24	; 0x05
     ca4:	8d 81       	ldd	r24, Y+5	; 0x05
     ca6:	9e 81       	ldd	r25, Y+6	; 0x06
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <initialization+0x152>
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	89 83       	std	Y+1, r24	; 0x01
	//Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
	//Timer1_init(&timer1_configurations);
	_delay_ms(300);
}
     cb8:	6a 96       	adiw	r28, 0x1a	; 26
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <sync_send>:
/*
 * Description :
 * sync the time of send and recive between the UARTs
 */
void sync_send(void)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(READY);
     cd2:	80 e1       	ldi	r24, 0x10	; 16
     cd4:	0e 94 7e 17 	call	0x2efc	; 0x2efc <UART_sendByte>
	while(UART_recieveByte()!=READY);
     cd8:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <UART_recieveByte>
     cdc:	80 31       	cpi	r24, 0x10	; 16
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <sync_send+0xe>
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <sync_recive>:
/*
 * Description :
 * sync the time of send and recive between the UARTs
 */
void sync_recive(void)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte()!=READY);
     cee:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <UART_recieveByte>
     cf2:	80 31       	cpi	r24, 0x10	; 16
     cf4:	e1 f7       	brne	.-8      	; 0xcee <sync_recive+0x8>
	UART_sendByte(READY);
     cf6:	80 e1       	ldi	r24, 0x10	; 16
     cf8:	0e 94 7e 17 	call	0x2efc	; 0x2efc <UART_sendByte>
}
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <send_pass>:
 *
 * Parameters:
 * uint8 *pass: Pointer to an array containing the password to be sent.
 */
void send_pass(uint8 *pass)
{
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	00 d0       	rcall	.+0      	; 0xd08 <send_pass+0x6>
     d08:	0f 92       	push	r0
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	9b 83       	std	Y+3, r25	; 0x03
     d10:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i;
	sync_send();
     d12:	0e 94 65 06 	call	0xcca	; 0xcca <sync_send>
	for (i = 0 ; i<5 ; i++)
     d16:	19 82       	std	Y+1, r1	; 0x01
     d18:	0e c0       	rjmp	.+28     	; 0xd36 <send_pass+0x34>
	{
			UART_sendByte(pass[i]);
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	9b 81       	ldd	r25, Y+3	; 0x03
     d24:	fc 01       	movw	r30, r24
     d26:	e2 0f       	add	r30, r18
     d28:	f3 1f       	adc	r31, r19
     d2a:	80 81       	ld	r24, Z
     d2c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <UART_sendByte>
void send_pass(uint8 *pass)
{

	uint8 i;
	sync_send();
	for (i = 0 ; i<5 ; i++)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	8f 5f       	subi	r24, 0xFF	; 255
     d34:	89 83       	std	Y+1, r24	; 0x01
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	85 30       	cpi	r24, 0x05	; 5
     d3a:	78 f3       	brcs	.-34     	; 0xd1a <send_pass+0x18>
	{
			UART_sendByte(pass[i]);
	}
}
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <recive_password>:
 *
 * Parameters:
 * uint8 *receive_pass: Pointer to an array where the received password will be stored.
 */
void recive_password(uint8 *recive_pass)
{
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	00 d0       	rcall	.+0      	; 0xd52 <recive_password+0xa>
     d52:	0f 92       	push	r0
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	9b 83       	std	Y+3, r25	; 0x03
     d5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i ;
	sync_recive();
     d5c:	0e 94 73 06 	call	0xce6	; 0xce6 <sync_recive>
	for (i = 0 ; i<5 ; i++)
     d60:	19 82       	std	Y+1, r1	; 0x01
     d62:	0f c0       	rjmp	.+30     	; 0xd82 <recive_password+0x3a>
		{
			recive_pass[i] = UART_recieveByte();
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	9b 81       	ldd	r25, Y+3	; 0x03
     d6e:	8c 01       	movw	r16, r24
     d70:	02 0f       	add	r16, r18
     d72:	13 1f       	adc	r17, r19
     d74:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <UART_recieveByte>
     d78:	f8 01       	movw	r30, r16
     d7a:	80 83       	st	Z, r24
 */
void recive_password(uint8 *recive_pass)
{
	uint8 i ;
	sync_recive();
	for (i = 0 ; i<5 ; i++)
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	8f 5f       	subi	r24, 0xFF	; 255
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	85 30       	cpi	r24, 0x05	; 5
     d86:	70 f3       	brcs	.-36     	; 0xd64 <recive_password+0x1c>
		{
			recive_pass[i] = UART_recieveByte();
		}
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	08 95       	ret

00000d98 <entering_password>:
 * Takes a 5-digit password from a keypad, displays on LCD, waits for '='.
 * Parameters:
 *  uint8 *password: Pointer to array storing the password.
 */
void entering_password(uint8 *password)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	62 97       	sbiw	r28, 0x12	; 18
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	9a 8b       	std	Y+18, r25	; 0x12
     dae:	89 8b       	std	Y+17, r24	; 0x11
	uint8 i=0;
     db0:	18 8a       	std	Y+16, r1	; 0x10
     db2:	8c c0       	rjmp	.+280    	; 0xecc <entering_password+0x134>
	uint8 key;
	while(i<5)
		{
			key = KEYPAD_getPressedKey();
     db4:	0e 94 2a 0c 	call	0x1854	; 0x1854 <KEYPAD_getPressedKey>
     db8:	8f 87       	std	Y+15, r24	; 0x0f
			if ((key >=0) && (key <=9) )
     dba:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbc:	8a 30       	cpi	r24, 0x0A	; 10
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <entering_password+0x2a>
     dc0:	85 c0       	rjmp	.+266    	; 0xecc <entering_password+0x134>
			{
				key = KEYPAD_getPressedKey();
     dc2:	0e 94 2a 0c 	call	0x1854	; 0x1854 <KEYPAD_getPressedKey>
     dc6:	8f 87       	std	Y+15, r24	; 0x0f
				password[i] = key;
     dc8:	88 89       	ldd	r24, Y+16	; 0x10
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	89 89       	ldd	r24, Y+17	; 0x11
     dd0:	9a 89       	ldd	r25, Y+18	; 0x12
     dd2:	fc 01       	movw	r30, r24
     dd4:	e2 0f       	add	r30, r18
     dd6:	f3 1f       	adc	r31, r19
     dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dda:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
     ddc:	8a e2       	ldi	r24, 0x2A	; 42
     dde:	0e 94 7e 13 	call	0x26fc	; 0x26fc <LCD_displayCharacter>
				i++;
     de2:	88 89       	ldd	r24, Y+16	; 0x10
     de4:	8f 5f       	subi	r24, 0xFF	; 255
     de6:	88 8b       	std	Y+16, r24	; 0x10
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	aa ef       	ldi	r26, 0xFA	; 250
     dee:	b3 e4       	ldi	r27, 0x43	; 67
     df0:	8b 87       	std	Y+11, r24	; 0x0b
     df2:	9c 87       	std	Y+12, r25	; 0x0c
     df4:	ad 87       	std	Y+13, r26	; 0x0d
     df6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
     dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	4a ef       	ldi	r20, 0xFA	; 250
     e06:	54 e4       	ldi	r21, 0x44	; 68
     e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	8f 83       	std	Y+7, r24	; 0x07
     e12:	98 87       	std	Y+8, r25	; 0x08
     e14:	a9 87       	std	Y+9, r26	; 0x09
     e16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e18:	6f 81       	ldd	r22, Y+7	; 0x07
     e1a:	78 85       	ldd	r23, Y+8	; 0x08
     e1c:	89 85       	ldd	r24, Y+9	; 0x09
     e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e8       	ldi	r20, 0x80	; 128
     e26:	5f e3       	ldi	r21, 0x3F	; 63
     e28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e2c:	88 23       	and	r24, r24
     e2e:	2c f4       	brge	.+10     	; 0xe3a <entering_password+0xa2>
		__ticks = 1;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	9e 83       	std	Y+6, r25	; 0x06
     e36:	8d 83       	std	Y+5, r24	; 0x05
     e38:	3f c0       	rjmp	.+126    	; 0xeb8 <entering_password+0x120>
	else if (__tmp > 65535)
     e3a:	6f 81       	ldd	r22, Y+7	; 0x07
     e3c:	78 85       	ldd	r23, Y+8	; 0x08
     e3e:	89 85       	ldd	r24, Y+9	; 0x09
     e40:	9a 85       	ldd	r25, Y+10	; 0x0a
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	3f ef       	ldi	r19, 0xFF	; 255
     e46:	4f e7       	ldi	r20, 0x7F	; 127
     e48:	57 e4       	ldi	r21, 0x47	; 71
     e4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e4e:	18 16       	cp	r1, r24
     e50:	4c f5       	brge	.+82     	; 0xea4 <entering_password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e52:	6b 85       	ldd	r22, Y+11	; 0x0b
     e54:	7c 85       	ldd	r23, Y+12	; 0x0c
     e56:	8d 85       	ldd	r24, Y+13	; 0x0d
     e58:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e2       	ldi	r20, 0x20	; 32
     e60:	51 e4       	ldi	r21, 0x41	; 65
     e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	bc 01       	movw	r22, r24
     e6c:	cd 01       	movw	r24, r26
     e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	9e 83       	std	Y+6, r25	; 0x06
     e78:	8d 83       	std	Y+5, r24	; 0x05
     e7a:	0f c0       	rjmp	.+30     	; 0xe9a <entering_password+0x102>
     e7c:	88 ec       	ldi	r24, 0xC8	; 200
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9c 83       	std	Y+4, r25	; 0x04
     e82:	8b 83       	std	Y+3, r24	; 0x03
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	9c 81       	ldd	r25, Y+4	; 0x04
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <entering_password+0xf0>
     e8c:	9c 83       	std	Y+4, r25	; 0x04
     e8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e90:	8d 81       	ldd	r24, Y+5	; 0x05
     e92:	9e 81       	ldd	r25, Y+6	; 0x06
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9a:	8d 81       	ldd	r24, Y+5	; 0x05
     e9c:	9e 81       	ldd	r25, Y+6	; 0x06
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	69 f7       	brne	.-38     	; 0xe7c <entering_password+0xe4>
     ea2:	14 c0       	rjmp	.+40     	; 0xecc <entering_password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea4:	6f 81       	ldd	r22, Y+7	; 0x07
     ea6:	78 85       	ldd	r23, Y+8	; 0x08
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	9e 83       	std	Y+6, r25	; 0x06
     eb6:	8d 83       	std	Y+5, r24	; 0x05
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	9a 83       	std	Y+2, r25	; 0x02
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <entering_password+0x12c>
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	89 83       	std	Y+1, r24	; 0x01
 */
void entering_password(uint8 *password)
{
	uint8 i=0;
	uint8 key;
	while(i<5)
     ecc:	88 89       	ldd	r24, Y+16	; 0x10
     ece:	85 30       	cpi	r24, 0x05	; 5
     ed0:	08 f4       	brcc	.+2      	; 0xed4 <entering_password+0x13c>
     ed2:	70 cf       	rjmp	.-288    	; 0xdb4 <entering_password+0x1c>
				LCD_displayCharacter('*');
				i++;
				_delay_ms(500); /* Press time */
			}
		}
	while(KEYPAD_getPressedKey() != '=' ){};
     ed4:	0e 94 2a 0c 	call	0x1854	; 0x1854 <KEYPAD_getPressedKey>
     ed8:	8d 33       	cpi	r24, 0x3D	; 61
     eda:	e1 f7       	brne	.-8      	; 0xed4 <entering_password+0x13c>
}
     edc:	62 96       	adiw	r28, 0x12	; 18
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <open_door>:
 * Description:
 *  Initiates timer1 and start count the seconds to display "Unlocking Door" on the screen
 *
 */
void open_door(void)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	2b 97       	sbiw	r28, 0x0b	; 11
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     f02:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
	Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
     f06:	ce 01       	movw	r24, r28
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	98 87       	std	Y+8, r25	; 0x08
     f0c:	8f 83       	std	Y+7, r24	; 0x07
     f0e:	ed e5       	ldi	r30, 0x5D	; 93
     f10:	f1 e0       	ldi	r31, 0x01	; 1
     f12:	fa 87       	std	Y+10, r31	; 0x0a
     f14:	e9 87       	std	Y+9, r30	; 0x09
     f16:	f6 e0       	ldi	r31, 0x06	; 6
     f18:	fb 87       	std	Y+11, r31	; 0x0b
     f1a:	e9 85       	ldd	r30, Y+9	; 0x09
     f1c:	fa 85       	ldd	r31, Y+10	; 0x0a
     f1e:	00 80       	ld	r0, Z
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	9a 87       	std	Y+10, r25	; 0x0a
     f28:	89 87       	std	Y+9, r24	; 0x09
     f2a:	ef 81       	ldd	r30, Y+7	; 0x07
     f2c:	f8 85       	ldd	r31, Y+8	; 0x08
     f2e:	00 82       	st	Z, r0
     f30:	8f 81       	ldd	r24, Y+7	; 0x07
     f32:	98 85       	ldd	r25, Y+8	; 0x08
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	98 87       	std	Y+8, r25	; 0x08
     f38:	8f 83       	std	Y+7, r24	; 0x07
     f3a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f3c:	91 50       	subi	r25, 0x01	; 1
     f3e:	9b 87       	std	Y+11, r25	; 0x0b
     f40:	eb 85       	ldd	r30, Y+11	; 0x0b
     f42:	ee 23       	and	r30, r30
     f44:	51 f7       	brne	.-44     	; 0xf1a <open_door+0x2c>
	Timer1_init(&timer1_configurations);
     f46:	ce 01       	movw	r24, r28
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <Timer1_init>
	seconds=0;
     f4e:	10 92 76 01 	sts	0x0176, r1
	LCD_displayString("Unlocking Door");
     f52:	80 e6       	ldi	r24, 0x60	; 96
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
	while(seconds !=15)
     f5a:	80 91 76 01 	lds	r24, 0x0176
     f5e:	8f 30       	cpi	r24, 0x0F	; 15
     f60:	e1 f7       	brne	.-8      	; 0xf5a <open_door+0x6c>
	{
	}
	Timer1_deInit();
     f62:	0e 94 d6 16 	call	0x2dac	; 0x2dac <Timer1_deInit>
}
     f66:	2b 96       	adiw	r28, 0x0b	; 11
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <hold_door>:
 * Description:
 *  Initiates timer1 and start count the seconds to display "DOOR IS OPEN" on the screen
 *
 */
void hold_door(void)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	2b 97       	sbiw	r28, 0x0b	; 11
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
     f8c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
	Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
     f90:	ce 01       	movw	r24, r28
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	98 87       	std	Y+8, r25	; 0x08
     f96:	8f 83       	std	Y+7, r24	; 0x07
     f98:	e3 e6       	ldi	r30, 0x63	; 99
     f9a:	f1 e0       	ldi	r31, 0x01	; 1
     f9c:	fa 87       	std	Y+10, r31	; 0x0a
     f9e:	e9 87       	std	Y+9, r30	; 0x09
     fa0:	f6 e0       	ldi	r31, 0x06	; 6
     fa2:	fb 87       	std	Y+11, r31	; 0x0b
     fa4:	e9 85       	ldd	r30, Y+9	; 0x09
     fa6:	fa 85       	ldd	r31, Y+10	; 0x0a
     fa8:	00 80       	ld	r0, Z
     faa:	89 85       	ldd	r24, Y+9	; 0x09
     fac:	9a 85       	ldd	r25, Y+10	; 0x0a
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	9a 87       	std	Y+10, r25	; 0x0a
     fb2:	89 87       	std	Y+9, r24	; 0x09
     fb4:	ef 81       	ldd	r30, Y+7	; 0x07
     fb6:	f8 85       	ldd	r31, Y+8	; 0x08
     fb8:	00 82       	st	Z, r0
     fba:	8f 81       	ldd	r24, Y+7	; 0x07
     fbc:	98 85       	ldd	r25, Y+8	; 0x08
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	98 87       	std	Y+8, r25	; 0x08
     fc2:	8f 83       	std	Y+7, r24	; 0x07
     fc4:	9b 85       	ldd	r25, Y+11	; 0x0b
     fc6:	91 50       	subi	r25, 0x01	; 1
     fc8:	9b 87       	std	Y+11, r25	; 0x0b
     fca:	eb 85       	ldd	r30, Y+11	; 0x0b
     fcc:	ee 23       	and	r30, r30
     fce:	51 f7       	brne	.-44     	; 0xfa4 <hold_door+0x2c>
	Timer1_init(&timer1_configurations);
     fd0:	ce 01       	movw	r24, r28
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	0e 94 84 16 	call	0x2d08	; 0x2d08 <Timer1_init>
	seconds=0;
     fd8:	10 92 76 01 	sts	0x0176, r1
	LCD_displayString("DOOR IS OPEN");
     fdc:	8f e6       	ldi	r24, 0x6F	; 111
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
	while(seconds !=3)
     fe4:	80 91 76 01 	lds	r24, 0x0176
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	e1 f7       	brne	.-8      	; 0xfe4 <hold_door+0x6c>
	{
	}
	Timer1_deInit();
     fec:	0e 94 d6 16 	call	0x2dac	; 0x2dac <Timer1_deInit>
}
     ff0:	2b 96       	adiw	r28, 0x0b	; 11
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <close_door>:
 *  Initiates timer1 and start count the seconds to display "Door Is Locking" on the screen
 *
 */

void close_door(void)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	2b 97       	sbiw	r28, 0x0b	; 11
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
    1016:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
	Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
    101a:	ce 01       	movw	r24, r28
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	98 87       	std	Y+8, r25	; 0x08
    1020:	8f 83       	std	Y+7, r24	; 0x07
    1022:	e9 e6       	ldi	r30, 0x69	; 105
    1024:	f1 e0       	ldi	r31, 0x01	; 1
    1026:	fa 87       	std	Y+10, r31	; 0x0a
    1028:	e9 87       	std	Y+9, r30	; 0x09
    102a:	f6 e0       	ldi	r31, 0x06	; 6
    102c:	fb 87       	std	Y+11, r31	; 0x0b
    102e:	e9 85       	ldd	r30, Y+9	; 0x09
    1030:	fa 85       	ldd	r31, Y+10	; 0x0a
    1032:	00 80       	ld	r0, Z
    1034:	89 85       	ldd	r24, Y+9	; 0x09
    1036:	9a 85       	ldd	r25, Y+10	; 0x0a
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	9a 87       	std	Y+10, r25	; 0x0a
    103c:	89 87       	std	Y+9, r24	; 0x09
    103e:	ef 81       	ldd	r30, Y+7	; 0x07
    1040:	f8 85       	ldd	r31, Y+8	; 0x08
    1042:	00 82       	st	Z, r0
    1044:	8f 81       	ldd	r24, Y+7	; 0x07
    1046:	98 85       	ldd	r25, Y+8	; 0x08
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	98 87       	std	Y+8, r25	; 0x08
    104c:	8f 83       	std	Y+7, r24	; 0x07
    104e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1050:	91 50       	subi	r25, 0x01	; 1
    1052:	9b 87       	std	Y+11, r25	; 0x0b
    1054:	eb 85       	ldd	r30, Y+11	; 0x0b
    1056:	ee 23       	and	r30, r30
    1058:	51 f7       	brne	.-44     	; 0x102e <close_door+0x2c>
	Timer1_init(&timer1_configurations);
    105a:	ce 01       	movw	r24, r28
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <Timer1_init>
	seconds=0;
    1062:	10 92 76 01 	sts	0x0176, r1
	LCD_displayString("Door Is Locking");
    1066:	8c e7       	ldi	r24, 0x7C	; 124
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
	while(seconds !=15)
    106e:	80 91 76 01 	lds	r24, 0x0176
    1072:	8f 30       	cpi	r24, 0x0F	; 15
    1074:	e1 f7       	brne	.-8      	; 0x106e <close_door+0x6c>
	{
	}
	Timer1_deInit();
    1076:	0e 94 d6 16 	call	0x2dac	; 0x2dac <Timer1_deInit>
}
    107a:	2b 96       	adiw	r28, 0x0b	; 11
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <door_operation>:
 * this function call 3 functions open_door(), hold_door()and close_door()
 * at the end of the function
 * receives DONE_DOOR_OPERATION macro from the Control_ECU to understand that the Control_ECU done the operation
 */
void door_operation(void)
{
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
	open_door();
    1094:	0e 94 77 07 	call	0xeee	; 0xeee <open_door>
	hold_door();
    1098:	0e 94 bc 07 	call	0xf78	; 0xf78 <hold_door>
	close_door();
    109c:	0e 94 01 08 	call	0x1002	; 0x1002 <close_door>

	sync_recive();
    10a0:	0e 94 73 06 	call	0xce6	; 0xce6 <sync_recive>
	while(UART_recieveByte()!= DONE_DOOR_OPERATION);
    10a4:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <UART_recieveByte>
    10a8:	8c 3f       	cpi	r24, 0xFC	; 252
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <door_operation+0x18>
	LCD_clearScreen();
    10ac:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
}
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <system_locked>:
 *  and the saytem has no input during this period
 *
 */

void system_locked(void)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	2b 97       	sbiw	r28, 0x0b	; 11
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    10ca:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
	Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
    10ce:	ce 01       	movw	r24, r28
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	98 87       	std	Y+8, r25	; 0x08
    10d4:	8f 83       	std	Y+7, r24	; 0x07
    10d6:	ef e6       	ldi	r30, 0x6F	; 111
    10d8:	f1 e0       	ldi	r31, 0x01	; 1
    10da:	fa 87       	std	Y+10, r31	; 0x0a
    10dc:	e9 87       	std	Y+9, r30	; 0x09
    10de:	f6 e0       	ldi	r31, 0x06	; 6
    10e0:	fb 87       	std	Y+11, r31	; 0x0b
    10e2:	e9 85       	ldd	r30, Y+9	; 0x09
    10e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    10e6:	00 80       	ld	r0, Z
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	9a 87       	std	Y+10, r25	; 0x0a
    10f0:	89 87       	std	Y+9, r24	; 0x09
    10f2:	ef 81       	ldd	r30, Y+7	; 0x07
    10f4:	f8 85       	ldd	r31, Y+8	; 0x08
    10f6:	00 82       	st	Z, r0
    10f8:	8f 81       	ldd	r24, Y+7	; 0x07
    10fa:	98 85       	ldd	r25, Y+8	; 0x08
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	98 87       	std	Y+8, r25	; 0x08
    1100:	8f 83       	std	Y+7, r24	; 0x07
    1102:	9b 85       	ldd	r25, Y+11	; 0x0b
    1104:	91 50       	subi	r25, 0x01	; 1
    1106:	9b 87       	std	Y+11, r25	; 0x0b
    1108:	eb 85       	ldd	r30, Y+11	; 0x0b
    110a:	ee 23       	and	r30, r30
    110c:	51 f7       	brne	.-44     	; 0x10e2 <system_locked+0x2c>
	Timer1_init(&timer1_configurations);
    110e:	ce 01       	movw	r24, r28
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	0e 94 84 16 	call	0x2d08	; 0x2d08 <Timer1_init>
	seconds=0;
    1116:	10 92 76 01 	sts	0x0176, r1
	LCD_moveCursor(0,5);
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	65 e0       	ldi	r22, 0x05	; 5
    111e:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
	LCD_displayString("WARNING");
    1122:	8c e8       	ldi	r24, 0x8C	; 140
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
	LCD_moveCursor(1,1);
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
	LCD_displayString("WRONG PASSWORD");
    1132:	84 e9       	ldi	r24, 0x94	; 148
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
	while(seconds !=60)
    113a:	80 91 76 01 	lds	r24, 0x0176
    113e:	8c 33       	cpi	r24, 0x3C	; 60
    1140:	e1 f7       	brne	.-8      	; 0x113a <system_locked+0x84>
	{
	}
	LCD_clearScreen();
    1142:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
	seconds=0;
    1146:	10 92 76 01 	sts	0x0176, r1
	LCD_displayString("SYSTEM LOCKED");
    114a:	83 ea       	ldi	r24, 0xA3	; 163
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
	LCD_moveCursor(1,0);
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
	LCD_displayString("FOR 1 MIN");
    115a:	81 eb       	ldi	r24, 0xB1	; 177
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
	while(seconds !=60)
    1162:	80 91 76 01 	lds	r24, 0x0176
    1166:	8c 33       	cpi	r24, 0x3C	; 60
    1168:	e1 f7       	brne	.-8      	; 0x1162 <system_locked+0xac>
	{
	}
	LCD_clearScreen();
    116a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
	Timer1_deInit();
    116e:	0e 94 d6 16 	call	0x2dac	; 0x2dac <Timer1_deInit>
}
    1172:	2b 96       	adiw	r28, 0x0b	; 11
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <display_matched_on_lcd>:
/*
 * Description:
 * This function prints "MATCHED PASSWORDS" in lcd
 */
void display_matched_on_lcd(void)
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	2e 97       	sbiw	r28, 0x0e	; 14
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1198:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
	LCD_moveCursor(0,4);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	64 e0       	ldi	r22, 0x04	; 4
    11a0:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
	LCD_displayString("MATCHED");
    11a4:	8b eb       	ldi	r24, 0xBB	; 187
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
	LCD_moveCursor(1,3);
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	63 e0       	ldi	r22, 0x03	; 3
    11b0:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
	LCD_displayString("PASSWORDS");
    11b4:	83 ec       	ldi	r24, 0xC3	; 195
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	aa e7       	ldi	r26, 0x7A	; 122
    11c2:	b4 e4       	ldi	r27, 0x44	; 68
    11c4:	8b 87       	std	Y+11, r24	; 0x0b
    11c6:	9c 87       	std	Y+12, r25	; 0x0c
    11c8:	ad 87       	std	Y+13, r26	; 0x0d
    11ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	4a ef       	ldi	r20, 0xFA	; 250
    11da:	54 e4       	ldi	r21, 0x44	; 68
    11dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	8f 83       	std	Y+7, r24	; 0x07
    11e6:	98 87       	std	Y+8, r25	; 0x08
    11e8:	a9 87       	std	Y+9, r26	; 0x09
    11ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ec:	6f 81       	ldd	r22, Y+7	; 0x07
    11ee:	78 85       	ldd	r23, Y+8	; 0x08
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e8       	ldi	r20, 0x80	; 128
    11fa:	5f e3       	ldi	r21, 0x3F	; 63
    11fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1200:	88 23       	and	r24, r24
    1202:	2c f4       	brge	.+10     	; 0x120e <display_matched_on_lcd+0x8a>
		__ticks = 1;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9e 83       	std	Y+6, r25	; 0x06
    120a:	8d 83       	std	Y+5, r24	; 0x05
    120c:	3f c0       	rjmp	.+126    	; 0x128c <display_matched_on_lcd+0x108>
	else if (__tmp > 65535)
    120e:	6f 81       	ldd	r22, Y+7	; 0x07
    1210:	78 85       	ldd	r23, Y+8	; 0x08
    1212:	89 85       	ldd	r24, Y+9	; 0x09
    1214:	9a 85       	ldd	r25, Y+10	; 0x0a
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	3f ef       	ldi	r19, 0xFF	; 255
    121a:	4f e7       	ldi	r20, 0x7F	; 127
    121c:	57 e4       	ldi	r21, 0x47	; 71
    121e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1222:	18 16       	cp	r1, r24
    1224:	4c f5       	brge	.+82     	; 0x1278 <display_matched_on_lcd+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1226:	6b 85       	ldd	r22, Y+11	; 0x0b
    1228:	7c 85       	ldd	r23, Y+12	; 0x0c
    122a:	8d 85       	ldd	r24, Y+13	; 0x0d
    122c:	9e 85       	ldd	r25, Y+14	; 0x0e
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e2       	ldi	r20, 0x20	; 32
    1234:	51 e4       	ldi	r21, 0x41	; 65
    1236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	bc 01       	movw	r22, r24
    1240:	cd 01       	movw	r24, r26
    1242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	9e 83       	std	Y+6, r25	; 0x06
    124c:	8d 83       	std	Y+5, r24	; 0x05
    124e:	0f c0       	rjmp	.+30     	; 0x126e <display_matched_on_lcd+0xea>
    1250:	88 ec       	ldi	r24, 0xC8	; 200
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	f1 f7       	brne	.-4      	; 0x125c <display_matched_on_lcd+0xd8>
    1260:	9c 83       	std	Y+4, r25	; 0x04
    1262:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	9e 81       	ldd	r25, Y+6	; 0x06
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	69 f7       	brne	.-38     	; 0x1250 <display_matched_on_lcd+0xcc>
    1276:	14 c0       	rjmp	.+40     	; 0x12a0 <display_matched_on_lcd+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1278:	6f 81       	ldd	r22, Y+7	; 0x07
    127a:	78 85       	ldd	r23, Y+8	; 0x08
    127c:	89 85       	ldd	r24, Y+9	; 0x09
    127e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	9e 83       	std	Y+6, r25	; 0x06
    128a:	8d 83       	std	Y+5, r24	; 0x05
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	9a 83       	std	Y+2, r25	; 0x02
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	f1 f7       	brne	.-4      	; 0x1298 <display_matched_on_lcd+0x114>
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
    12a0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
}
    12a4:	2e 96       	adiw	r28, 0x0e	; 14
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <display_unmatched_on_lcd>:
/*
 * Description:
 * This function prints "UNMATCHED PASSWORDS" in lcd
 */
void display_unmatched_on_lcd(void)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	2e 97       	sbiw	r28, 0x0e	; 14
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    12ca:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
	LCD_moveCursor(0,3);
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	63 e0       	ldi	r22, 0x03	; 3
    12d2:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
	LCD_displayString("UNMATCHED");
    12d6:	8d ec       	ldi	r24, 0xCD	; 205
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
	LCD_moveCursor(1,3);
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	63 e0       	ldi	r22, 0x03	; 3
    12e2:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
	LCD_displayString("PASSWORDS");
    12e6:	83 ec       	ldi	r24, 0xC3	; 195
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	aa e7       	ldi	r26, 0x7A	; 122
    12f4:	b4 e4       	ldi	r27, 0x44	; 68
    12f6:	8b 87       	std	Y+11, r24	; 0x0b
    12f8:	9c 87       	std	Y+12, r25	; 0x0c
    12fa:	ad 87       	std	Y+13, r26	; 0x0d
    12fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1300:	7c 85       	ldd	r23, Y+12	; 0x0c
    1302:	8d 85       	ldd	r24, Y+13	; 0x0d
    1304:	9e 85       	ldd	r25, Y+14	; 0x0e
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	4a ef       	ldi	r20, 0xFA	; 250
    130c:	54 e4       	ldi	r21, 0x44	; 68
    130e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	8f 83       	std	Y+7, r24	; 0x07
    1318:	98 87       	std	Y+8, r25	; 0x08
    131a:	a9 87       	std	Y+9, r26	; 0x09
    131c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    131e:	6f 81       	ldd	r22, Y+7	; 0x07
    1320:	78 85       	ldd	r23, Y+8	; 0x08
    1322:	89 85       	ldd	r24, Y+9	; 0x09
    1324:	9a 85       	ldd	r25, Y+10	; 0x0a
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e8       	ldi	r20, 0x80	; 128
    132c:	5f e3       	ldi	r21, 0x3F	; 63
    132e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1332:	88 23       	and	r24, r24
    1334:	2c f4       	brge	.+10     	; 0x1340 <display_unmatched_on_lcd+0x8a>
		__ticks = 1;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9e 83       	std	Y+6, r25	; 0x06
    133c:	8d 83       	std	Y+5, r24	; 0x05
    133e:	3f c0       	rjmp	.+126    	; 0x13be <display_unmatched_on_lcd+0x108>
	else if (__tmp > 65535)
    1340:	6f 81       	ldd	r22, Y+7	; 0x07
    1342:	78 85       	ldd	r23, Y+8	; 0x08
    1344:	89 85       	ldd	r24, Y+9	; 0x09
    1346:	9a 85       	ldd	r25, Y+10	; 0x0a
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	3f ef       	ldi	r19, 0xFF	; 255
    134c:	4f e7       	ldi	r20, 0x7F	; 127
    134e:	57 e4       	ldi	r21, 0x47	; 71
    1350:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1354:	18 16       	cp	r1, r24
    1356:	4c f5       	brge	.+82     	; 0x13aa <display_unmatched_on_lcd+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1358:	6b 85       	ldd	r22, Y+11	; 0x0b
    135a:	7c 85       	ldd	r23, Y+12	; 0x0c
    135c:	8d 85       	ldd	r24, Y+13	; 0x0d
    135e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e2       	ldi	r20, 0x20	; 32
    1366:	51 e4       	ldi	r21, 0x41	; 65
    1368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9e 83       	std	Y+6, r25	; 0x06
    137e:	8d 83       	std	Y+5, r24	; 0x05
    1380:	0f c0       	rjmp	.+30     	; 0x13a0 <display_unmatched_on_lcd+0xea>
    1382:	88 ec       	ldi	r24, 0xC8	; 200
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9c 83       	std	Y+4, r25	; 0x04
    1388:	8b 83       	std	Y+3, r24	; 0x03
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	9c 81       	ldd	r25, Y+4	; 0x04
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <display_unmatched_on_lcd+0xd8>
    1392:	9c 83       	std	Y+4, r25	; 0x04
    1394:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1396:	8d 81       	ldd	r24, Y+5	; 0x05
    1398:	9e 81       	ldd	r25, Y+6	; 0x06
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	9e 83       	std	Y+6, r25	; 0x06
    139e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	69 f7       	brne	.-38     	; 0x1382 <display_unmatched_on_lcd+0xcc>
    13a8:	14 c0       	rjmp	.+40     	; 0x13d2 <display_unmatched_on_lcd+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13aa:	6f 81       	ldd	r22, Y+7	; 0x07
    13ac:	78 85       	ldd	r23, Y+8	; 0x08
    13ae:	89 85       	ldd	r24, Y+9	; 0x09
    13b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	8d 83       	std	Y+5, r24	; 0x05
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	9a 83       	std	Y+2, r25	; 0x02
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <display_unmatched_on_lcd+0x114>
    13ce:	9a 83       	std	Y+2, r25	; 0x02
    13d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
    13d2:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
}
    13d6:	2e 96       	adiw	r28, 0x0e	; 14
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <main>:





int main (void){
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	ee 97       	sbiw	r28, 0x3e	; 62
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
	initialization();
    13fc:	0e 94 af 05 	call	0xb5e	; 0xb5e <initialization>
	uint8 pass_one[5];  //array to save the first time the user enters a password and sent it to Control_ECU
	uint8 pass_two[5];  //array to save the second time the user enters a password and sent it to Control_ECU
	uint8 pass_three[5];//array to save the any more time the user enters password to check and sent it to Control_ECU
	uint8 flag;  //flag to start from CREATE_SYSTEM_PASSWORD or MENU

	sync_send();               //GETTING UART READY
    1400:	0e 94 65 06 	call	0xcca	; 0xcca <sync_send>
	{
		/*
		 *  Waits to receive a flag from Control_ECU indicating the next action.
         *  Syncs communication and stores the flag in 'flag' variable.
		 */
		sync_recive();   // start receive a MACRO
    1404:	0e 94 73 06 	call	0xce6	; 0xce6 <sync_recive>
		flag = UART_recieveByte();
    1408:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <UART_recieveByte>
    140c:	8f a7       	std	Y+47, r24	; 0x2f

		if (flag == CREATE_SYSTEM_PASSWORD)
    140e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1410:	8a 3f       	cpi	r24, 0xFA	; 250
    1412:	09 f0       	breq	.+2      	; 0x1416 <main+0x2e>
    1414:	c1 c0       	rjmp	.+386    	; 0x1598 <main+0x1b0>
		{
			uint8 matched_or_not;

			LCD_clearScreen();
    1416:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
			LCD_moveCursor(0,3);
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	63 e0       	ldi	r22, 0x03	; 3
    141e:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
			LCD_displayString("CREATE NEW");
    1422:	87 ed       	ldi	r24, 0xD7	; 215
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
			LCD_moveCursor(1,1);
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	61 e0       	ldi	r22, 0x01	; 1
    142e:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
			LCD_displayString("SYSTEM PASSWORD");
    1432:	82 ee       	ldi	r24, 0xE2	; 226
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e8       	ldi	r25, 0x80	; 128
    143e:	ab eb       	ldi	r26, 0xBB	; 187
    1440:	b4 e4       	ldi	r27, 0x44	; 68
    1442:	8f a3       	std	Y+39, r24	; 0x27
    1444:	98 a7       	std	Y+40, r25	; 0x28
    1446:	a9 a7       	std	Y+41, r26	; 0x29
    1448:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144a:	6f a1       	ldd	r22, Y+39	; 0x27
    144c:	78 a5       	ldd	r23, Y+40	; 0x28
    144e:	89 a5       	ldd	r24, Y+41	; 0x29
    1450:	9a a5       	ldd	r25, Y+42	; 0x2a
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	4a ef       	ldi	r20, 0xFA	; 250
    1458:	54 e4       	ldi	r21, 0x44	; 68
    145a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	8b a3       	std	Y+35, r24	; 0x23
    1464:	9c a3       	std	Y+36, r25	; 0x24
    1466:	ad a3       	std	Y+37, r26	; 0x25
    1468:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    146a:	6b a1       	ldd	r22, Y+35	; 0x23
    146c:	7c a1       	ldd	r23, Y+36	; 0x24
    146e:	8d a1       	ldd	r24, Y+37	; 0x25
    1470:	9e a1       	ldd	r25, Y+38	; 0x26
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    147e:	88 23       	and	r24, r24
    1480:	2c f4       	brge	.+10     	; 0x148c <main+0xa4>
		__ticks = 1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9a a3       	std	Y+34, r25	; 0x22
    1488:	89 a3       	std	Y+33, r24	; 0x21
    148a:	3f c0       	rjmp	.+126    	; 0x150a <main+0x122>
	else if (__tmp > 65535)
    148c:	6b a1       	ldd	r22, Y+35	; 0x23
    148e:	7c a1       	ldd	r23, Y+36	; 0x24
    1490:	8d a1       	ldd	r24, Y+37	; 0x25
    1492:	9e a1       	ldd	r25, Y+38	; 0x26
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	4f e7       	ldi	r20, 0x7F	; 127
    149a:	57 e4       	ldi	r21, 0x47	; 71
    149c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	4c f5       	brge	.+82     	; 0x14f6 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a4:	6f a1       	ldd	r22, Y+39	; 0x27
    14a6:	78 a5       	ldd	r23, Y+40	; 0x28
    14a8:	89 a5       	ldd	r24, Y+41	; 0x29
    14aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e2       	ldi	r20, 0x20	; 32
    14b2:	51 e4       	ldi	r21, 0x41	; 65
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9a a3       	std	Y+34, r25	; 0x22
    14ca:	89 a3       	std	Y+33, r24	; 0x21
    14cc:	0f c0       	rjmp	.+30     	; 0x14ec <main+0x104>
    14ce:	88 ec       	ldi	r24, 0xC8	; 200
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	98 a3       	std	Y+32, r25	; 0x20
    14d4:	8f 8f       	std	Y+31, r24	; 0x1f
    14d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14d8:	98 a1       	ldd	r25, Y+32	; 0x20
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <main+0xf2>
    14de:	98 a3       	std	Y+32, r25	; 0x20
    14e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e2:	89 a1       	ldd	r24, Y+33	; 0x21
    14e4:	9a a1       	ldd	r25, Y+34	; 0x22
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	9a a3       	std	Y+34, r25	; 0x22
    14ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ec:	89 a1       	ldd	r24, Y+33	; 0x21
    14ee:	9a a1       	ldd	r25, Y+34	; 0x22
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	69 f7       	brne	.-38     	; 0x14ce <main+0xe6>
    14f4:	14 c0       	rjmp	.+40     	; 0x151e <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f6:	6b a1       	ldd	r22, Y+35	; 0x23
    14f8:	7c a1       	ldd	r23, Y+36	; 0x24
    14fa:	8d a1       	ldd	r24, Y+37	; 0x25
    14fc:	9e a1       	ldd	r25, Y+38	; 0x26
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	9a a3       	std	Y+34, r25	; 0x22
    1508:	89 a3       	std	Y+33, r24	; 0x21
    150a:	89 a1       	ldd	r24, Y+33	; 0x21
    150c:	9a a1       	ldd	r25, Y+34	; 0x22
    150e:	9e 8f       	std	Y+30, r25	; 0x1e
    1510:	8d 8f       	std	Y+29, r24	; 0x1d
    1512:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1514:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <main+0x12e>
    151a:	9e 8f       	std	Y+30, r25	; 0x1e
    151c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1500);


			LCD_clearScreen();
    151e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
			LCD_displayString("Plz enter pass:");
    1522:	82 ef       	ldi	r24, 0xF2	; 242
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
			LCD_moveCursor(1,0);
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
			entering_password(pass_one);
    1532:	ce 01       	movw	r24, r28
    1534:	c0 96       	adiw	r24, 0x30	; 48
    1536:	0e 94 cc 06 	call	0xd98	; 0xd98 <entering_password>
			send_pass(pass_one);
    153a:	ce 01       	movw	r24, r28
    153c:	c0 96       	adiw	r24, 0x30	; 48
    153e:	0e 94 81 06 	call	0xd02	; 0xd02 <send_pass>

			LCD_clearScreen();
    1542:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
			LCD_displayString("plz re-enter the");
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
			LCD_moveCursor(1,0);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
			LCD_displayString("same pass :");
    1556:	83 e1       	ldi	r24, 0x13	; 19
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
			entering_password(pass_two);
    155e:	ce 01       	movw	r24, r28
    1560:	c5 96       	adiw	r24, 0x35	; 53
    1562:	0e 94 cc 06 	call	0xd98	; 0xd98 <entering_password>
			send_pass(pass_two);
    1566:	ce 01       	movw	r24, r28
    1568:	c5 96       	adiw	r24, 0x35	; 53
    156a:	0e 94 81 06 	call	0xd02	; 0xd02 <send_pass>
			sync_recive(); // sync start receive matched or unmatched bit
    156e:	0e 94 73 06 	call	0xce6	; 0xce6 <sync_recive>
			matched_or_not = UART_recieveByte();
    1572:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <UART_recieveByte>
    1576:	8e a7       	std	Y+46, r24	; 0x2e

			if (matched_or_not == MATCHED_PASSWORDS)
    1578:	8e a5       	ldd	r24, Y+46	; 0x2e
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	41 f4       	brne	.+16     	; 0x158e <main+0x1a6>
			{
				//print matched passwords on the lcd
				display_matched_on_lcd();
    157e:	0e 94 c2 08 	call	0x1184	; 0x1184 <display_matched_on_lcd>


				sync_recive();   // start receive a MACRO which is MENU
    1582:	0e 94 73 06 	call	0xce6	; 0xce6 <sync_recive>
				flag = UART_recieveByte();
    1586:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <UART_recieveByte>
    158a:	8f a7       	std	Y+47, r24	; 0x2f
    158c:	05 c0       	rjmp	.+10     	; 0x1598 <main+0x1b0>
			}
			else if (matched_or_not == UNMATCHED_PASSWORDS)
    158e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1590:	88 23       	and	r24, r24
    1592:	11 f4       	brne	.+4      	; 0x1598 <main+0x1b0>
			{
				//print UNmatched passwords on the lcd
				display_unmatched_on_lcd();
    1594:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <display_unmatched_on_lcd>

				// if not matched start while and wait for the flag
			}
		}

		if (flag == MENU)
    1598:	8f a5       	ldd	r24, Y+47	; 0x2f
    159a:	8b 3f       	cpi	r24, 0xFB	; 251
    159c:	09 f0       	breq	.+2      	; 0x15a0 <main+0x1b8>
    159e:	32 cf       	rjmp	.-412    	; 0x1404 <main+0x1c>
		{
			uint8 open_or_change;
			LCD_clearScreen();
    15a0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
    15a4:	8f e1       	ldi	r24, 0x1F	; 31
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
			LCD_moveCursor(1,0);
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
			LCD_displayString("- : Change Pass");
    15b4:	8d e2       	ldi	r24, 0x2D	; 45
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
			open_or_change = KEYPAD_getPressedKey();
    15bc:	0e 94 2a 0c 	call	0x1854	; 0x1854 <KEYPAD_getPressedKey>
    15c0:	8d a7       	std	Y+45, r24	; 0x2d

			sync_send();
    15c2:	0e 94 65 06 	call	0xcca	; 0xcca <sync_send>
			UART_sendByte(open_or_change); //sent the pressed key if + or - to Control_ECU
    15c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    15c8:	0e 94 7e 17 	call	0x2efc	; 0x2efc <UART_sendByte>

			if (open_or_change == '+')
    15cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    15ce:	8b 32       	cpi	r24, 0x2B	; 43
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <main+0x1ec>
    15d2:	9f c0       	rjmp	.+318    	; 0x1712 <main+0x32a>
			{

				uint8 check;
				while(1)
				{
					LCD_clearScreen();
    15d4:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
					LCD_displayString("Plz enter pass:");
    15d8:	82 ef       	ldi	r24, 0xF2	; 242
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
					LCD_moveCursor(1,0);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
					entering_password(pass_three);
    15e8:	ce 01       	movw	r24, r28
    15ea:	ca 96       	adiw	r24, 0x3a	; 58
    15ec:	0e 94 cc 06 	call	0xd98	; 0xd98 <entering_password>
					send_pass(pass_three);
    15f0:	ce 01       	movw	r24, r28
    15f2:	ca 96       	adiw	r24, 0x3a	; 58
    15f4:	0e 94 81 06 	call	0xd02	; 0xd02 <send_pass>


					sync_recive(); // sync start receive matched or unmatched bit
    15f8:	0e 94 73 06 	call	0xce6	; 0xce6 <sync_recive>
					check = UART_recieveByte();
    15fc:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <UART_recieveByte>
    1600:	8c a7       	std	Y+44, r24	; 0x2c

					if (check == MATCHED_PASSWORDS)
    1602:	8c a5       	ldd	r24, Y+44	; 0x2c
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	19 f4       	brne	.+6      	; 0x160e <main+0x226>
						/*
						 *  if matched do Door Operation and then break
						 *  and start the main while(1) and wait for the flag from Control_ECU
						 *  which will be MENU again
					     */
						door_operation();
    1608:	0e 94 46 08 	call	0x108c	; 0x108c <door_operation>
    160c:	fb ce       	rjmp	.-522    	; 0x1404 <main+0x1c>
						break;
					}
					else if (check== LOCKED)
    160e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1610:	8d 3f       	cpi	r24, 0xFD	; 253
    1612:	19 f4       	brne	.+6      	; 0x161a <main+0x232>
						/*
						 *  if LOCKED do system locked Operation
						 * and start the main while(1) and wait for the flag from Control_ECU
						 *  which will be MENU again
					     */
						system_locked();
    1614:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <system_locked>
    1618:	f5 ce       	rjmp	.-534    	; 0x1404 <main+0x1c>
						break;
					}
					else if (check== UNMATCHED_PASSWORDS)
    161a:	8c a5       	ldd	r24, Y+44	; 0x2c
    161c:	88 23       	and	r24, r24
    161e:	d1 f6       	brne	.-76     	; 0x15d4 <main+0x1ec>
					{
						LCD_clearScreen();
    1620:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
						LCD_displayString("please try again");
    1624:	8d e3       	ldi	r24, 0x3D	; 61
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	aa e7       	ldi	r26, 0x7A	; 122
    1632:	b4 e4       	ldi	r27, 0x44	; 68
    1634:	89 8f       	std	Y+25, r24	; 0x19
    1636:	9a 8f       	std	Y+26, r25	; 0x1a
    1638:	ab 8f       	std	Y+27, r26	; 0x1b
    163a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163c:	69 8d       	ldd	r22, Y+25	; 0x19
    163e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1640:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1642:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	4a ef       	ldi	r20, 0xFA	; 250
    164a:	54 e4       	ldi	r21, 0x44	; 68
    164c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	8d 8b       	std	Y+21, r24	; 0x15
    1656:	9e 8b       	std	Y+22, r25	; 0x16
    1658:	af 8b       	std	Y+23, r26	; 0x17
    165a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    165c:	6d 89       	ldd	r22, Y+21	; 0x15
    165e:	7e 89       	ldd	r23, Y+22	; 0x16
    1660:	8f 89       	ldd	r24, Y+23	; 0x17
    1662:	98 8d       	ldd	r25, Y+24	; 0x18
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	5f e3       	ldi	r21, 0x3F	; 63
    166c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1670:	88 23       	and	r24, r24
    1672:	2c f4       	brge	.+10     	; 0x167e <main+0x296>
		__ticks = 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9c 8b       	std	Y+20, r25	; 0x14
    167a:	8b 8b       	std	Y+19, r24	; 0x13
    167c:	3f c0       	rjmp	.+126    	; 0x16fc <main+0x314>
	else if (__tmp > 65535)
    167e:	6d 89       	ldd	r22, Y+21	; 0x15
    1680:	7e 89       	ldd	r23, Y+22	; 0x16
    1682:	8f 89       	ldd	r24, Y+23	; 0x17
    1684:	98 8d       	ldd	r25, Y+24	; 0x18
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	4f e7       	ldi	r20, 0x7F	; 127
    168c:	57 e4       	ldi	r21, 0x47	; 71
    168e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1692:	18 16       	cp	r1, r24
    1694:	4c f5       	brge	.+82     	; 0x16e8 <main+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1696:	69 8d       	ldd	r22, Y+25	; 0x19
    1698:	7a 8d       	ldd	r23, Y+26	; 0x1a
    169a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    169c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e2       	ldi	r20, 0x20	; 32
    16a4:	51 e4       	ldi	r21, 0x41	; 65
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	bc 01       	movw	r22, r24
    16b0:	cd 01       	movw	r24, r26
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9c 8b       	std	Y+20, r25	; 0x14
    16bc:	8b 8b       	std	Y+19, r24	; 0x13
    16be:	0f c0       	rjmp	.+30     	; 0x16de <main+0x2f6>
    16c0:	88 ec       	ldi	r24, 0xC8	; 200
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9a 8b       	std	Y+18, r25	; 0x12
    16c6:	89 8b       	std	Y+17, r24	; 0x11
    16c8:	89 89       	ldd	r24, Y+17	; 0x11
    16ca:	9a 89       	ldd	r25, Y+18	; 0x12
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <main+0x2e4>
    16d0:	9a 8b       	std	Y+18, r25	; 0x12
    16d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d4:	8b 89       	ldd	r24, Y+19	; 0x13
    16d6:	9c 89       	ldd	r25, Y+20	; 0x14
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	9c 8b       	std	Y+20, r25	; 0x14
    16dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16de:	8b 89       	ldd	r24, Y+19	; 0x13
    16e0:	9c 89       	ldd	r25, Y+20	; 0x14
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	69 f7       	brne	.-38     	; 0x16c0 <main+0x2d8>
    16e6:	76 cf       	rjmp	.-276    	; 0x15d4 <main+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e8:	6d 89       	ldd	r22, Y+21	; 0x15
    16ea:	7e 89       	ldd	r23, Y+22	; 0x16
    16ec:	8f 89       	ldd	r24, Y+23	; 0x17
    16ee:	98 8d       	ldd	r25, Y+24	; 0x18
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	9c 8b       	std	Y+20, r25	; 0x14
    16fa:	8b 8b       	std	Y+19, r24	; 0x13
    16fc:	8b 89       	ldd	r24, Y+19	; 0x13
    16fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1700:	98 8b       	std	Y+16, r25	; 0x10
    1702:	8f 87       	std	Y+15, r24	; 0x0f
    1704:	8f 85       	ldd	r24, Y+15	; 0x0f
    1706:	98 89       	ldd	r25, Y+16	; 0x10
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <main+0x320>
    170c:	98 8b       	std	Y+16, r25	; 0x10
    170e:	8f 87       	std	Y+15, r24	; 0x0f
    1710:	61 cf       	rjmp	.-318    	; 0x15d4 <main+0x1ec>
						_delay_ms(1000);
					}
				}

			}
			else if (open_or_change == '-')
    1712:	8d a5       	ldd	r24, Y+45	; 0x2d
    1714:	8d 32       	cpi	r24, 0x2D	; 45
    1716:	09 f0       	breq	.+2      	; 0x171a <main+0x332>
    1718:	75 ce       	rjmp	.-790    	; 0x1404 <main+0x1c>
			{
				uint8 check;
				while(1)
				{
					LCD_clearScreen();
    171a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
					LCD_displayString("Plz enter pass:");
    171e:	82 ef       	ldi	r24, 0xF2	; 242
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
					LCD_moveCursor(1,0);
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
					entering_password(pass_three);
    172e:	ce 01       	movw	r24, r28
    1730:	ca 96       	adiw	r24, 0x3a	; 58
    1732:	0e 94 cc 06 	call	0xd98	; 0xd98 <entering_password>
					send_pass(pass_three);
    1736:	ce 01       	movw	r24, r28
    1738:	ca 96       	adiw	r24, 0x3a	; 58
    173a:	0e 94 81 06 	call	0xd02	; 0xd02 <send_pass>

					sync_recive(); // sync start receive matched or unmatched bit
    173e:	0e 94 73 06 	call	0xce6	; 0xce6 <sync_recive>
					check = UART_recieveByte();
    1742:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <UART_recieveByte>
    1746:	8b a7       	std	Y+43, r24	; 0x2b

					if (check == MATCHED_PASSWORDS)
    1748:	8b a5       	ldd	r24, Y+43	; 0x2b
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	09 f4       	brne	.+2      	; 0x1750 <main+0x368>
    174e:	5a ce       	rjmp	.-844    	; 0x1404 <main+0x1c>
						 *  if  MATCHED_PASSWORDS start the main while(1) from begging and
						 *  wait for the flag from Control_ECU which will be CREATE_SYSTEM_PASSWORD
						 */
						break;
					}
					else if (check== LOCKED)
    1750:	8b a5       	ldd	r24, Y+43	; 0x2b
    1752:	8d 3f       	cpi	r24, 0xFD	; 253
    1754:	19 f4       	brne	.+6      	; 0x175c <main+0x374>
						/*
						 *  if  LOCKED do the system locked operation
						 *   start the while from begging and
						 *  wait for the flag from Control_ECU which will be MENU
						 */
						system_locked();
    1756:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <system_locked>
    175a:	54 ce       	rjmp	.-856    	; 0x1404 <main+0x1c>
						break;
					}
					else if (check== UNMATCHED_PASSWORDS)
    175c:	8b a5       	ldd	r24, Y+43	; 0x2b
    175e:	88 23       	and	r24, r24
    1760:	e1 f6       	brne	.-72     	; 0x171a <main+0x332>
					{
						LCD_clearScreen();
    1762:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_clearScreen>
						LCD_displayString("please try again");
    1766:	8d e3       	ldi	r24, 0x3D	; 61
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	aa e7       	ldi	r26, 0x7A	; 122
    1774:	b4 e4       	ldi	r27, 0x44	; 68
    1776:	8b 87       	std	Y+11, r24	; 0x0b
    1778:	9c 87       	std	Y+12, r25	; 0x0c
    177a:	ad 87       	std	Y+13, r26	; 0x0d
    177c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1780:	7c 85       	ldd	r23, Y+12	; 0x0c
    1782:	8d 85       	ldd	r24, Y+13	; 0x0d
    1784:	9e 85       	ldd	r25, Y+14	; 0x0e
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	4a ef       	ldi	r20, 0xFA	; 250
    178c:	54 e4       	ldi	r21, 0x44	; 68
    178e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	8f 83       	std	Y+7, r24	; 0x07
    1798:	98 87       	std	Y+8, r25	; 0x08
    179a:	a9 87       	std	Y+9, r26	; 0x09
    179c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    179e:	6f 81       	ldd	r22, Y+7	; 0x07
    17a0:	78 85       	ldd	r23, Y+8	; 0x08
    17a2:	89 85       	ldd	r24, Y+9	; 0x09
    17a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e8       	ldi	r20, 0x80	; 128
    17ac:	5f e3       	ldi	r21, 0x3F	; 63
    17ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b2:	88 23       	and	r24, r24
    17b4:	2c f4       	brge	.+10     	; 0x17c0 <main+0x3d8>
		__ticks = 1;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	8d 83       	std	Y+5, r24	; 0x05
    17be:	3f c0       	rjmp	.+126    	; 0x183e <main+0x456>
	else if (__tmp > 65535)
    17c0:	6f 81       	ldd	r22, Y+7	; 0x07
    17c2:	78 85       	ldd	r23, Y+8	; 0x08
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	3f ef       	ldi	r19, 0xFF	; 255
    17cc:	4f e7       	ldi	r20, 0x7F	; 127
    17ce:	57 e4       	ldi	r21, 0x47	; 71
    17d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d4:	18 16       	cp	r1, r24
    17d6:	4c f5       	brge	.+82     	; 0x182a <main+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17da:	7c 85       	ldd	r23, Y+12	; 0x0c
    17dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17de:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e2       	ldi	r20, 0x20	; 32
    17e6:	51 e4       	ldi	r21, 0x41	; 65
    17e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	bc 01       	movw	r22, r24
    17f2:	cd 01       	movw	r24, r26
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	9e 83       	std	Y+6, r25	; 0x06
    17fe:	8d 83       	std	Y+5, r24	; 0x05
    1800:	0f c0       	rjmp	.+30     	; 0x1820 <main+0x438>
    1802:	88 ec       	ldi	r24, 0xC8	; 200
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <main+0x426>
    1812:	9c 83       	std	Y+4, r25	; 0x04
    1814:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	69 f7       	brne	.-38     	; 0x1802 <main+0x41a>
    1828:	78 cf       	rjmp	.-272    	; 0x171a <main+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182a:	6f 81       	ldd	r22, Y+7	; 0x07
    182c:	78 85       	ldd	r23, Y+8	; 0x08
    182e:	89 85       	ldd	r24, Y+9	; 0x09
    1830:	9a 85       	ldd	r25, Y+10	; 0x0a
    1832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	8d 83       	std	Y+5, r24	; 0x05
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	9e 81       	ldd	r25, Y+6	; 0x06
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <main+0x462>
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	63 cf       	rjmp	.-314    	; 0x171a <main+0x332>

00001854 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	60 97       	sbiw	r28, 0x10	; 16
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	61 e0       	ldi	r22, 0x01	; 1
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	62 e0       	ldi	r22, 0x02	; 2
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	63 e0       	ldi	r22, 0x03	; 3
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	64 e0       	ldi	r22, 0x04	; 4
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	65 e0       	ldi	r22, 0x05	; 5
    189e:	40 e0       	ldi	r20, 0x00	; 0
    18a0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	66 e0       	ldi	r22, 0x06	; 6
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	67 e0       	ldi	r22, 0x07	; 7
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    18b8:	1f 86       	std	Y+15, r1	; 0x0f
    18ba:	ab c0       	rjmp	.+342    	; 0x1a12 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	6f 85       	ldd	r22, Y+15	; 0x0f
    18c0:	41 e0       	ldi	r20, 0x01	; 1
    18c2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	6f 85       	ldd	r22, Y+15	; 0x0f
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    18d0:	18 8a       	std	Y+16, r1	; 0x10
    18d2:	22 c0       	rjmp	.+68     	; 0x1918 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    18d4:	88 89       	ldd	r24, Y+16	; 0x10
    18d6:	98 2f       	mov	r25, r24
    18d8:	9c 5f       	subi	r25, 0xFC	; 252
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	69 2f       	mov	r22, r25
    18de:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <GPIO_readPin>
    18e2:	88 23       	and	r24, r24
    18e4:	b1 f4       	brne	.+44     	; 0x1912 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    18e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e8:	88 2f       	mov	r24, r24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	98 2f       	mov	r25, r24
    18f6:	88 89       	ldd	r24, Y+16	; 0x10
    18f8:	89 0f       	add	r24, r25
    18fa:	8f 5f       	subi	r24, 0xFF	; 255
    18fc:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1900:	60 96       	adiw	r28, 0x10	; 16
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1912:	88 89       	ldd	r24, Y+16	; 0x10
    1914:	8f 5f       	subi	r24, 0xFF	; 255
    1916:	88 8b       	std	Y+16, r24	; 0x10
    1918:	88 89       	ldd	r24, Y+16	; 0x10
    191a:	84 30       	cpi	r24, 0x04	; 4
    191c:	d8 f2       	brcs	.-74     	; 0x18d4 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	6f 85       	ldd	r22, Y+15	; 0x0f
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <GPIO_setupPinDirection>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a0 ea       	ldi	r26, 0xA0	; 160
    192e:	b0 e4       	ldi	r27, 0x40	; 64
    1930:	8b 87       	std	Y+11, r24	; 0x0b
    1932:	9c 87       	std	Y+12, r25	; 0x0c
    1934:	ad 87       	std	Y+13, r26	; 0x0d
    1936:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1938:	6b 85       	ldd	r22, Y+11	; 0x0b
    193a:	7c 85       	ldd	r23, Y+12	; 0x0c
    193c:	8d 85       	ldd	r24, Y+13	; 0x0d
    193e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	4a ef       	ldi	r20, 0xFA	; 250
    1946:	54 e4       	ldi	r21, 0x44	; 68
    1948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	8f 83       	std	Y+7, r24	; 0x07
    1952:	98 87       	std	Y+8, r25	; 0x08
    1954:	a9 87       	std	Y+9, r26	; 0x09
    1956:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1958:	6f 81       	ldd	r22, Y+7	; 0x07
    195a:	78 85       	ldd	r23, Y+8	; 0x08
    195c:	89 85       	ldd	r24, Y+9	; 0x09
    195e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e8       	ldi	r20, 0x80	; 128
    1966:	5f e3       	ldi	r21, 0x3F	; 63
    1968:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    196c:	88 23       	and	r24, r24
    196e:	2c f4       	brge	.+10     	; 0x197a <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
    1978:	3f c0       	rjmp	.+126    	; 0x19f8 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    197a:	6f 81       	ldd	r22, Y+7	; 0x07
    197c:	78 85       	ldd	r23, Y+8	; 0x08
    197e:	89 85       	ldd	r24, Y+9	; 0x09
    1980:	9a 85       	ldd	r25, Y+10	; 0x0a
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	3f ef       	ldi	r19, 0xFF	; 255
    1986:	4f e7       	ldi	r20, 0x7F	; 127
    1988:	57 e4       	ldi	r21, 0x47	; 71
    198a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    198e:	18 16       	cp	r1, r24
    1990:	4c f5       	brge	.+82     	; 0x19e4 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1992:	6b 85       	ldd	r22, Y+11	; 0x0b
    1994:	7c 85       	ldd	r23, Y+12	; 0x0c
    1996:	8d 85       	ldd	r24, Y+13	; 0x0d
    1998:	9e 85       	ldd	r25, Y+14	; 0x0e
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e2       	ldi	r20, 0x20	; 32
    19a0:	51 e4       	ldi	r21, 0x41	; 65
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	bc 01       	movw	r22, r24
    19ac:	cd 01       	movw	r24, r26
    19ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
    19ba:	0f c0       	rjmp	.+30     	; 0x19da <KEYPAD_getPressedKey+0x186>
    19bc:	88 ec       	ldi	r24, 0xC8	; 200
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9c 83       	std	Y+4, r25	; 0x04
    19c2:	8b 83       	std	Y+3, r24	; 0x03
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	9c 81       	ldd	r25, Y+4	; 0x04
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <KEYPAD_getPressedKey+0x174>
    19cc:	9c 83       	std	Y+4, r25	; 0x04
    19ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d0:	8d 81       	ldd	r24, Y+5	; 0x05
    19d2:	9e 81       	ldd	r25, Y+6	; 0x06
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	9e 83       	std	Y+6, r25	; 0x06
    19d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19da:	8d 81       	ldd	r24, Y+5	; 0x05
    19dc:	9e 81       	ldd	r25, Y+6	; 0x06
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	69 f7       	brne	.-38     	; 0x19bc <KEYPAD_getPressedKey+0x168>
    19e2:	14 c0       	rjmp	.+40     	; 0x1a0c <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	9a 83       	std	Y+2, r25	; 0x02
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	9a 81       	ldd	r25, Y+2	; 0x02
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <KEYPAD_getPressedKey+0x1b0>
    1a08:	9a 83       	std	Y+2, r25	; 0x02
    1a0a:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1a0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a0e:	8f 5f       	subi	r24, 0xFF	; 255
    1a10:	8f 87       	std	Y+15, r24	; 0x0f
    1a12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	08 f4       	brcc	.+2      	; 0x1a1a <KEYPAD_getPressedKey+0x1c6>
    1a18:	51 cf       	rjmp	.-350    	; 0x18bc <KEYPAD_getPressedKey+0x68>
    1a1a:	4e cf       	rjmp	.-356    	; 0x18b8 <KEYPAD_getPressedKey+0x64>

00001a1c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1a2a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	3c 83       	std	Y+4, r19	; 0x04
    1a34:	2b 83       	std	Y+3, r18	; 0x03
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	88 30       	cpi	r24, 0x08	; 8
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1a40:	70 c0       	rjmp	.+224    	; 0x1b22 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1a42:	2b 81       	ldd	r18, Y+3	; 0x03
    1a44:	3c 81       	ldd	r19, Y+4	; 0x04
    1a46:	29 30       	cpi	r18, 0x09	; 9
    1a48:	31 05       	cpc	r19, r1
    1a4a:	5c f5       	brge	.+86     	; 0x1aa2 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	84 30       	cpi	r24, 0x04	; 4
    1a52:	91 05       	cpc	r25, r1
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1a56:	59 c0       	rjmp	.+178    	; 0x1b0a <KEYPAD_4x4_adjustKeyNumber+0xee>
    1a58:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a5c:	25 30       	cpi	r18, 0x05	; 5
    1a5e:	31 05       	cpc	r19, r1
    1a60:	9c f4       	brge	.+38     	; 0x1a88 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	91 05       	cpc	r25, r1
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x52>
    1a6c:	48 c0       	rjmp	.+144    	; 0x1afe <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1a6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a70:	3c 81       	ldd	r19, Y+4	; 0x04
    1a72:	23 30       	cpi	r18, 0x03	; 3
    1a74:	31 05       	cpc	r19, r1
    1a76:	0c f0       	brlt	.+2      	; 0x1a7a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1a78:	45 c0       	rjmp	.+138    	; 0x1b04 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	91 05       	cpc	r25, r1
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1a84:	39 c0       	rjmp	.+114    	; 0x1af8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1a86:	67 c0       	rjmp	.+206    	; 0x1b56 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1a88:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8c:	26 30       	cpi	r18, 0x06	; 6
    1a8e:	31 05       	cpc	r19, r1
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1a92:	41 c0       	rjmp	.+130    	; 0x1b16 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	87 30       	cpi	r24, 0x07	; 7
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	0c f0       	brlt	.+2      	; 0x1aa0 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1a9e:	3e c0       	rjmp	.+124    	; 0x1b1c <KEYPAD_4x4_adjustKeyNumber+0x100>
    1aa0:	37 c0       	rjmp	.+110    	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa6:	2c 30       	cpi	r18, 0x0C	; 12
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <KEYPAD_4x4_adjustKeyNumber+0x92>
    1aac:	46 c0       	rjmp	.+140    	; 0x1b3a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	8d 30       	cpi	r24, 0x0D	; 13
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	5c f4       	brge	.+22     	; 0x1ace <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1ab8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aba:	3c 81       	ldd	r19, Y+4	; 0x04
    1abc:	2a 30       	cpi	r18, 0x0A	; 10
    1abe:	31 05       	cpc	r19, r1
    1ac0:	b1 f1       	breq	.+108    	; 0x1b2e <KEYPAD_4x4_adjustKeyNumber+0x112>
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	8b 30       	cpi	r24, 0x0B	; 11
    1ac8:	91 05       	cpc	r25, r1
    1aca:	a4 f5       	brge	.+104    	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1acc:	2d c0       	rjmp	.+90     	; 0x1b28 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1ace:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad2:	2e 30       	cpi	r18, 0x0E	; 14
    1ad4:	31 05       	cpc	r19, r1
    1ad6:	b9 f1       	breq	.+110    	; 0x1b46 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	9c 81       	ldd	r25, Y+4	; 0x04
    1adc:	8e 30       	cpi	r24, 0x0E	; 14
    1ade:	91 05       	cpc	r25, r1
    1ae0:	7c f1       	brlt	.+94     	; 0x1b40 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1ae2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae6:	2f 30       	cpi	r18, 0x0F	; 15
    1ae8:	31 05       	cpc	r19, r1
    1aea:	79 f1       	breq	.+94     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	80 31       	cpi	r24, 0x10	; 16
    1af2:	91 05       	cpc	r25, r1
    1af4:	69 f1       	breq	.+90     	; 0x1b50 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1af6:	2f c0       	rjmp	.+94     	; 0x1b56 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1af8:	87 e0       	ldi	r24, 0x07	; 7
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	2e c0       	rjmp	.+92     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1afe:	88 e0       	ldi	r24, 0x08	; 8
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	2b c0       	rjmp	.+86     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1b04:	89 e0       	ldi	r24, 0x09	; 9
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	28 c0       	rjmp	.+80     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1b0a:	85 e2       	ldi	r24, 0x25	; 37
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	25 c0       	rjmp	.+74     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1b10:	84 e0       	ldi	r24, 0x04	; 4
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	22 c0       	rjmp	.+68     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1b16:	85 e0       	ldi	r24, 0x05	; 5
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	1f c0       	rjmp	.+62     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1b1c:	86 e0       	ldi	r24, 0x06	; 6
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	1c c0       	rjmp	.+56     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1b22:	8a e2       	ldi	r24, 0x2A	; 42
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	19 c0       	rjmp	.+50     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	16 c0       	rjmp	.+44     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	13 c0       	rjmp	.+38     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1b34:	83 e0       	ldi	r24, 0x03	; 3
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	10 c0       	rjmp	.+32     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1b3a:	8d e2       	ldi	r24, 0x2D	; 45
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	0d c0       	rjmp	.+26     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1b40:	8d e0       	ldi	r24, 0x0D	; 13
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	0a c0       	rjmp	.+20     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1b46:	19 82       	std	Y+1, r1	; 0x01
    1b48:	08 c0       	rjmp	.+16     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1b4a:	8d e3       	ldi	r24, 0x3D	; 61
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	05 c0       	rjmp	.+10     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1b50:	8b e2       	ldi	r24, 0x2B	; 43
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <GPIO_setupPinDirection+0x6>
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <GPIO_setupPinDirection+0x8>
    1b72:	0f 92       	push	r0
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	6a 83       	std	Y+2, r22	; 0x02
    1b7c:	4b 83       	std	Y+3, r20	; 0x03
	/*check if the input port is grater than NUM_OF_PINS_PER_PORT
	 * Or if the input pin numbers is greater than NUM_OF_PORTS Do Nothing
	 * ELSE setup pin direction as input or output
	 *
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	88 30       	cpi	r24, 0x08	; 8
    1b82:	08 f0       	brcs	.+2      	; 0x1b86 <GPIO_setupPinDirection+0x1c>
    1b84:	d5 c0       	rjmp	.+426    	; 0x1d30 <GPIO_setupPinDirection+0x1c6>
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	84 30       	cpi	r24, 0x04	; 4
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <GPIO_setupPinDirection+0x24>
    1b8c:	d1 c0       	rjmp	.+418    	; 0x1d30 <GPIO_setupPinDirection+0x1c6>
	{
			/* Do Nothing */
	}
	else
	{
		switch (port_num)
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	3d 83       	std	Y+5, r19	; 0x05
    1b96:	2c 83       	std	Y+4, r18	; 0x04
    1b98:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <GPIO_setupPinDirection+0x3a>
    1ba2:	43 c0       	rjmp	.+134    	; 0x1c2a <GPIO_setupPinDirection+0xc0>
    1ba4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba8:	22 30       	cpi	r18, 0x02	; 2
    1baa:	31 05       	cpc	r19, r1
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <GPIO_setupPinDirection+0x4e>
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	71 f0       	breq	.+28     	; 0x1bd2 <GPIO_setupPinDirection+0x68>
    1bb6:	bc c0       	rjmp	.+376    	; 0x1d30 <GPIO_setupPinDirection+0x1c6>
    1bb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bba:	3d 81       	ldd	r19, Y+5	; 0x05
    1bbc:	22 30       	cpi	r18, 0x02	; 2
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <GPIO_setupPinDirection+0x5a>
    1bc2:	5f c0       	rjmp	.+190    	; 0x1c82 <GPIO_setupPinDirection+0x118>
    1bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc8:	83 30       	cpi	r24, 0x03	; 3
    1bca:	91 05       	cpc	r25, r1
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <GPIO_setupPinDirection+0x66>
    1bce:	85 c0       	rjmp	.+266    	; 0x1cda <GPIO_setupPinDirection+0x170>
    1bd0:	af c0       	rjmp	.+350    	; 0x1d30 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	a1 f4       	brne	.+40     	; 0x1c00 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1bd8:	aa e3       	ldi	r26, 0x3A	; 58
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	ea e3       	ldi	r30, 0x3A	; 58
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <GPIO_setupPinDirection+0x8c>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <GPIO_setupPinDirection+0x88>
    1bfa:	84 2b       	or	r24, r20
    1bfc:	8c 93       	st	X, r24
    1bfe:	98 c0       	rjmp	.+304    	; 0x1d30 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1c00:	aa e3       	ldi	r26, 0x3A	; 58
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	ea e3       	ldi	r30, 0x3A	; 58
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 2e       	mov	r0, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <GPIO_setupPinDirection+0xb4>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	0a 94       	dec	r0
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <GPIO_setupPinDirection+0xb0>
    1c22:	80 95       	com	r24
    1c24:	84 23       	and	r24, r20
    1c26:	8c 93       	st	X, r24
    1c28:	83 c0       	rjmp	.+262    	; 0x1d30 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	a1 f4       	brne	.+40     	; 0x1c58 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1c30:	a7 e3       	ldi	r26, 0x37	; 55
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e7 e3       	ldi	r30, 0x37	; 55
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 2e       	mov	r0, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <GPIO_setupPinDirection+0xe4>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <GPIO_setupPinDirection+0xe0>
    1c52:	84 2b       	or	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	6c c0       	rjmp	.+216    	; 0x1d30 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c58:	a7 e3       	ldi	r26, 0x37	; 55
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e7 e3       	ldi	r30, 0x37	; 55
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <GPIO_setupPinDirection+0x10c>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <GPIO_setupPinDirection+0x108>
    1c7a:	80 95       	com	r24
    1c7c:	84 23       	and	r24, r20
    1c7e:	8c 93       	st	X, r24
    1c80:	57 c0       	rjmp	.+174    	; 0x1d30 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	a1 f4       	brne	.+40     	; 0x1cb0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1c88:	a4 e3       	ldi	r26, 0x34	; 52
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e4 e3       	ldi	r30, 0x34	; 52
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	48 2f       	mov	r20, r24
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 2e       	mov	r0, r18
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <GPIO_setupPinDirection+0x13c>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	0a 94       	dec	r0
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <GPIO_setupPinDirection+0x138>
    1caa:	84 2b       	or	r24, r20
    1cac:	8c 93       	st	X, r24
    1cae:	40 c0       	rjmp	.+128    	; 0x1d30 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1cb0:	a4 e3       	ldi	r26, 0x34	; 52
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e4 e3       	ldi	r30, 0x34	; 52
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <GPIO_setupPinDirection+0x164>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <GPIO_setupPinDirection+0x160>
    1cd2:	80 95       	com	r24
    1cd4:	84 23       	and	r24, r20
    1cd6:	8c 93       	st	X, r24
    1cd8:	2b c0       	rjmp	.+86     	; 0x1d30 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID :
			if (direction == PIN_OUTPUT)
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	a1 f4       	brne	.+40     	; 0x1d08 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1ce0:	a1 e3       	ldi	r26, 0x31	; 49
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e1 e3       	ldi	r30, 0x31	; 49
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	48 2f       	mov	r20, r24
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 2e       	mov	r0, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <GPIO_setupPinDirection+0x194>
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	0a 94       	dec	r0
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <GPIO_setupPinDirection+0x190>
    1d02:	84 2b       	or	r24, r20
    1d04:	8c 93       	st	X, r24
    1d06:	14 c0       	rjmp	.+40     	; 0x1d30 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1d08:	a1 e3       	ldi	r26, 0x31	; 49
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e1 e3       	ldi	r30, 0x31	; 49
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <GPIO_setupPinDirection+0x1bc>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <GPIO_setupPinDirection+0x1b8>
    1d2a:	80 95       	com	r24
    1d2c:	84 23       	and	r24, r20
    1d2e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <GPIO_writePin+0x6>
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <GPIO_writePin+0x8>
    1d48:	0f 92       	push	r0
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	6a 83       	std	Y+2, r22	; 0x02
    1d52:	4b 83       	std	Y+3, r20	; 0x03
	 Description :
     * Write the value Logic High or Logic Low on the required pin.
     * If the input port number or pin number are not correct, The function will not handle the request.
     * If the pin is input, this function will enable/disable the internal pull-up resistor.
	 */
	if ( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT) )
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	84 30       	cpi	r24, 0x04	; 4
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <GPIO_writePin+0x1c>
    1d5a:	d5 c0       	rjmp	.+426    	; 0x1f06 <GPIO_writePin+0x1c6>
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	88 30       	cpi	r24, 0x08	; 8
    1d60:	08 f0       	brcs	.+2      	; 0x1d64 <GPIO_writePin+0x24>
    1d62:	d1 c0       	rjmp	.+418    	; 0x1f06 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch (port_num)
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	3d 83       	std	Y+5, r19	; 0x05
    1d6c:	2c 83       	std	Y+4, r18	; 0x04
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	9d 81       	ldd	r25, Y+5	; 0x05
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	91 05       	cpc	r25, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <GPIO_writePin+0x3a>
    1d78:	43 c0       	rjmp	.+134    	; 0x1e00 <GPIO_writePin+0xc0>
    1d7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7e:	22 30       	cpi	r18, 0x02	; 2
    1d80:	31 05       	cpc	r19, r1
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <GPIO_writePin+0x4e>
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	9d 81       	ldd	r25, Y+5	; 0x05
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	71 f0       	breq	.+28     	; 0x1da8 <GPIO_writePin+0x68>
    1d8c:	bc c0       	rjmp	.+376    	; 0x1f06 <GPIO_writePin+0x1c6>
    1d8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d90:	3d 81       	ldd	r19, Y+5	; 0x05
    1d92:	22 30       	cpi	r18, 0x02	; 2
    1d94:	31 05       	cpc	r19, r1
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <GPIO_writePin+0x5a>
    1d98:	5f c0       	rjmp	.+190    	; 0x1e58 <GPIO_writePin+0x118>
    1d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9e:	83 30       	cpi	r24, 0x03	; 3
    1da0:	91 05       	cpc	r25, r1
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <GPIO_writePin+0x66>
    1da4:	85 c0       	rjmp	.+266    	; 0x1eb0 <GPIO_writePin+0x170>
    1da6:	af c0       	rjmp	.+350    	; 0x1f06 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if (value == LOGIC_HIGH )
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	a1 f4       	brne	.+40     	; 0x1dd6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1dae:	ab e3       	ldi	r26, 0x3B	; 59
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	eb e3       	ldi	r30, 0x3B	; 59
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	48 2f       	mov	r20, r24
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	02 2e       	mov	r0, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <GPIO_writePin+0x8c>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	0a 94       	dec	r0
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <GPIO_writePin+0x88>
    1dd0:	84 2b       	or	r24, r20
    1dd2:	8c 93       	st	X, r24
    1dd4:	98 c0       	rjmp	.+304    	; 0x1f06 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1dd6:	ab e3       	ldi	r26, 0x3B	; 59
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	eb e3       	ldi	r30, 0x3B	; 59
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	48 2f       	mov	r20, r24
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	02 2e       	mov	r0, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <GPIO_writePin+0xb4>
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	0a 94       	dec	r0
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <GPIO_writePin+0xb0>
    1df8:	80 95       	com	r24
    1dfa:	84 23       	and	r24, r20
    1dfc:	8c 93       	st	X, r24
    1dfe:	83 c0       	rjmp	.+262    	; 0x1f06 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID :
			if (value == LOGIC_HIGH)
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	a1 f4       	brne	.+40     	; 0x1e2e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1e06:	a8 e3       	ldi	r26, 0x38	; 56
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e8 e3       	ldi	r30, 0x38	; 56
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	48 2f       	mov	r20, r24
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	02 2e       	mov	r0, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <GPIO_writePin+0xe4>
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	0a 94       	dec	r0
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <GPIO_writePin+0xe0>
    1e28:	84 2b       	or	r24, r20
    1e2a:	8c 93       	st	X, r24
    1e2c:	6c c0       	rjmp	.+216    	; 0x1f06 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1e2e:	a8 e3       	ldi	r26, 0x38	; 56
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e8 e3       	ldi	r30, 0x38	; 56
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	48 2f       	mov	r20, r24
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 2e       	mov	r0, r18
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <GPIO_writePin+0x10c>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <GPIO_writePin+0x108>
    1e50:	80 95       	com	r24
    1e52:	84 23       	and	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	57 c0       	rjmp	.+174    	; 0x1f06 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID :
			if (value == LOGIC_HIGH)
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	81 30       	cpi	r24, 0x01	; 1
    1e5c:	a1 f4       	brne	.+40     	; 0x1e86 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1e5e:	a5 e3       	ldi	r26, 0x35	; 53
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e5 e3       	ldi	r30, 0x35	; 53
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	48 2f       	mov	r20, r24
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	02 2e       	mov	r0, r18
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <GPIO_writePin+0x13c>
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	0a 94       	dec	r0
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <GPIO_writePin+0x138>
    1e80:	84 2b       	or	r24, r20
    1e82:	8c 93       	st	X, r24
    1e84:	40 c0       	rjmp	.+128    	; 0x1f06 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1e86:	a5 e3       	ldi	r26, 0x35	; 53
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e5 e3       	ldi	r30, 0x35	; 53
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	48 2f       	mov	r20, r24
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	02 2e       	mov	r0, r18
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <GPIO_writePin+0x164>
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	0a 94       	dec	r0
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <GPIO_writePin+0x160>
    1ea8:	80 95       	com	r24
    1eaa:	84 23       	and	r24, r20
    1eac:	8c 93       	st	X, r24
    1eae:	2b c0       	rjmp	.+86     	; 0x1f06 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID :
			if (value == LOGIC_HIGH)
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	81 30       	cpi	r24, 0x01	; 1
    1eb4:	a1 f4       	brne	.+40     	; 0x1ede <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1eb6:	a2 e3       	ldi	r26, 0x32	; 50
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e2 e3       	ldi	r30, 0x32	; 50
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	48 2f       	mov	r20, r24
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	02 2e       	mov	r0, r18
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <GPIO_writePin+0x194>
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	0a 94       	dec	r0
    1ed6:	e2 f7       	brpl	.-8      	; 0x1ed0 <GPIO_writePin+0x190>
    1ed8:	84 2b       	or	r24, r20
    1eda:	8c 93       	st	X, r24
    1edc:	14 c0       	rjmp	.+40     	; 0x1f06 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1ede:	a2 e3       	ldi	r26, 0x32	; 50
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e2 e3       	ldi	r30, 0x32	; 50
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	48 2f       	mov	r20, r24
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	02 2e       	mov	r0, r18
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <GPIO_writePin+0x1bc>
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	0a 94       	dec	r0
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <GPIO_writePin+0x1b8>
    1f00:	80 95       	com	r24
    1f02:	84 23       	and	r24, r20
    1f04:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <GPIO_readPin+0x6>
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <GPIO_readPin+0x8>
    1f1e:	0f 92       	push	r0
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	8a 83       	std	Y+2, r24	; 0x02
    1f26:	6b 83       	std	Y+3, r22	; 0x03
	 * Description :
     * Read and return the value for the required pin, it should be Logic High or Logic Low.
     * If the input port number or pin number are not correct, The function will return Logic Low.
	 */

	uint8 pin_value = LOGIC_LOW; //if not changed
    1f28:	19 82       	std	Y+1, r1	; 0x01

	if ((port_num >= NUM_OF_PORTS ) || pin_num >= NUM_OF_PINS_PER_PORT)
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	84 30       	cpi	r24, 0x04	; 4
    1f2e:	08 f0       	brcs	.+2      	; 0x1f32 <GPIO_readPin+0x1c>
    1f30:	84 c0       	rjmp	.+264    	; 0x203a <GPIO_readPin+0x124>
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	88 30       	cpi	r24, 0x08	; 8
    1f36:	08 f0       	brcs	.+2      	; 0x1f3a <GPIO_readPin+0x24>
    1f38:	80 c0       	rjmp	.+256    	; 0x203a <GPIO_readPin+0x124>
	{
		// Do Nothing
	}
	else
	{
		switch (port_num)
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	3d 83       	std	Y+5, r19	; 0x05
    1f42:	2c 83       	std	Y+4, r18	; 0x04
    1f44:	4c 81       	ldd	r20, Y+4	; 0x04
    1f46:	5d 81       	ldd	r21, Y+5	; 0x05
    1f48:	41 30       	cpi	r20, 0x01	; 1
    1f4a:	51 05       	cpc	r21, r1
    1f4c:	79 f1       	breq	.+94     	; 0x1fac <GPIO_readPin+0x96>
    1f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f50:	9d 81       	ldd	r25, Y+5	; 0x05
    1f52:	82 30       	cpi	r24, 0x02	; 2
    1f54:	91 05       	cpc	r25, r1
    1f56:	34 f4       	brge	.+12     	; 0x1f64 <GPIO_readPin+0x4e>
    1f58:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f5c:	21 15       	cp	r18, r1
    1f5e:	31 05       	cpc	r19, r1
    1f60:	69 f0       	breq	.+26     	; 0x1f7c <GPIO_readPin+0x66>
    1f62:	6b c0       	rjmp	.+214    	; 0x203a <GPIO_readPin+0x124>
    1f64:	4c 81       	ldd	r20, Y+4	; 0x04
    1f66:	5d 81       	ldd	r21, Y+5	; 0x05
    1f68:	42 30       	cpi	r20, 0x02	; 2
    1f6a:	51 05       	cpc	r21, r1
    1f6c:	b9 f1       	breq	.+110    	; 0x1fdc <GPIO_readPin+0xc6>
    1f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f70:	9d 81       	ldd	r25, Y+5	; 0x05
    1f72:	83 30       	cpi	r24, 0x03	; 3
    1f74:	91 05       	cpc	r25, r1
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <GPIO_readPin+0x64>
    1f78:	49 c0       	rjmp	.+146    	; 0x200c <GPIO_readPin+0xf6>
    1f7a:	5f c0       	rjmp	.+190    	; 0x203a <GPIO_readPin+0x124>
		{
		case PORTA_ID :
			if (BIT_IS_SET(PINA,pin_num))
    1f7c:	e9 e3       	ldi	r30, 0x39	; 57
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	88 2f       	mov	r24, r24
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	a9 01       	movw	r20, r18
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <GPIO_readPin+0x7e>
    1f90:	55 95       	asr	r21
    1f92:	47 95       	ror	r20
    1f94:	8a 95       	dec	r24
    1f96:	e2 f7       	brpl	.-8      	; 0x1f90 <GPIO_readPin+0x7a>
    1f98:	ca 01       	movw	r24, r20
    1f9a:	81 70       	andi	r24, 0x01	; 1
    1f9c:	90 70       	andi	r25, 0x00	; 0
    1f9e:	88 23       	and	r24, r24
    1fa0:	19 f0       	breq	.+6      	; 0x1fa8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	49 c0       	rjmp	.+146    	; 0x203a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fa8:	19 82       	std	Y+1, r1	; 0x01
    1faa:	47 c0       	rjmp	.+142    	; 0x203a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID :
			if (BIT_IS_SET(PINB,pin_num))
    1fac:	e6 e3       	ldi	r30, 0x36	; 54
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a9 01       	movw	r20, r18
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <GPIO_readPin+0xae>
    1fc0:	55 95       	asr	r21
    1fc2:	47 95       	ror	r20
    1fc4:	8a 95       	dec	r24
    1fc6:	e2 f7       	brpl	.-8      	; 0x1fc0 <GPIO_readPin+0xaa>
    1fc8:	ca 01       	movw	r24, r20
    1fca:	81 70       	andi	r24, 0x01	; 1
    1fcc:	90 70       	andi	r25, 0x00	; 0
    1fce:	88 23       	and	r24, r24
    1fd0:	19 f0       	breq	.+6      	; 0x1fd8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	31 c0       	rjmp	.+98     	; 0x203a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fd8:	19 82       	std	Y+1, r1	; 0x01
    1fda:	2f c0       	rjmp	.+94     	; 0x203a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID :
			if (BIT_IS_SET(PINC,pin_num))
    1fdc:	e3 e3       	ldi	r30, 0x33	; 51
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	88 2f       	mov	r24, r24
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	a9 01       	movw	r20, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <GPIO_readPin+0xde>
    1ff0:	55 95       	asr	r21
    1ff2:	47 95       	ror	r20
    1ff4:	8a 95       	dec	r24
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <GPIO_readPin+0xda>
    1ff8:	ca 01       	movw	r24, r20
    1ffa:	81 70       	andi	r24, 0x01	; 1
    1ffc:	90 70       	andi	r25, 0x00	; 0
    1ffe:	88 23       	and	r24, r24
    2000:	19 f0       	breq	.+6      	; 0x2008 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	19 c0       	rjmp	.+50     	; 0x203a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2008:	19 82       	std	Y+1, r1	; 0x01
    200a:	17 c0       	rjmp	.+46     	; 0x203a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID :
			if (BIT_IS_SET(PIND,pin_num))
    200c:	e0 e3       	ldi	r30, 0x30	; 48
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	88 2f       	mov	r24, r24
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a9 01       	movw	r20, r18
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <GPIO_readPin+0x10e>
    2020:	55 95       	asr	r21
    2022:	47 95       	ror	r20
    2024:	8a 95       	dec	r24
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <GPIO_readPin+0x10a>
    2028:	ca 01       	movw	r24, r20
    202a:	81 70       	andi	r24, 0x01	; 1
    202c:	90 70       	andi	r25, 0x00	; 0
    202e:	88 23       	and	r24, r24
    2030:	19 f0       	breq	.+6      	; 0x2038 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	01 c0       	rjmp	.+2      	; 0x203a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2038:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    203a:	89 81       	ldd	r24, Y+1	; 0x01
}
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	00 d0       	rcall	.+0      	; 0x2052 <GPIO_setupPortDirection+0x6>
    2052:	00 d0       	rcall	.+0      	; 0x2054 <GPIO_setupPortDirection+0x8>
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	* Check if the input number is greater than NUM_OF_PORTS value.
    * In this case the input is not valid port number
	*/
	if (port_num >= NUM_OF_PORTS)
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	84 30       	cpi	r24, 0x04	; 4
    2060:	90 f5       	brcc	.+100    	; 0x20c6 <GPIO_setupPortDirection+0x7a>
	{
		/*DO Nothing */
	}
	else
	{
		switch (port_num)
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	3c 83       	std	Y+4, r19	; 0x04
    206a:	2b 83       	std	Y+3, r18	; 0x03
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	91 05       	cpc	r25, r1
    2074:	d1 f0       	breq	.+52     	; 0x20aa <GPIO_setupPortDirection+0x5e>
    2076:	2b 81       	ldd	r18, Y+3	; 0x03
    2078:	3c 81       	ldd	r19, Y+4	; 0x04
    207a:	22 30       	cpi	r18, 0x02	; 2
    207c:	31 05       	cpc	r19, r1
    207e:	2c f4       	brge	.+10     	; 0x208a <GPIO_setupPortDirection+0x3e>
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	61 f0       	breq	.+24     	; 0x20a0 <GPIO_setupPortDirection+0x54>
    2088:	1e c0       	rjmp	.+60     	; 0x20c6 <GPIO_setupPortDirection+0x7a>
    208a:	2b 81       	ldd	r18, Y+3	; 0x03
    208c:	3c 81       	ldd	r19, Y+4	; 0x04
    208e:	22 30       	cpi	r18, 0x02	; 2
    2090:	31 05       	cpc	r19, r1
    2092:	81 f0       	breq	.+32     	; 0x20b4 <GPIO_setupPortDirection+0x68>
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	9c 81       	ldd	r25, Y+4	; 0x04
    2098:	83 30       	cpi	r24, 0x03	; 3
    209a:	91 05       	cpc	r25, r1
    209c:	81 f0       	breq	.+32     	; 0x20be <GPIO_setupPortDirection+0x72>
    209e:	13 c0       	rjmp	.+38     	; 0x20c6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID :
			DDRA = direction;
    20a0:	ea e3       	ldi	r30, 0x3A	; 58
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	80 83       	st	Z, r24
    20a8:	0e c0       	rjmp	.+28     	; 0x20c6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID :
			DDRB = direction;
    20aa:	e7 e3       	ldi	r30, 0x37	; 55
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	80 83       	st	Z, r24
    20b2:	09 c0       	rjmp	.+18     	; 0x20c6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    20b4:	e4 e3       	ldi	r30, 0x34	; 52
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	80 83       	st	Z, r24
    20bc:	04 c0       	rjmp	.+8      	; 0x20c6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID :
			DDRD = direction;
    20be:	e1 e3       	ldi	r30, 0x31	; 49
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	80 83       	st	Z, r24
			break;
		}
	}
}
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	00 d0       	rcall	.+0      	; 0x20da <GPIO_writePort+0x6>
    20da:	00 d0       	rcall	.+0      	; 0x20dc <GPIO_writePort+0x8>
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS)
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	84 30       	cpi	r24, 0x04	; 4
    20e8:	90 f5       	brcc	.+100    	; 0x214e <GPIO_writePort+0x7a>
	{
		//Do Nothing
	}
	else
	{
		switch (port_num)
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	3c 83       	std	Y+4, r19	; 0x04
    20f2:	2b 83       	std	Y+3, r18	; 0x03
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	91 05       	cpc	r25, r1
    20fc:	d1 f0       	breq	.+52     	; 0x2132 <GPIO_writePort+0x5e>
    20fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2100:	3c 81       	ldd	r19, Y+4	; 0x04
    2102:	22 30       	cpi	r18, 0x02	; 2
    2104:	31 05       	cpc	r19, r1
    2106:	2c f4       	brge	.+10     	; 0x2112 <GPIO_writePort+0x3e>
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	61 f0       	breq	.+24     	; 0x2128 <GPIO_writePort+0x54>
    2110:	1e c0       	rjmp	.+60     	; 0x214e <GPIO_writePort+0x7a>
    2112:	2b 81       	ldd	r18, Y+3	; 0x03
    2114:	3c 81       	ldd	r19, Y+4	; 0x04
    2116:	22 30       	cpi	r18, 0x02	; 2
    2118:	31 05       	cpc	r19, r1
    211a:	81 f0       	breq	.+32     	; 0x213c <GPIO_writePort+0x68>
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	83 30       	cpi	r24, 0x03	; 3
    2122:	91 05       	cpc	r25, r1
    2124:	81 f0       	breq	.+32     	; 0x2146 <GPIO_writePort+0x72>
    2126:	13 c0       	rjmp	.+38     	; 0x214e <GPIO_writePort+0x7a>
		{
		case PORTA_ID :
			PORTA = value;
    2128:	eb e3       	ldi	r30, 0x3B	; 59
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	80 83       	st	Z, r24
    2130:	0e c0       	rjmp	.+28     	; 0x214e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID :
			PORTB = value;
    2132:	e8 e3       	ldi	r30, 0x38	; 56
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	80 83       	st	Z, r24
    213a:	09 c0       	rjmp	.+18     	; 0x214e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID :
			PORTC = value;
    213c:	e5 e3       	ldi	r30, 0x35	; 53
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	80 83       	st	Z, r24
    2144:	04 c0       	rjmp	.+8      	; 0x214e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID :
			PORTD = value;
    2146:	e2 e3       	ldi	r30, 0x32	; 50
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	80 83       	st	Z, r24
			break;
		}
	}
}
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	00 d0       	rcall	.+0      	; 0x2162 <GPIO_readPort+0x6>
    2162:	00 d0       	rcall	.+0      	; 0x2164 <GPIO_readPort+0x8>
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    216a:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	84 30       	cpi	r24, 0x04	; 4
    2170:	90 f5       	brcc	.+100    	; 0x21d6 <GPIO_readPort+0x7a>
	{
		// Do Nothing
	}
	else
	{
		switch (port_num)
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	3c 83       	std	Y+4, r19	; 0x04
    217a:	2b 83       	std	Y+3, r18	; 0x03
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	9c 81       	ldd	r25, Y+4	; 0x04
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	91 05       	cpc	r25, r1
    2184:	d1 f0       	breq	.+52     	; 0x21ba <GPIO_readPort+0x5e>
    2186:	2b 81       	ldd	r18, Y+3	; 0x03
    2188:	3c 81       	ldd	r19, Y+4	; 0x04
    218a:	22 30       	cpi	r18, 0x02	; 2
    218c:	31 05       	cpc	r19, r1
    218e:	2c f4       	brge	.+10     	; 0x219a <GPIO_readPort+0x3e>
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	9c 81       	ldd	r25, Y+4	; 0x04
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	61 f0       	breq	.+24     	; 0x21b0 <GPIO_readPort+0x54>
    2198:	1e c0       	rjmp	.+60     	; 0x21d6 <GPIO_readPort+0x7a>
    219a:	2b 81       	ldd	r18, Y+3	; 0x03
    219c:	3c 81       	ldd	r19, Y+4	; 0x04
    219e:	22 30       	cpi	r18, 0x02	; 2
    21a0:	31 05       	cpc	r19, r1
    21a2:	81 f0       	breq	.+32     	; 0x21c4 <GPIO_readPort+0x68>
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	83 30       	cpi	r24, 0x03	; 3
    21aa:	91 05       	cpc	r25, r1
    21ac:	81 f0       	breq	.+32     	; 0x21ce <GPIO_readPort+0x72>
    21ae:	13 c0       	rjmp	.+38     	; 0x21d6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID :
			value =PINA  ;
    21b0:	e9 e3       	ldi	r30, 0x39	; 57
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	0e c0       	rjmp	.+28     	; 0x21d6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID :
			value =PINB  ;
    21ba:	e6 e3       	ldi	r30, 0x36	; 54
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	09 c0       	rjmp	.+18     	; 0x21d6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID :
			value =PINC  ;
    21c4:	e3 e3       	ldi	r30, 0x33	; 51
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	04 c0       	rjmp	.+8      	; 0x21d6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID :
			value =PIND  ;
    21ce:	e0 e3       	ldi	r30, 0x30	; 48
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	89 83       	std	Y+1, r24	; 0x01
			break;

		}
	}
	return value;
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	2e 97       	sbiw	r28, 0x0e	; 14
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	61 e0       	ldi	r22, 0x01	; 1
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <GPIO_setupPinDirection>
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	a0 ea       	ldi	r26, 0xA0	; 160
    2214:	b1 e4       	ldi	r27, 0x41	; 65
    2216:	8b 87       	std	Y+11, r24	; 0x0b
    2218:	9c 87       	std	Y+12, r25	; 0x0c
    221a:	ad 87       	std	Y+13, r26	; 0x0d
    221c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2220:	7c 85       	ldd	r23, Y+12	; 0x0c
    2222:	8d 85       	ldd	r24, Y+13	; 0x0d
    2224:	9e 85       	ldd	r25, Y+14	; 0x0e
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4a ef       	ldi	r20, 0xFA	; 250
    222c:	54 e4       	ldi	r21, 0x44	; 68
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	8f 83       	std	Y+7, r24	; 0x07
    2238:	98 87       	std	Y+8, r25	; 0x08
    223a:	a9 87       	std	Y+9, r26	; 0x09
    223c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    223e:	6f 81       	ldd	r22, Y+7	; 0x07
    2240:	78 85       	ldd	r23, Y+8	; 0x08
    2242:	89 85       	ldd	r24, Y+9	; 0x09
    2244:	9a 85       	ldd	r25, Y+10	; 0x0a
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e8       	ldi	r20, 0x80	; 128
    224c:	5f e3       	ldi	r21, 0x3F	; 63
    224e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2252:	88 23       	and	r24, r24
    2254:	2c f4       	brge	.+10     	; 0x2260 <LCD_init+0x7a>
		__ticks = 1;
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9e 83       	std	Y+6, r25	; 0x06
    225c:	8d 83       	std	Y+5, r24	; 0x05
    225e:	3f c0       	rjmp	.+126    	; 0x22de <LCD_init+0xf8>
	else if (__tmp > 65535)
    2260:	6f 81       	ldd	r22, Y+7	; 0x07
    2262:	78 85       	ldd	r23, Y+8	; 0x08
    2264:	89 85       	ldd	r24, Y+9	; 0x09
    2266:	9a 85       	ldd	r25, Y+10	; 0x0a
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	3f ef       	ldi	r19, 0xFF	; 255
    226c:	4f e7       	ldi	r20, 0x7F	; 127
    226e:	57 e4       	ldi	r21, 0x47	; 71
    2270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2274:	18 16       	cp	r1, r24
    2276:	4c f5       	brge	.+82     	; 0x22ca <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2278:	6b 85       	ldd	r22, Y+11	; 0x0b
    227a:	7c 85       	ldd	r23, Y+12	; 0x0c
    227c:	8d 85       	ldd	r24, Y+13	; 0x0d
    227e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e2       	ldi	r20, 0x20	; 32
    2286:	51 e4       	ldi	r21, 0x41	; 65
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9e 83       	std	Y+6, r25	; 0x06
    229e:	8d 83       	std	Y+5, r24	; 0x05
    22a0:	0f c0       	rjmp	.+30     	; 0x22c0 <LCD_init+0xda>
    22a2:	88 ec       	ldi	r24, 0xC8	; 200
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	9c 83       	std	Y+4, r25	; 0x04
    22a8:	8b 83       	std	Y+3, r24	; 0x03
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	9c 81       	ldd	r25, Y+4	; 0x04
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <LCD_init+0xc8>
    22b2:	9c 83       	std	Y+4, r25	; 0x04
    22b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b6:	8d 81       	ldd	r24, Y+5	; 0x05
    22b8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	9e 83       	std	Y+6, r25	; 0x06
    22be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	9e 81       	ldd	r25, Y+6	; 0x06
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	69 f7       	brne	.-38     	; 0x22a2 <LCD_init+0xbc>
    22c8:	14 c0       	rjmp	.+40     	; 0x22f2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ca:	6f 81       	ldd	r22, Y+7	; 0x07
    22cc:	78 85       	ldd	r23, Y+8	; 0x08
    22ce:	89 85       	ldd	r24, Y+9	; 0x09
    22d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	9e 83       	std	Y+6, r25	; 0x06
    22dc:	8d 83       	std	Y+5, r24	; 0x05
    22de:	8d 81       	ldd	r24, Y+5	; 0x05
    22e0:	9e 81       	ldd	r25, Y+6	; 0x06
    22e2:	9a 83       	std	Y+2, r25	; 0x02
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <LCD_init+0x104>
    22ee:	9a 83       	std	Y+2, r25	; 0x02
    22f0:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	6f ef       	ldi	r22, 0xFF	; 255
    22f6:	0e 94 26 10 	call	0x204c	; 0x204c <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    22fa:	88 e3       	ldi	r24, 0x38	; 56
    22fc:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2300:	8c e0       	ldi	r24, 0x0C	; 12
    2302:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_sendCommand>
}
    230c:	2e 96       	adiw	r28, 0x0e	; 14
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <LCD_sendCommand>:
/*
 * Description
 * send the command to the LCD
 */
void LCD_sendCommand(uint8 command)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	e9 97       	sbiw	r28, 0x39	; 57
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	61 e0       	ldi	r22, 0x01	; 1
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <GPIO_writePin>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a0 e8       	ldi	r26, 0x80	; 128
    2344:	bf e3       	ldi	r27, 0x3F	; 63
    2346:	8d ab       	std	Y+53, r24	; 0x35
    2348:	9e ab       	std	Y+54, r25	; 0x36
    234a:	af ab       	std	Y+55, r26	; 0x37
    234c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234e:	6d a9       	ldd	r22, Y+53	; 0x35
    2350:	7e a9       	ldd	r23, Y+54	; 0x36
    2352:	8f a9       	ldd	r24, Y+55	; 0x37
    2354:	98 ad       	ldd	r25, Y+56	; 0x38
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	4a ef       	ldi	r20, 0xFA	; 250
    235c:	54 e4       	ldi	r21, 0x44	; 68
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	89 ab       	std	Y+49, r24	; 0x31
    2368:	9a ab       	std	Y+50, r25	; 0x32
    236a:	ab ab       	std	Y+51, r26	; 0x33
    236c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    236e:	69 a9       	ldd	r22, Y+49	; 0x31
    2370:	7a a9       	ldd	r23, Y+50	; 0x32
    2372:	8b a9       	ldd	r24, Y+51	; 0x33
    2374:	9c a9       	ldd	r25, Y+52	; 0x34
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e8       	ldi	r20, 0x80	; 128
    237c:	5f e3       	ldi	r21, 0x3F	; 63
    237e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2382:	88 23       	and	r24, r24
    2384:	2c f4       	brge	.+10     	; 0x2390 <LCD_sendCommand+0x72>
		__ticks = 1;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	98 ab       	std	Y+48, r25	; 0x30
    238c:	8f a7       	std	Y+47, r24	; 0x2f
    238e:	3f c0       	rjmp	.+126    	; 0x240e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2390:	69 a9       	ldd	r22, Y+49	; 0x31
    2392:	7a a9       	ldd	r23, Y+50	; 0x32
    2394:	8b a9       	ldd	r24, Y+51	; 0x33
    2396:	9c a9       	ldd	r25, Y+52	; 0x34
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	3f ef       	ldi	r19, 0xFF	; 255
    239c:	4f e7       	ldi	r20, 0x7F	; 127
    239e:	57 e4       	ldi	r21, 0x47	; 71
    23a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23a4:	18 16       	cp	r1, r24
    23a6:	4c f5       	brge	.+82     	; 0x23fa <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a8:	6d a9       	ldd	r22, Y+53	; 0x35
    23aa:	7e a9       	ldd	r23, Y+54	; 0x36
    23ac:	8f a9       	ldd	r24, Y+55	; 0x37
    23ae:	98 ad       	ldd	r25, Y+56	; 0x38
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e2       	ldi	r20, 0x20	; 32
    23b6:	51 e4       	ldi	r21, 0x41	; 65
    23b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	98 ab       	std	Y+48, r25	; 0x30
    23ce:	8f a7       	std	Y+47, r24	; 0x2f
    23d0:	0f c0       	rjmp	.+30     	; 0x23f0 <LCD_sendCommand+0xd2>
    23d2:	88 ec       	ldi	r24, 0xC8	; 200
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	9e a7       	std	Y+46, r25	; 0x2e
    23d8:	8d a7       	std	Y+45, r24	; 0x2d
    23da:	8d a5       	ldd	r24, Y+45	; 0x2d
    23dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_sendCommand+0xc0>
    23e2:	9e a7       	std	Y+46, r25	; 0x2e
    23e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e8:	98 a9       	ldd	r25, Y+48	; 0x30
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	98 ab       	std	Y+48, r25	; 0x30
    23ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f2:	98 a9       	ldd	r25, Y+48	; 0x30
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	69 f7       	brne	.-38     	; 0x23d2 <LCD_sendCommand+0xb4>
    23f8:	14 c0       	rjmp	.+40     	; 0x2422 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fa:	69 a9       	ldd	r22, Y+49	; 0x31
    23fc:	7a a9       	ldd	r23, Y+50	; 0x32
    23fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2400:	9c a9       	ldd	r25, Y+52	; 0x34
    2402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	98 ab       	std	Y+48, r25	; 0x30
    240c:	8f a7       	std	Y+47, r24	; 0x2f
    240e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2410:	98 a9       	ldd	r25, Y+48	; 0x30
    2412:	9c a7       	std	Y+44, r25	; 0x2c
    2414:	8b a7       	std	Y+43, r24	; 0x2b
    2416:	8b a5       	ldd	r24, Y+43	; 0x2b
    2418:	9c a5       	ldd	r25, Y+44	; 0x2c
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_sendCommand+0xfc>
    241e:	9c a7       	std	Y+44, r25	; 0x2c
    2420:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Tas = 50ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	41 e0       	ldi	r20, 0x01	; 1
    2428:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <GPIO_writePin>
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	a0 e8       	ldi	r26, 0x80	; 128
    2432:	bf e3       	ldi	r27, 0x3F	; 63
    2434:	8f a3       	std	Y+39, r24	; 0x27
    2436:	98 a7       	std	Y+40, r25	; 0x28
    2438:	a9 a7       	std	Y+41, r26	; 0x29
    243a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243c:	6f a1       	ldd	r22, Y+39	; 0x27
    243e:	78 a5       	ldd	r23, Y+40	; 0x28
    2440:	89 a5       	ldd	r24, Y+41	; 0x29
    2442:	9a a5       	ldd	r25, Y+42	; 0x2a
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	4a ef       	ldi	r20, 0xFA	; 250
    244a:	54 e4       	ldi	r21, 0x44	; 68
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	8b a3       	std	Y+35, r24	; 0x23
    2456:	9c a3       	std	Y+36, r25	; 0x24
    2458:	ad a3       	std	Y+37, r26	; 0x25
    245a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    245c:	6b a1       	ldd	r22, Y+35	; 0x23
    245e:	7c a1       	ldd	r23, Y+36	; 0x24
    2460:	8d a1       	ldd	r24, Y+37	; 0x25
    2462:	9e a1       	ldd	r25, Y+38	; 0x26
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e8       	ldi	r20, 0x80	; 128
    246a:	5f e3       	ldi	r21, 0x3F	; 63
    246c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2470:	88 23       	and	r24, r24
    2472:	2c f4       	brge	.+10     	; 0x247e <LCD_sendCommand+0x160>
		__ticks = 1;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9a a3       	std	Y+34, r25	; 0x22
    247a:	89 a3       	std	Y+33, r24	; 0x21
    247c:	3f c0       	rjmp	.+126    	; 0x24fc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    247e:	6b a1       	ldd	r22, Y+35	; 0x23
    2480:	7c a1       	ldd	r23, Y+36	; 0x24
    2482:	8d a1       	ldd	r24, Y+37	; 0x25
    2484:	9e a1       	ldd	r25, Y+38	; 0x26
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	3f ef       	ldi	r19, 0xFF	; 255
    248a:	4f e7       	ldi	r20, 0x7F	; 127
    248c:	57 e4       	ldi	r21, 0x47	; 71
    248e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2492:	18 16       	cp	r1, r24
    2494:	4c f5       	brge	.+82     	; 0x24e8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2496:	6f a1       	ldd	r22, Y+39	; 0x27
    2498:	78 a5       	ldd	r23, Y+40	; 0x28
    249a:	89 a5       	ldd	r24, Y+41	; 0x29
    249c:	9a a5       	ldd	r25, Y+42	; 0x2a
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e2       	ldi	r20, 0x20	; 32
    24a4:	51 e4       	ldi	r21, 0x41	; 65
    24a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	9a a3       	std	Y+34, r25	; 0x22
    24bc:	89 a3       	std	Y+33, r24	; 0x21
    24be:	0f c0       	rjmp	.+30     	; 0x24de <LCD_sendCommand+0x1c0>
    24c0:	88 ec       	ldi	r24, 0xC8	; 200
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	98 a3       	std	Y+32, r25	; 0x20
    24c6:	8f 8f       	std	Y+31, r24	; 0x1f
    24c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24ca:	98 a1       	ldd	r25, Y+32	; 0x20
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <LCD_sendCommand+0x1ae>
    24d0:	98 a3       	std	Y+32, r25	; 0x20
    24d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d4:	89 a1       	ldd	r24, Y+33	; 0x21
    24d6:	9a a1       	ldd	r25, Y+34	; 0x22
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	9a a3       	std	Y+34, r25	; 0x22
    24dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24de:	89 a1       	ldd	r24, Y+33	; 0x21
    24e0:	9a a1       	ldd	r25, Y+34	; 0x22
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	69 f7       	brne	.-38     	; 0x24c0 <LCD_sendCommand+0x1a2>
    24e6:	14 c0       	rjmp	.+40     	; 0x2510 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e8:	6b a1       	ldd	r22, Y+35	; 0x23
    24ea:	7c a1       	ldd	r23, Y+36	; 0x24
    24ec:	8d a1       	ldd	r24, Y+37	; 0x25
    24ee:	9e a1       	ldd	r25, Y+38	; 0x26
    24f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	9a a3       	std	Y+34, r25	; 0x22
    24fa:	89 a3       	std	Y+33, r24	; 0x21
    24fc:	89 a1       	ldd	r24, Y+33	; 0x21
    24fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2500:	9e 8f       	std	Y+30, r25	; 0x1e
    2502:	8d 8f       	std	Y+29, r24	; 0x1d
    2504:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2506:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <LCD_sendCommand+0x1ea>
    250c:	9e 8f       	std	Y+30, r25	; 0x1e
    250e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */

	#elif(LCD_DATA_BITS_MODE == 8)
		GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2510:	82 e0       	ldi	r24, 0x02	; 2
    2512:	69 ad       	ldd	r22, Y+57	; 0x39
    2514:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <GPIO_writePort>
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	a0 e8       	ldi	r26, 0x80	; 128
    251e:	bf e3       	ldi	r27, 0x3F	; 63
    2520:	89 8f       	std	Y+25, r24	; 0x19
    2522:	9a 8f       	std	Y+26, r25	; 0x1a
    2524:	ab 8f       	std	Y+27, r26	; 0x1b
    2526:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2528:	69 8d       	ldd	r22, Y+25	; 0x19
    252a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    252c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    252e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	4a ef       	ldi	r20, 0xFA	; 250
    2536:	54 e4       	ldi	r21, 0x44	; 68
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	8d 8b       	std	Y+21, r24	; 0x15
    2542:	9e 8b       	std	Y+22, r25	; 0x16
    2544:	af 8b       	std	Y+23, r26	; 0x17
    2546:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2548:	6d 89       	ldd	r22, Y+21	; 0x15
    254a:	7e 89       	ldd	r23, Y+22	; 0x16
    254c:	8f 89       	ldd	r24, Y+23	; 0x17
    254e:	98 8d       	ldd	r25, Y+24	; 0x18
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e8       	ldi	r20, 0x80	; 128
    2556:	5f e3       	ldi	r21, 0x3F	; 63
    2558:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255c:	88 23       	and	r24, r24
    255e:	2c f4       	brge	.+10     	; 0x256a <LCD_sendCommand+0x24c>
		__ticks = 1;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9c 8b       	std	Y+20, r25	; 0x14
    2566:	8b 8b       	std	Y+19, r24	; 0x13
    2568:	3f c0       	rjmp	.+126    	; 0x25e8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    256a:	6d 89       	ldd	r22, Y+21	; 0x15
    256c:	7e 89       	ldd	r23, Y+22	; 0x16
    256e:	8f 89       	ldd	r24, Y+23	; 0x17
    2570:	98 8d       	ldd	r25, Y+24	; 0x18
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257e:	18 16       	cp	r1, r24
    2580:	4c f5       	brge	.+82     	; 0x25d4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2582:	69 8d       	ldd	r22, Y+25	; 0x19
    2584:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2586:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2588:	9c 8d       	ldd	r25, Y+28	; 0x1c
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e2       	ldi	r20, 0x20	; 32
    2590:	51 e4       	ldi	r21, 0x41	; 65
    2592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	bc 01       	movw	r22, r24
    259c:	cd 01       	movw	r24, r26
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9c 8b       	std	Y+20, r25	; 0x14
    25a8:	8b 8b       	std	Y+19, r24	; 0x13
    25aa:	0f c0       	rjmp	.+30     	; 0x25ca <LCD_sendCommand+0x2ac>
    25ac:	88 ec       	ldi	r24, 0xC8	; 200
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	9a 8b       	std	Y+18, r25	; 0x12
    25b2:	89 8b       	std	Y+17, r24	; 0x11
    25b4:	89 89       	ldd	r24, Y+17	; 0x11
    25b6:	9a 89       	ldd	r25, Y+18	; 0x12
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <LCD_sendCommand+0x29a>
    25bc:	9a 8b       	std	Y+18, r25	; 0x12
    25be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c0:	8b 89       	ldd	r24, Y+19	; 0x13
    25c2:	9c 89       	ldd	r25, Y+20	; 0x14
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	9c 8b       	std	Y+20, r25	; 0x14
    25c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ca:	8b 89       	ldd	r24, Y+19	; 0x13
    25cc:	9c 89       	ldd	r25, Y+20	; 0x14
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	69 f7       	brne	.-38     	; 0x25ac <LCD_sendCommand+0x28e>
    25d2:	14 c0       	rjmp	.+40     	; 0x25fc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d4:	6d 89       	ldd	r22, Y+21	; 0x15
    25d6:	7e 89       	ldd	r23, Y+22	; 0x16
    25d8:	8f 89       	ldd	r24, Y+23	; 0x17
    25da:	98 8d       	ldd	r25, Y+24	; 0x18
    25dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	9c 8b       	std	Y+20, r25	; 0x14
    25e6:	8b 8b       	std	Y+19, r24	; 0x13
    25e8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ea:	9c 89       	ldd	r25, Y+20	; 0x14
    25ec:	98 8b       	std	Y+16, r25	; 0x10
    25ee:	8f 87       	std	Y+15, r24	; 0x0f
    25f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f2:	98 89       	ldd	r25, Y+16	; 0x10
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <LCD_sendCommand+0x2d6>
    25f8:	98 8b       	std	Y+16, r25	; 0x10
    25fa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	60 e0       	ldi	r22, 0x00	; 0
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <GPIO_writePin>
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	a0 e8       	ldi	r26, 0x80	; 128
    260c:	bf e3       	ldi	r27, 0x3F	; 63
    260e:	8b 87       	std	Y+11, r24	; 0x0b
    2610:	9c 87       	std	Y+12, r25	; 0x0c
    2612:	ad 87       	std	Y+13, r26	; 0x0d
    2614:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2616:	6b 85       	ldd	r22, Y+11	; 0x0b
    2618:	7c 85       	ldd	r23, Y+12	; 0x0c
    261a:	8d 85       	ldd	r24, Y+13	; 0x0d
    261c:	9e 85       	ldd	r25, Y+14	; 0x0e
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a ef       	ldi	r20, 0xFA	; 250
    2624:	54 e4       	ldi	r21, 0x44	; 68
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	8f 83       	std	Y+7, r24	; 0x07
    2630:	98 87       	std	Y+8, r25	; 0x08
    2632:	a9 87       	std	Y+9, r26	; 0x09
    2634:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2636:	6f 81       	ldd	r22, Y+7	; 0x07
    2638:	78 85       	ldd	r23, Y+8	; 0x08
    263a:	89 85       	ldd	r24, Y+9	; 0x09
    263c:	9a 85       	ldd	r25, Y+10	; 0x0a
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e8       	ldi	r20, 0x80	; 128
    2644:	5f e3       	ldi	r21, 0x3F	; 63
    2646:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    264a:	88 23       	and	r24, r24
    264c:	2c f4       	brge	.+10     	; 0x2658 <LCD_sendCommand+0x33a>
		__ticks = 1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	9e 83       	std	Y+6, r25	; 0x06
    2654:	8d 83       	std	Y+5, r24	; 0x05
    2656:	3f c0       	rjmp	.+126    	; 0x26d6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2658:	6f 81       	ldd	r22, Y+7	; 0x07
    265a:	78 85       	ldd	r23, Y+8	; 0x08
    265c:	89 85       	ldd	r24, Y+9	; 0x09
    265e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	3f ef       	ldi	r19, 0xFF	; 255
    2664:	4f e7       	ldi	r20, 0x7F	; 127
    2666:	57 e4       	ldi	r21, 0x47	; 71
    2668:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    266c:	18 16       	cp	r1, r24
    266e:	4c f5       	brge	.+82     	; 0x26c2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2670:	6b 85       	ldd	r22, Y+11	; 0x0b
    2672:	7c 85       	ldd	r23, Y+12	; 0x0c
    2674:	8d 85       	ldd	r24, Y+13	; 0x0d
    2676:	9e 85       	ldd	r25, Y+14	; 0x0e
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e2       	ldi	r20, 0x20	; 32
    267e:	51 e4       	ldi	r21, 0x41	; 65
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
    2698:	0f c0       	rjmp	.+30     	; 0x26b8 <LCD_sendCommand+0x39a>
    269a:	88 ec       	ldi	r24, 0xC8	; 200
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9c 83       	std	Y+4, r25	; 0x04
    26a0:	8b 83       	std	Y+3, r24	; 0x03
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9c 81       	ldd	r25, Y+4	; 0x04
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <LCD_sendCommand+0x388>
    26aa:	9c 83       	std	Y+4, r25	; 0x04
    26ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	8d 81       	ldd	r24, Y+5	; 0x05
    26b0:	9e 81       	ldd	r25, Y+6	; 0x06
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	9e 83       	std	Y+6, r25	; 0x06
    26b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ba:	9e 81       	ldd	r25, Y+6	; 0x06
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	69 f7       	brne	.-38     	; 0x269a <LCD_sendCommand+0x37c>
    26c0:	14 c0       	rjmp	.+40     	; 0x26ea <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	6f 81       	ldd	r22, Y+7	; 0x07
    26c4:	78 85       	ldd	r23, Y+8	; 0x08
    26c6:	89 85       	ldd	r24, Y+9	; 0x09
    26c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	9e 83       	std	Y+6, r25	; 0x06
    26d4:	8d 83       	std	Y+5, r24	; 0x05
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	9a 83       	std	Y+2, r25	; 0x02
    26dc:	89 83       	std	Y+1, r24	; 0x01
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	9a 81       	ldd	r25, Y+2	; 0x02
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <LCD_sendCommand+0x3c4>
    26e6:	9a 83       	std	Y+2, r25	; 0x02
    26e8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif

}
    26ea:	e9 96       	adiw	r28, 0x39	; 57
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <LCD_displayCharacter>:
 * Description
 * display char in the lcd
 *
 */
void LCD_displayCharacter(uint8 data)
{
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	e9 97       	sbiw	r28, 0x39	; 57
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	61 e0       	ldi	r22, 0x01	; 1
    2716:	41 e0       	ldi	r20, 0x01	; 1
    2718:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <GPIO_writePin>
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	a0 e8       	ldi	r26, 0x80	; 128
    2722:	bf e3       	ldi	r27, 0x3F	; 63
    2724:	8d ab       	std	Y+53, r24	; 0x35
    2726:	9e ab       	std	Y+54, r25	; 0x36
    2728:	af ab       	std	Y+55, r26	; 0x37
    272a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272c:	6d a9       	ldd	r22, Y+53	; 0x35
    272e:	7e a9       	ldd	r23, Y+54	; 0x36
    2730:	8f a9       	ldd	r24, Y+55	; 0x37
    2732:	98 ad       	ldd	r25, Y+56	; 0x38
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	4a ef       	ldi	r20, 0xFA	; 250
    273a:	54 e4       	ldi	r21, 0x44	; 68
    273c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	89 ab       	std	Y+49, r24	; 0x31
    2746:	9a ab       	std	Y+50, r25	; 0x32
    2748:	ab ab       	std	Y+51, r26	; 0x33
    274a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    274c:	69 a9       	ldd	r22, Y+49	; 0x31
    274e:	7a a9       	ldd	r23, Y+50	; 0x32
    2750:	8b a9       	ldd	r24, Y+51	; 0x33
    2752:	9c a9       	ldd	r25, Y+52	; 0x34
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e8       	ldi	r20, 0x80	; 128
    275a:	5f e3       	ldi	r21, 0x3F	; 63
    275c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2760:	88 23       	and	r24, r24
    2762:	2c f4       	brge	.+10     	; 0x276e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	98 ab       	std	Y+48, r25	; 0x30
    276a:	8f a7       	std	Y+47, r24	; 0x2f
    276c:	3f c0       	rjmp	.+126    	; 0x27ec <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    276e:	69 a9       	ldd	r22, Y+49	; 0x31
    2770:	7a a9       	ldd	r23, Y+50	; 0x32
    2772:	8b a9       	ldd	r24, Y+51	; 0x33
    2774:	9c a9       	ldd	r25, Y+52	; 0x34
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	3f ef       	ldi	r19, 0xFF	; 255
    277a:	4f e7       	ldi	r20, 0x7F	; 127
    277c:	57 e4       	ldi	r21, 0x47	; 71
    277e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2782:	18 16       	cp	r1, r24
    2784:	4c f5       	brge	.+82     	; 0x27d8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2786:	6d a9       	ldd	r22, Y+53	; 0x35
    2788:	7e a9       	ldd	r23, Y+54	; 0x36
    278a:	8f a9       	ldd	r24, Y+55	; 0x37
    278c:	98 ad       	ldd	r25, Y+56	; 0x38
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e2       	ldi	r20, 0x20	; 32
    2794:	51 e4       	ldi	r21, 0x41	; 65
    2796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	bc 01       	movw	r22, r24
    27a0:	cd 01       	movw	r24, r26
    27a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	98 ab       	std	Y+48, r25	; 0x30
    27ac:	8f a7       	std	Y+47, r24	; 0x2f
    27ae:	0f c0       	rjmp	.+30     	; 0x27ce <LCD_displayCharacter+0xd2>
    27b0:	88 ec       	ldi	r24, 0xC8	; 200
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	9e a7       	std	Y+46, r25	; 0x2e
    27b6:	8d a7       	std	Y+45, r24	; 0x2d
    27b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    27ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <LCD_displayCharacter+0xc0>
    27c0:	9e a7       	std	Y+46, r25	; 0x2e
    27c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c6:	98 a9       	ldd	r25, Y+48	; 0x30
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	98 ab       	std	Y+48, r25	; 0x30
    27cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d0:	98 a9       	ldd	r25, Y+48	; 0x30
    27d2:	00 97       	sbiw	r24, 0x00	; 0
    27d4:	69 f7       	brne	.-38     	; 0x27b0 <LCD_displayCharacter+0xb4>
    27d6:	14 c0       	rjmp	.+40     	; 0x2800 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d8:	69 a9       	ldd	r22, Y+49	; 0x31
    27da:	7a a9       	ldd	r23, Y+50	; 0x32
    27dc:	8b a9       	ldd	r24, Y+51	; 0x33
    27de:	9c a9       	ldd	r25, Y+52	; 0x34
    27e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	98 ab       	std	Y+48, r25	; 0x30
    27ea:	8f a7       	std	Y+47, r24	; 0x2f
    27ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ee:	98 a9       	ldd	r25, Y+48	; 0x30
    27f0:	9c a7       	std	Y+44, r25	; 0x2c
    27f2:	8b a7       	std	Y+43, r24	; 0x2b
    27f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    27f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <LCD_displayCharacter+0xfc>
    27fc:	9c a7       	std	Y+44, r25	; 0x2c
    27fe:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Tas = 50ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	41 e0       	ldi	r20, 0x01	; 1
    2806:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <GPIO_writePin>
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	a0 e8       	ldi	r26, 0x80	; 128
    2810:	bf e3       	ldi	r27, 0x3F	; 63
    2812:	8f a3       	std	Y+39, r24	; 0x27
    2814:	98 a7       	std	Y+40, r25	; 0x28
    2816:	a9 a7       	std	Y+41, r26	; 0x29
    2818:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281a:	6f a1       	ldd	r22, Y+39	; 0x27
    281c:	78 a5       	ldd	r23, Y+40	; 0x28
    281e:	89 a5       	ldd	r24, Y+41	; 0x29
    2820:	9a a5       	ldd	r25, Y+42	; 0x2a
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	4a ef       	ldi	r20, 0xFA	; 250
    2828:	54 e4       	ldi	r21, 0x44	; 68
    282a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	8b a3       	std	Y+35, r24	; 0x23
    2834:	9c a3       	std	Y+36, r25	; 0x24
    2836:	ad a3       	std	Y+37, r26	; 0x25
    2838:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    283a:	6b a1       	ldd	r22, Y+35	; 0x23
    283c:	7c a1       	ldd	r23, Y+36	; 0x24
    283e:	8d a1       	ldd	r24, Y+37	; 0x25
    2840:	9e a1       	ldd	r25, Y+38	; 0x26
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	40 e8       	ldi	r20, 0x80	; 128
    2848:	5f e3       	ldi	r21, 0x3F	; 63
    284a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    284e:	88 23       	and	r24, r24
    2850:	2c f4       	brge	.+10     	; 0x285c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	9a a3       	std	Y+34, r25	; 0x22
    2858:	89 a3       	std	Y+33, r24	; 0x21
    285a:	3f c0       	rjmp	.+126    	; 0x28da <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    285c:	6b a1       	ldd	r22, Y+35	; 0x23
    285e:	7c a1       	ldd	r23, Y+36	; 0x24
    2860:	8d a1       	ldd	r24, Y+37	; 0x25
    2862:	9e a1       	ldd	r25, Y+38	; 0x26
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	3f ef       	ldi	r19, 0xFF	; 255
    2868:	4f e7       	ldi	r20, 0x7F	; 127
    286a:	57 e4       	ldi	r21, 0x47	; 71
    286c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2870:	18 16       	cp	r1, r24
    2872:	4c f5       	brge	.+82     	; 0x28c6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2874:	6f a1       	ldd	r22, Y+39	; 0x27
    2876:	78 a5       	ldd	r23, Y+40	; 0x28
    2878:	89 a5       	ldd	r24, Y+41	; 0x29
    287a:	9a a5       	ldd	r25, Y+42	; 0x2a
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e2       	ldi	r20, 0x20	; 32
    2882:	51 e4       	ldi	r21, 0x41	; 65
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	9a a3       	std	Y+34, r25	; 0x22
    289a:	89 a3       	std	Y+33, r24	; 0x21
    289c:	0f c0       	rjmp	.+30     	; 0x28bc <LCD_displayCharacter+0x1c0>
    289e:	88 ec       	ldi	r24, 0xC8	; 200
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	98 a3       	std	Y+32, r25	; 0x20
    28a4:	8f 8f       	std	Y+31, r24	; 0x1f
    28a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28a8:	98 a1       	ldd	r25, Y+32	; 0x20
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	f1 f7       	brne	.-4      	; 0x28aa <LCD_displayCharacter+0x1ae>
    28ae:	98 a3       	std	Y+32, r25	; 0x20
    28b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b2:	89 a1       	ldd	r24, Y+33	; 0x21
    28b4:	9a a1       	ldd	r25, Y+34	; 0x22
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	9a a3       	std	Y+34, r25	; 0x22
    28ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28bc:	89 a1       	ldd	r24, Y+33	; 0x21
    28be:	9a a1       	ldd	r25, Y+34	; 0x22
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	69 f7       	brne	.-38     	; 0x289e <LCD_displayCharacter+0x1a2>
    28c4:	14 c0       	rjmp	.+40     	; 0x28ee <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c6:	6b a1       	ldd	r22, Y+35	; 0x23
    28c8:	7c a1       	ldd	r23, Y+36	; 0x24
    28ca:	8d a1       	ldd	r24, Y+37	; 0x25
    28cc:	9e a1       	ldd	r25, Y+38	; 0x26
    28ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	9a a3       	std	Y+34, r25	; 0x22
    28d8:	89 a3       	std	Y+33, r24	; 0x21
    28da:	89 a1       	ldd	r24, Y+33	; 0x21
    28dc:	9a a1       	ldd	r25, Y+34	; 0x22
    28de:	9e 8f       	std	Y+30, r25	; 0x1e
    28e0:	8d 8f       	std	Y+29, r24	; 0x1d
    28e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <LCD_displayCharacter+0x1ea>
    28ea:	9e 8f       	std	Y+30, r25	; 0x1e
    28ec:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */

	#elif(LCD_DATA_BITS_MODE == 8)
		GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    28ee:	82 e0       	ldi	r24, 0x02	; 2
    28f0:	69 ad       	ldd	r22, Y+57	; 0x39
    28f2:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <GPIO_writePort>
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	a0 e8       	ldi	r26, 0x80	; 128
    28fc:	bf e3       	ldi	r27, 0x3F	; 63
    28fe:	89 8f       	std	Y+25, r24	; 0x19
    2900:	9a 8f       	std	Y+26, r25	; 0x1a
    2902:	ab 8f       	std	Y+27, r26	; 0x1b
    2904:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2906:	69 8d       	ldd	r22, Y+25	; 0x19
    2908:	7a 8d       	ldd	r23, Y+26	; 0x1a
    290a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    290c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	4a ef       	ldi	r20, 0xFA	; 250
    2914:	54 e4       	ldi	r21, 0x44	; 68
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	8d 8b       	std	Y+21, r24	; 0x15
    2920:	9e 8b       	std	Y+22, r25	; 0x16
    2922:	af 8b       	std	Y+23, r26	; 0x17
    2924:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2926:	6d 89       	ldd	r22, Y+21	; 0x15
    2928:	7e 89       	ldd	r23, Y+22	; 0x16
    292a:	8f 89       	ldd	r24, Y+23	; 0x17
    292c:	98 8d       	ldd	r25, Y+24	; 0x18
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e8       	ldi	r20, 0x80	; 128
    2934:	5f e3       	ldi	r21, 0x3F	; 63
    2936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    293a:	88 23       	and	r24, r24
    293c:	2c f4       	brge	.+10     	; 0x2948 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9c 8b       	std	Y+20, r25	; 0x14
    2944:	8b 8b       	std	Y+19, r24	; 0x13
    2946:	3f c0       	rjmp	.+126    	; 0x29c6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2948:	6d 89       	ldd	r22, Y+21	; 0x15
    294a:	7e 89       	ldd	r23, Y+22	; 0x16
    294c:	8f 89       	ldd	r24, Y+23	; 0x17
    294e:	98 8d       	ldd	r25, Y+24	; 0x18
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	3f ef       	ldi	r19, 0xFF	; 255
    2954:	4f e7       	ldi	r20, 0x7F	; 127
    2956:	57 e4       	ldi	r21, 0x47	; 71
    2958:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295c:	18 16       	cp	r1, r24
    295e:	4c f5       	brge	.+82     	; 0x29b2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2960:	69 8d       	ldd	r22, Y+25	; 0x19
    2962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e2       	ldi	r20, 0x20	; 32
    296e:	51 e4       	ldi	r21, 0x41	; 65
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	9c 8b       	std	Y+20, r25	; 0x14
    2986:	8b 8b       	std	Y+19, r24	; 0x13
    2988:	0f c0       	rjmp	.+30     	; 0x29a8 <LCD_displayCharacter+0x2ac>
    298a:	88 ec       	ldi	r24, 0xC8	; 200
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	9a 8b       	std	Y+18, r25	; 0x12
    2990:	89 8b       	std	Y+17, r24	; 0x11
    2992:	89 89       	ldd	r24, Y+17	; 0x11
    2994:	9a 89       	ldd	r25, Y+18	; 0x12
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <LCD_displayCharacter+0x29a>
    299a:	9a 8b       	std	Y+18, r25	; 0x12
    299c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299e:	8b 89       	ldd	r24, Y+19	; 0x13
    29a0:	9c 89       	ldd	r25, Y+20	; 0x14
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	9c 8b       	std	Y+20, r25	; 0x14
    29a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a8:	8b 89       	ldd	r24, Y+19	; 0x13
    29aa:	9c 89       	ldd	r25, Y+20	; 0x14
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	69 f7       	brne	.-38     	; 0x298a <LCD_displayCharacter+0x28e>
    29b0:	14 c0       	rjmp	.+40     	; 0x29da <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b2:	6d 89       	ldd	r22, Y+21	; 0x15
    29b4:	7e 89       	ldd	r23, Y+22	; 0x16
    29b6:	8f 89       	ldd	r24, Y+23	; 0x17
    29b8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9c 8b       	std	Y+20, r25	; 0x14
    29c4:	8b 8b       	std	Y+19, r24	; 0x13
    29c6:	8b 89       	ldd	r24, Y+19	; 0x13
    29c8:	9c 89       	ldd	r25, Y+20	; 0x14
    29ca:	98 8b       	std	Y+16, r25	; 0x10
    29cc:	8f 87       	std	Y+15, r24	; 0x0f
    29ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d0:	98 89       	ldd	r25, Y+16	; 0x10
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <LCD_displayCharacter+0x2d6>
    29d6:	98 8b       	std	Y+16, r25	; 0x10
    29d8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	60 e0       	ldi	r22, 0x00	; 0
    29de:	40 e0       	ldi	r20, 0x00	; 0
    29e0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <GPIO_writePin>
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	a0 e8       	ldi	r26, 0x80	; 128
    29ea:	bf e3       	ldi	r27, 0x3F	; 63
    29ec:	8b 87       	std	Y+11, r24	; 0x0b
    29ee:	9c 87       	std	Y+12, r25	; 0x0c
    29f0:	ad 87       	std	Y+13, r26	; 0x0d
    29f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	4a ef       	ldi	r20, 0xFA	; 250
    2a02:	54 e4       	ldi	r21, 0x44	; 68
    2a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	8f 83       	std	Y+7, r24	; 0x07
    2a0e:	98 87       	std	Y+8, r25	; 0x08
    2a10:	a9 87       	std	Y+9, r26	; 0x09
    2a12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a14:	6f 81       	ldd	r22, Y+7	; 0x07
    2a16:	78 85       	ldd	r23, Y+8	; 0x08
    2a18:	89 85       	ldd	r24, Y+9	; 0x09
    2a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e8       	ldi	r20, 0x80	; 128
    2a22:	5f e3       	ldi	r21, 0x3F	; 63
    2a24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a28:	88 23       	and	r24, r24
    2a2a:	2c f4       	brge	.+10     	; 0x2a36 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	3f c0       	rjmp	.+126    	; 0x2ab4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2a36:	6f 81       	ldd	r22, Y+7	; 0x07
    2a38:	78 85       	ldd	r23, Y+8	; 0x08
    2a3a:	89 85       	ldd	r24, Y+9	; 0x09
    2a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	3f ef       	ldi	r19, 0xFF	; 255
    2a42:	4f e7       	ldi	r20, 0x7F	; 127
    2a44:	57 e4       	ldi	r21, 0x47	; 71
    2a46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4a:	18 16       	cp	r1, r24
    2a4c:	4c f5       	brge	.+82     	; 0x2aa0 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	40 e2       	ldi	r20, 0x20	; 32
    2a5c:	51 e4       	ldi	r21, 0x41	; 65
    2a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	bc 01       	movw	r22, r24
    2a68:	cd 01       	movw	r24, r26
    2a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9e 83       	std	Y+6, r25	; 0x06
    2a74:	8d 83       	std	Y+5, r24	; 0x05
    2a76:	0f c0       	rjmp	.+30     	; 0x2a96 <LCD_displayCharacter+0x39a>
    2a78:	88 ec       	ldi	r24, 0xC8	; 200
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	9c 83       	std	Y+4, r25	; 0x04
    2a7e:	8b 83       	std	Y+3, r24	; 0x03
    2a80:	8b 81       	ldd	r24, Y+3	; 0x03
    2a82:	9c 81       	ldd	r25, Y+4	; 0x04
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	f1 f7       	brne	.-4      	; 0x2a84 <LCD_displayCharacter+0x388>
    2a88:	9c 83       	std	Y+4, r25	; 0x04
    2a8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	9e 83       	std	Y+6, r25	; 0x06
    2a94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a96:	8d 81       	ldd	r24, Y+5	; 0x05
    2a98:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	69 f7       	brne	.-38     	; 0x2a78 <LCD_displayCharacter+0x37c>
    2a9e:	14 c0       	rjmp	.+40     	; 0x2ac8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa2:	78 85       	ldd	r23, Y+8	; 0x08
    2aa4:	89 85       	ldd	r24, Y+9	; 0x09
    2aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	9e 83       	std	Y+6, r25	; 0x06
    2ab2:	8d 83       	std	Y+5, r24	; 0x05
    2ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab8:	9a 83       	std	Y+2, r25	; 0x02
    2aba:	89 83       	std	Y+1, r24	; 0x01
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	f1 f7       	brne	.-4      	; 0x2ac0 <LCD_displayCharacter+0x3c4>
    2ac4:	9a 83       	std	Y+2, r25	; 0x02
    2ac6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif
}
    2ac8:	e9 96       	adiw	r28, 0x39	; 57
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
 {
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <LCD_displayString+0x6>
    2ae0:	0f 92       	push	r0
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	9b 83       	std	Y+3, r25	; 0x03
    2ae8:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    2aea:	19 82       	std	Y+1, r1	; 0x01
    2aec:	0e c0       	rjmp	.+28     	; 0x2b0a <LCD_displayString+0x30>
			while(Str[i] != '\0')
			{
				LCD_displayCharacter(Str[i]);
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	28 2f       	mov	r18, r24
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	8a 81       	ldd	r24, Y+2	; 0x02
    2af6:	9b 81       	ldd	r25, Y+3	; 0x03
    2af8:	fc 01       	movw	r30, r24
    2afa:	e2 0f       	add	r30, r18
    2afc:	f3 1f       	adc	r31, r19
    2afe:	80 81       	ld	r24, Z
    2b00:	0e 94 7e 13 	call	0x26fc	; 0x26fc <LCD_displayCharacter>
				i++;
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	8f 5f       	subi	r24, 0xFF	; 255
    2b08:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const char *Str)
 {

	uint8 i = 0;
			while(Str[i] != '\0')
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	28 2f       	mov	r18, r24
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	8a 81       	ldd	r24, Y+2	; 0x02
    2b12:	9b 81       	ldd	r25, Y+3	; 0x03
    2b14:	fc 01       	movw	r30, r24
    2b16:	e2 0f       	add	r30, r18
    2b18:	f3 1f       	adc	r31, r19
    2b1a:	80 81       	ld	r24, Z
    2b1c:	88 23       	and	r24, r24
    2b1e:	39 f7       	brne	.-50     	; 0x2aee <LCD_displayString+0x14>
				LCD_displayCharacter(*Str);
				Str++;
			}
			*********************************************************/

 }
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	08 95       	ret

00002b2c <LCD_moveCursor>:
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */

void LCD_moveCursor(uint8 row,uint8 col)
{
    2b2c:	df 93       	push	r29
    2b2e:	cf 93       	push	r28
    2b30:	00 d0       	rcall	.+0      	; 0x2b32 <LCD_moveCursor+0x6>
    2b32:	00 d0       	rcall	.+0      	; 0x2b34 <LCD_moveCursor+0x8>
    2b34:	0f 92       	push	r0
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	8a 83       	std	Y+2, r24	; 0x02
    2b3c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch (row)
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	28 2f       	mov	r18, r24
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	3d 83       	std	Y+5, r19	; 0x05
    2b46:	2c 83       	std	Y+4, r18	; 0x04
    2b48:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4c:	81 30       	cpi	r24, 0x01	; 1
    2b4e:	91 05       	cpc	r25, r1
    2b50:	c1 f0       	breq	.+48     	; 0x2b82 <LCD_moveCursor+0x56>
    2b52:	2c 81       	ldd	r18, Y+4	; 0x04
    2b54:	3d 81       	ldd	r19, Y+5	; 0x05
    2b56:	22 30       	cpi	r18, 0x02	; 2
    2b58:	31 05       	cpc	r19, r1
    2b5a:	2c f4       	brge	.+10     	; 0x2b66 <LCD_moveCursor+0x3a>
    2b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b60:	00 97       	sbiw	r24, 0x00	; 0
    2b62:	61 f0       	breq	.+24     	; 0x2b7c <LCD_moveCursor+0x50>
    2b64:	19 c0       	rjmp	.+50     	; 0x2b98 <LCD_moveCursor+0x6c>
    2b66:	2c 81       	ldd	r18, Y+4	; 0x04
    2b68:	3d 81       	ldd	r19, Y+5	; 0x05
    2b6a:	22 30       	cpi	r18, 0x02	; 2
    2b6c:	31 05       	cpc	r19, r1
    2b6e:	69 f0       	breq	.+26     	; 0x2b8a <LCD_moveCursor+0x5e>
    2b70:	8c 81       	ldd	r24, Y+4	; 0x04
    2b72:	9d 81       	ldd	r25, Y+5	; 0x05
    2b74:	83 30       	cpi	r24, 0x03	; 3
    2b76:	91 05       	cpc	r25, r1
    2b78:	61 f0       	breq	.+24     	; 0x2b92 <LCD_moveCursor+0x66>
    2b7a:	0e c0       	rjmp	.+28     	; 0x2b98 <LCD_moveCursor+0x6c>
	{
	case 0 :
		lcd_memory_address = col;
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	0b c0       	rjmp	.+22     	; 0x2b98 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = 0x40 +col;
    2b82:	8b 81       	ldd	r24, Y+3	; 0x03
    2b84:	80 5c       	subi	r24, 0xC0	; 192
    2b86:	89 83       	std	Y+1, r24	; 0x01
    2b88:	07 c0       	rjmp	.+14     	; 0x2b98 <LCD_moveCursor+0x6c>
		break;
	case 2 :
		lcd_memory_address = 0x10 +col;
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	80 5f       	subi	r24, 0xF0	; 240
    2b8e:	89 83       	std	Y+1, r24	; 0x01
    2b90:	03 c0       	rjmp	.+6      	; 0x2b98 <LCD_moveCursor+0x6c>
		break;
	case 3 :
		lcd_memory_address = 0x50 +col;
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	80 5b       	subi	r24, 0xB0	; 176
    2b96:	89 83       	std	Y+1, r24	; 0x01
	 * you need to set the last of the address with one
	 * so or the address with 0x80 the result send it as command to LCD_sendCommand(command)
	 * command  = 0x80 | lcd_memory_address
	 * we defined LCD_SET_CURSOR_LOCATION  with      0x80
	 */
	LCD_sendCommand(lcd_memory_address| LCD_SET_CURSOR_LOCATION);
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	80 68       	ori	r24, 0x80	; 128
    2b9c:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_sendCommand>

}
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	cf 91       	pop	r28
    2bac:	df 91       	pop	r29
    2bae:	08 95       	ret

00002bb0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2bb0:	df 93       	push	r29
    2bb2:	cf 93       	push	r28
    2bb4:	00 d0       	rcall	.+0      	; 0x2bb6 <LCD_displayStringRowColumn+0x6>
    2bb6:	00 d0       	rcall	.+0      	; 0x2bb8 <LCD_displayStringRowColumn+0x8>
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	6a 83       	std	Y+2, r22	; 0x02
    2bc0:	5c 83       	std	Y+4, r21	; 0x04
    2bc2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);   /* go to to the required LCD position */
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	6a 81       	ldd	r22, Y+2	; 0x02
    2bc8:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <LCD_moveCursor>
	LCD_displayString(Str);
    2bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bce:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd0:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
}
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	0f 90       	pop	r0
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	62 97       	sbiw	r28, 0x12	; 18
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	9a 8b       	std	Y+18, r25	; 0x12
    2bf8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2bfa:	89 89       	ldd	r24, Y+17	; 0x11
    2bfc:	9a 89       	ldd	r25, Y+18	; 0x12
    2bfe:	9e 01       	movw	r18, r28
    2c00:	2f 5f       	subi	r18, 0xFF	; 255
    2c02:	3f 4f       	sbci	r19, 0xFF	; 255
    2c04:	b9 01       	movw	r22, r18
    2c06:	4a e0       	ldi	r20, 0x0A	; 10
    2c08:	50 e0       	ldi	r21, 0x00	; 0
    2c0a:	0e 94 b6 18 	call	0x316c	; 0x316c <itoa>
   LCD_displayString(buff); /* Display the string */
    2c0e:	ce 01       	movw	r24, r28
    2c10:	01 96       	adiw	r24, 0x01	; 1
    2c12:	0e 94 6d 15 	call	0x2ada	; 0x2ada <LCD_displayString>
}
    2c16:	62 96       	adiw	r28, 0x12	; 18
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_sendCommand>
}
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	08 95       	ret

00002c3c <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    2c3c:	1f 92       	push	r1
    2c3e:	0f 92       	push	r0
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	0f 92       	push	r0
    2c44:	11 24       	eor	r1, r1
    2c46:	2f 93       	push	r18
    2c48:	3f 93       	push	r19
    2c4a:	4f 93       	push	r20
    2c4c:	5f 93       	push	r21
    2c4e:	6f 93       	push	r22
    2c50:	7f 93       	push	r23
    2c52:	8f 93       	push	r24
    2c54:	9f 93       	push	r25
    2c56:	af 93       	push	r26
    2c58:	bf 93       	push	r27
    2c5a:	ef 93       	push	r30
    2c5c:	ff 93       	push	r31
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2c66:	80 91 77 01 	lds	r24, 0x0177
    2c6a:	90 91 78 01 	lds	r25, 0x0178
    2c6e:	00 97       	sbiw	r24, 0x00	; 0
    2c70:	29 f0       	breq	.+10     	; 0x2c7c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2c72:	e0 91 77 01 	lds	r30, 0x0177
    2c76:	f0 91 78 01 	lds	r31, 0x0178
    2c7a:	09 95       	icall
	}
}
    2c7c:	cf 91       	pop	r28
    2c7e:	df 91       	pop	r29
    2c80:	ff 91       	pop	r31
    2c82:	ef 91       	pop	r30
    2c84:	bf 91       	pop	r27
    2c86:	af 91       	pop	r26
    2c88:	9f 91       	pop	r25
    2c8a:	8f 91       	pop	r24
    2c8c:	7f 91       	pop	r23
    2c8e:	6f 91       	pop	r22
    2c90:	5f 91       	pop	r21
    2c92:	4f 91       	pop	r20
    2c94:	3f 91       	pop	r19
    2c96:	2f 91       	pop	r18
    2c98:	0f 90       	pop	r0
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	0f 90       	pop	r0
    2c9e:	1f 90       	pop	r1
    2ca0:	18 95       	reti

00002ca2 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2ca2:	1f 92       	push	r1
    2ca4:	0f 92       	push	r0
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	0f 92       	push	r0
    2caa:	11 24       	eor	r1, r1
    2cac:	2f 93       	push	r18
    2cae:	3f 93       	push	r19
    2cb0:	4f 93       	push	r20
    2cb2:	5f 93       	push	r21
    2cb4:	6f 93       	push	r22
    2cb6:	7f 93       	push	r23
    2cb8:	8f 93       	push	r24
    2cba:	9f 93       	push	r25
    2cbc:	af 93       	push	r26
    2cbe:	bf 93       	push	r27
    2cc0:	ef 93       	push	r30
    2cc2:	ff 93       	push	r31
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2ccc:	80 91 77 01 	lds	r24, 0x0177
    2cd0:	90 91 78 01 	lds	r25, 0x0178
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	29 f0       	breq	.+10     	; 0x2ce2 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2cd8:	e0 91 77 01 	lds	r30, 0x0177
    2cdc:	f0 91 78 01 	lds	r31, 0x0178
    2ce0:	09 95       	icall
	}
}
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	ff 91       	pop	r31
    2ce8:	ef 91       	pop	r30
    2cea:	bf 91       	pop	r27
    2cec:	af 91       	pop	r26
    2cee:	9f 91       	pop	r25
    2cf0:	8f 91       	pop	r24
    2cf2:	7f 91       	pop	r23
    2cf4:	6f 91       	pop	r22
    2cf6:	5f 91       	pop	r21
    2cf8:	4f 91       	pop	r20
    2cfa:	3f 91       	pop	r19
    2cfc:	2f 91       	pop	r18
    2cfe:	0f 90       	pop	r0
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	0f 90       	pop	r0
    2d04:	1f 90       	pop	r1
    2d06:	18 95       	reti

00002d08 <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2d08:	df 93       	push	r29
    2d0a:	cf 93       	push	r28
    2d0c:	00 d0       	rcall	.+0      	; 0x2d0e <Timer1_init+0x6>
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	9a 83       	std	Y+2, r25	; 0x02
    2d14:	89 83       	std	Y+1, r24	; 0x01

	// Set initial value
	TCNT1 = (Config_Ptr -> initial_value);
    2d16:	ac e4       	ldi	r26, 0x4C	; 76
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	11 96       	adiw	r26, 0x01	; 1
    2d24:	9c 93       	st	X, r25
    2d26:	8e 93       	st	-X, r24


	if((Config_Ptr->mode)==COMPARE)
    2d28:	e9 81       	ldd	r30, Y+1	; 0x01
    2d2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d2c:	85 81       	ldd	r24, Z+5	; 0x05
    2d2e:	88 30       	cpi	r24, 0x08	; 8
    2d30:	29 f5       	brne	.+74     	; 0x2d7c <Timer1_init+0x74>
	{
		//choose CMP mode
		TCCR1B = (TCCR1B ) | (Config_Ptr -> mode);
    2d32:	ae e4       	ldi	r26, 0x4E	; 78
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	ee e4       	ldi	r30, 0x4E	; 78
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	90 81       	ld	r25, Z
    2d3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d40:	85 81       	ldd	r24, Z+5	; 0x05
    2d42:	89 2b       	or	r24, r25
    2d44:	8c 93       	st	X, r24
		//set compare value
		OCR1A = (Config_Ptr -> compare_value);
    2d46:	aa e4       	ldi	r26, 0x4A	; 74
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4e:	82 81       	ldd	r24, Z+2	; 0x02
    2d50:	93 81       	ldd	r25, Z+3	; 0x03
    2d52:	11 96       	adiw	r26, 0x01	; 1
    2d54:	9c 93       	st	X, r25
    2d56:	8e 93       	st	-X, r24
		/*Force Output Compare for Compare unit A */
		TCCR1A = (1<<FOC1A);
    2d58:	ef e4       	ldi	r30, 0x4F	; 79
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	88 e0       	ldi	r24, 0x08	; 8
    2d5e:	80 83       	st	Z, r24
		// Set prescaler
		TCCR1B = (TCCR1B) | (Config_Ptr -> prescaler);
    2d60:	ae e4       	ldi	r26, 0x4E	; 78
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	ee e4       	ldi	r30, 0x4E	; 78
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	90 81       	ld	r25, Z
    2d6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d6e:	84 81       	ldd	r24, Z+4	; 0x04
    2d70:	89 2b       	or	r24, r25
    2d72:	8c 93       	st	X, r24


		// Enable compare interrupt
		TIMSK =  (1<<OCIE1A);
    2d74:	e9 e5       	ldi	r30, 0x59	; 89
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 e1       	ldi	r24, 0x10	; 16
    2d7a:	80 83       	st	Z, r24

	}
	if ((Config_Ptr -> mode) == NORMAL)
    2d7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d80:	85 81       	ldd	r24, Z+5	; 0x05
    2d82:	88 23       	and	r24, r24
    2d84:	71 f4       	brne	.+28     	; 0x2da2 <Timer1_init+0x9a>
	{


		// Set prescaler
		TCCR1B = (TCCR1B) | (Config_Ptr -> prescaler);
    2d86:	ae e4       	ldi	r26, 0x4E	; 78
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	ee e4       	ldi	r30, 0x4E	; 78
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	90 81       	ld	r25, Z
    2d90:	e9 81       	ldd	r30, Y+1	; 0x01
    2d92:	fa 81       	ldd	r31, Y+2	; 0x02
    2d94:	84 81       	ldd	r24, Z+4	; 0x04
    2d96:	89 2b       	or	r24, r25
    2d98:	8c 93       	st	X, r24
		// Enable overflow interrupt
		TIMSK = (1<<TOIE1);
    2d9a:	e9 e5       	ldi	r30, 0x59	; 89
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	84 e0       	ldi	r24, 0x04	; 4
    2da0:	80 83       	st	Z, r24

	}



}
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <Timer1_deInit>:

void Timer1_deInit(void)
{
    2dac:	df 93       	push	r29
    2dae:	cf 93       	push	r28
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
	TCCR1A =0 ;
    2db4:	ef e4       	ldi	r30, 0x4F	; 79
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	10 82       	st	Z, r1
	TCCR1B =0 ;
    2dba:	ee e4       	ldi	r30, 0x4E	; 78
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	10 82       	st	Z, r1
	TCNT1 = 0 ;
    2dc0:	ec e4       	ldi	r30, 0x4C	; 76
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	11 82       	std	Z+1, r1	; 0x01
    2dc6:	10 82       	st	Z, r1
	OCR1A = 0 ;
    2dc8:	ea e4       	ldi	r30, 0x4A	; 74
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	11 82       	std	Z+1, r1	; 0x01
    2dce:	10 82       	st	Z, r1
	TIMSK = 0 ;
    2dd0:	e9 e5       	ldi	r30, 0x59	; 89
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	10 82       	st	Z, r1
	//g_callBackPtr = NULL_PTR ;
}
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <Timer1_setCallBack+0x6>
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	9a 83       	std	Y+2, r25	; 0x02
    2de8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	9a 81       	ldd	r25, Y+2	; 0x02
    2dee:	90 93 78 01 	sts	0x0178, r25
    2df2:	80 93 77 01 	sts	0x0177, r24


}
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	08 95       	ret

00002e00 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2e00:	df 93       	push	r29
    2e02:	cf 93       	push	r28
    2e04:	00 d0       	rcall	.+0      	; 0x2e06 <UART_init+0x6>
    2e06:	00 d0       	rcall	.+0      	; 0x2e08 <UART_init+0x8>
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	9c 83       	std	Y+4, r25	; 0x04
    2e0e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2e10:	1a 82       	std	Y+2, r1	; 0x02
    2e12:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2e14:	eb e2       	ldi	r30, 0x2B	; 43
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 --> configured
	 * XB8 & TXB8 not used for 8-bit data mode
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2e1c:	ea e2       	ldi	r30, 0x2A	; 42
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	88 e1       	ldi	r24, 0x18	; 24
    2e22:	80 83       	st	Z, r24
	/*
	 * to insert the bit number two in UCSRB with 0 or 1 based on  it's value
	 * performs a bitwise OR operation between the current value of UCSRB and the
	 *  result of the expression ((Config_Ptr -> bit_data) & (0x04))
	 */
	UCSRB = UCSRB | ((Config_Ptr -> bit_data) & (0x04));
    2e24:	aa e2       	ldi	r26, 0x2A	; 42
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	ea e2       	ldi	r30, 0x2A	; 42
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	98 2f       	mov	r25, r24
    2e30:	eb 81       	ldd	r30, Y+3	; 0x03
    2e32:	fc 81       	ldd	r31, Y+4	; 0x04
    2e34:	80 81       	ld	r24, Z
    2e36:	84 70       	andi	r24, 0x04	; 4
    2e38:	89 2b       	or	r24, r25
    2e3a:	8c 93       	st	X, r24
	 * Bit 5:4 – UPM1:0 --> (parity) configured
	 * Bit 3 – USBS --> (stop bit select) configured
	 * Bit 2:1 – UCSZ1:0 --> configured
	 * Bit 0 – UCPOL = 0 Used with the Synchronous operation only
	 */
	UCSRC =  ((Config_Ptr -> parity)<<4) | (1<<URSEL) | ((Config_Ptr -> stop_bit)<<3) ;
    2e3c:	a0 e4       	ldi	r26, 0x40	; 64
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	eb 81       	ldd	r30, Y+3	; 0x03
    2e42:	fc 81       	ldd	r31, Y+4	; 0x04
    2e44:	81 81       	ldd	r24, Z+1	; 0x01
    2e46:	88 2f       	mov	r24, r24
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	82 95       	swap	r24
    2e4c:	92 95       	swap	r25
    2e4e:	90 7f       	andi	r25, 0xF0	; 240
    2e50:	98 27       	eor	r25, r24
    2e52:	80 7f       	andi	r24, 0xF0	; 240
    2e54:	98 27       	eor	r25, r24
    2e56:	28 2f       	mov	r18, r24
    2e58:	20 68       	ori	r18, 0x80	; 128
    2e5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e5e:	82 81       	ldd	r24, Z+2	; 0x02
    2e60:	88 2f       	mov	r24, r24
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	88 0f       	add	r24, r24
    2e66:	99 1f       	adc	r25, r25
    2e68:	88 0f       	add	r24, r24
    2e6a:	99 1f       	adc	r25, r25
    2e6c:	88 0f       	add	r24, r24
    2e6e:	99 1f       	adc	r25, r25
    2e70:	82 2b       	or	r24, r18
    2e72:	8c 93       	st	X, r24
	UCSRC =  UCSRC | ( (((Config_Ptr -> bit_data) & 0x03) <<1) );
    2e74:	a0 e4       	ldi	r26, 0x40	; 64
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e0 e4       	ldi	r30, 0x40	; 64
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	28 2f       	mov	r18, r24
    2e80:	eb 81       	ldd	r30, Y+3	; 0x03
    2e82:	fc 81       	ldd	r31, Y+4	; 0x04
    2e84:	80 81       	ld	r24, Z
    2e86:	88 2f       	mov	r24, r24
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	83 70       	andi	r24, 0x03	; 3
    2e8c:	90 70       	andi	r25, 0x00	; 0
    2e8e:	88 0f       	add	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	82 2b       	or	r24, r18
    2e94:	8c 93       	st	X, r24


	ubrr_value =(uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    2e96:	eb 81       	ldd	r30, Y+3	; 0x03
    2e98:	fc 81       	ldd	r31, Y+4	; 0x04
    2e9a:	83 81       	ldd	r24, Z+3	; 0x03
    2e9c:	94 81       	ldd	r25, Z+4	; 0x04
    2e9e:	a5 81       	ldd	r26, Z+5	; 0x05
    2ea0:	b6 81       	ldd	r27, Z+6	; 0x06
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	aa 1f       	adc	r26, r26
    2ea8:	bb 1f       	adc	r27, r27
    2eaa:	88 0f       	add	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	aa 1f       	adc	r26, r26
    2eb0:	bb 1f       	adc	r27, r27
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	aa 1f       	adc	r26, r26
    2eb8:	bb 1f       	adc	r27, r27
    2eba:	9c 01       	movw	r18, r24
    2ebc:	ad 01       	movw	r20, r26
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	92 e1       	ldi	r25, 0x12	; 18
    2ec2:	aa e7       	ldi	r26, 0x7A	; 122
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	bc 01       	movw	r22, r24
    2ec8:	cd 01       	movw	r24, r26
    2eca:	0e 94 5d 18 	call	0x30ba	; 0x30ba <__udivmodsi4>
    2ece:	da 01       	movw	r26, r20
    2ed0:	c9 01       	movw	r24, r18
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	9a 83       	std	Y+2, r25	; 0x02
    2ed6:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2ed8:	e0 e4       	ldi	r30, 0x40	; 64
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee0:	89 2f       	mov	r24, r25
    2ee2:	99 27       	eor	r25, r25
    2ee4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2ee6:	e9 e2       	ldi	r30, 0x29	; 41
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	80 83       	st	Z, r24

}
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	cf 91       	pop	r28
    2ef8:	df 91       	pop	r29
    2efa:	08 95       	ret

00002efc <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2efc:	df 93       	push	r29
    2efe:	cf 93       	push	r28
    2f00:	0f 92       	push	r0
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
    2f06:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2f08:	eb e2       	ldi	r30, 0x2B	; 43
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	88 2f       	mov	r24, r24
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	80 72       	andi	r24, 0x20	; 32
    2f14:	90 70       	andi	r25, 0x00	; 0
    2f16:	00 97       	sbiw	r24, 0x00	; 0
    2f18:	b9 f3       	breq	.-18     	; 0x2f08 <UART_sendByte+0xc>

	/*
	* Put the required data in the UDR register and it also clear the UDRE flag as
	* the UDR register is not empty now
	*/
	UDR = data;
    2f1a:	ec e2       	ldi	r30, 0x2C	; 44
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2f22:	0f 90       	pop	r0
    2f24:	cf 91       	pop	r28
    2f26:	df 91       	pop	r29
    2f28:	08 95       	ret

00002f2a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2f2a:	df 93       	push	r29
    2f2c:	cf 93       	push	r28
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2f32:	eb e2       	ldi	r30, 0x2B	; 43
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	88 23       	and	r24, r24
    2f3a:	dc f7       	brge	.-10     	; 0x2f32 <UART_recieveByte+0x8>
	/*
	* Read the received data from the Rx buffer (UDR)
	* The RXC flag will be cleared after read the data
	*/
	return UDR;
    2f3c:	ec e2       	ldi	r30, 0x2C	; 44
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
}
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	00 d0       	rcall	.+0      	; 0x2f4e <UART_sendString+0x6>
    2f4e:	0f 92       	push	r0
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
    2f54:	9b 83       	std	Y+3, r25	; 0x03
    2f56:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f58:	19 82       	std	Y+1, r1	; 0x01
    2f5a:	0e c0       	rjmp	.+28     	; 0x2f78 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2f5c:	89 81       	ldd	r24, Y+1	; 0x01
    2f5e:	28 2f       	mov	r18, r24
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	8a 81       	ldd	r24, Y+2	; 0x02
    2f64:	9b 81       	ldd	r25, Y+3	; 0x03
    2f66:	fc 01       	movw	r30, r24
    2f68:	e2 0f       	add	r30, r18
    2f6a:	f3 1f       	adc	r31, r19
    2f6c:	80 81       	ld	r24, Z
    2f6e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <UART_sendByte>
		i++;
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
    2f74:	8f 5f       	subi	r24, 0xFF	; 255
    2f76:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f80:	9b 81       	ldd	r25, Y+3	; 0x03
    2f82:	fc 01       	movw	r30, r24
    2f84:	e2 0f       	add	r30, r18
    2f86:	f3 1f       	adc	r31, r19
    2f88:	80 81       	ld	r24, Z
    2f8a:	88 23       	and	r24, r24
    2f8c:	39 f7       	brne	.-50     	; 0x2f5c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2f8e:	0f 90       	pop	r0
    2f90:	0f 90       	pop	r0
    2f92:	0f 90       	pop	r0
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
    2f9e:	df 93       	push	r29
    2fa0:	cf 93       	push	r28
    2fa2:	00 d0       	rcall	.+0      	; 0x2fa4 <UART_receiveString+0xa>
    2fa4:	0f 92       	push	r0
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	9b 83       	std	Y+3, r25	; 0x03
    2fac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fae:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	28 2f       	mov	r18, r24
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fba:	8c 01       	movw	r16, r24
    2fbc:	02 0f       	add	r16, r18
    2fbe:	13 1f       	adc	r17, r19
    2fc0:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <UART_recieveByte>
    2fc4:	f8 01       	movw	r30, r16
    2fc6:	80 83       	st	Z, r24
    2fc8:	0f c0       	rjmp	.+30     	; 0x2fe8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	8f 5f       	subi	r24, 0xFF	; 255
    2fce:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2fd0:	89 81       	ldd	r24, Y+1	; 0x01
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fda:	8c 01       	movw	r16, r24
    2fdc:	02 0f       	add	r16, r18
    2fde:	13 1f       	adc	r17, r19
    2fe0:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <UART_recieveByte>
    2fe4:	f8 01       	movw	r30, r16
    2fe6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	e2 0f       	add	r30, r18
    2ff6:	f3 1f       	adc	r31, r19
    2ff8:	80 81       	ld	r24, Z
    2ffa:	83 32       	cpi	r24, 0x23	; 35
    2ffc:	31 f7       	brne	.-52     	; 0x2fca <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	28 2f       	mov	r18, r24
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	8a 81       	ldd	r24, Y+2	; 0x02
    3006:	9b 81       	ldd	r25, Y+3	; 0x03
    3008:	fc 01       	movw	r30, r24
    300a:	e2 0f       	add	r30, r18
    300c:	f3 1f       	adc	r31, r19
    300e:	10 82       	st	Z, r1
}
    3010:	0f 90       	pop	r0
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	1f 91       	pop	r17
    301c:	0f 91       	pop	r16
    301e:	08 95       	ret

00003020 <UART_sendArrOfData>:
/*
 * Description :
 * Send the required Data through UART to the other UART device.
 */
void UART_sendArrOfData(const uint8 *Data , uint8 size)
{
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	00 d0       	rcall	.+0      	; 0x3026 <UART_sendArrOfData+0x6>
    3026:	00 d0       	rcall	.+0      	; 0x3028 <UART_sendArrOfData+0x8>
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
    302c:	9b 83       	std	Y+3, r25	; 0x03
    302e:	8a 83       	std	Y+2, r24	; 0x02
    3030:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	/* Send the whole array  */
	for (i =0 ; i<size ; i++)
    3032:	19 82       	std	Y+1, r1	; 0x01
    3034:	0e c0       	rjmp	.+28     	; 0x3052 <UART_sendArrOfData+0x32>
	{
		UART_sendByte(Data[i]);
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	28 2f       	mov	r18, r24
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	9b 81       	ldd	r25, Y+3	; 0x03
    3040:	fc 01       	movw	r30, r24
    3042:	e2 0f       	add	r30, r18
    3044:	f3 1f       	adc	r31, r19
    3046:	80 81       	ld	r24, Z
    3048:	0e 94 7e 17 	call	0x2efc	; 0x2efc <UART_sendByte>
 */
void UART_sendArrOfData(const uint8 *Data , uint8 size)
{
	uint8 i;
	/* Send the whole array  */
	for (i =0 ; i<size ; i++)
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	8f 5f       	subi	r24, 0xFF	; 255
    3050:	89 83       	std	Y+1, r24	; 0x01
    3052:	99 81       	ldd	r25, Y+1	; 0x01
    3054:	8c 81       	ldd	r24, Y+4	; 0x04
    3056:	98 17       	cp	r25, r24
    3058:	70 f3       	brcs	.-36     	; 0x3036 <UART_sendArrOfData+0x16>
	{
		UART_sendByte(Data[i]);
	}

}
    305a:	0f 90       	pop	r0
    305c:	0f 90       	pop	r0
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	08 95       	ret

00003068 <UART_receiveArrOfData>:
/*
 * Description :
 * Receive the required Data u through UART from the other UART device.
 */
void UART_receiveArrOfData(uint8 *Data , uint8 size)
{
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	00 d0       	rcall	.+0      	; 0x3072 <UART_receiveArrOfData+0xa>
    3072:	00 d0       	rcall	.+0      	; 0x3074 <UART_receiveArrOfData+0xc>
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
    3078:	9b 83       	std	Y+3, r25	; 0x03
    307a:	8a 83       	std	Y+2, r24	; 0x02
    307c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i ;
	/* Receive the whole array */
	for (i=0 ; i <size ; i++)
    307e:	19 82       	std	Y+1, r1	; 0x01
    3080:	0f c0       	rjmp	.+30     	; 0x30a0 <UART_receiveArrOfData+0x38>
	{
		Data[i] = UART_recieveByte();
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	28 2f       	mov	r18, r24
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	8a 81       	ldd	r24, Y+2	; 0x02
    308a:	9b 81       	ldd	r25, Y+3	; 0x03
    308c:	8c 01       	movw	r16, r24
    308e:	02 0f       	add	r16, r18
    3090:	13 1f       	adc	r17, r19
    3092:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <UART_recieveByte>
    3096:	f8 01       	movw	r30, r16
    3098:	80 83       	st	Z, r24
 */
void UART_receiveArrOfData(uint8 *Data , uint8 size)
{
	uint8 i ;
	/* Receive the whole array */
	for (i=0 ; i <size ; i++)
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	8f 5f       	subi	r24, 0xFF	; 255
    309e:	89 83       	std	Y+1, r24	; 0x01
    30a0:	99 81       	ldd	r25, Y+1	; 0x01
    30a2:	8c 81       	ldd	r24, Y+4	; 0x04
    30a4:	98 17       	cp	r25, r24
    30a6:	68 f3       	brcs	.-38     	; 0x3082 <UART_receiveArrOfData+0x1a>
	{
		Data[i] = UART_recieveByte();
	}
}
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	1f 91       	pop	r17
    30b6:	0f 91       	pop	r16
    30b8:	08 95       	ret

000030ba <__udivmodsi4>:
    30ba:	a1 e2       	ldi	r26, 0x21	; 33
    30bc:	1a 2e       	mov	r1, r26
    30be:	aa 1b       	sub	r26, r26
    30c0:	bb 1b       	sub	r27, r27
    30c2:	fd 01       	movw	r30, r26
    30c4:	0d c0       	rjmp	.+26     	; 0x30e0 <__udivmodsi4_ep>

000030c6 <__udivmodsi4_loop>:
    30c6:	aa 1f       	adc	r26, r26
    30c8:	bb 1f       	adc	r27, r27
    30ca:	ee 1f       	adc	r30, r30
    30cc:	ff 1f       	adc	r31, r31
    30ce:	a2 17       	cp	r26, r18
    30d0:	b3 07       	cpc	r27, r19
    30d2:	e4 07       	cpc	r30, r20
    30d4:	f5 07       	cpc	r31, r21
    30d6:	20 f0       	brcs	.+8      	; 0x30e0 <__udivmodsi4_ep>
    30d8:	a2 1b       	sub	r26, r18
    30da:	b3 0b       	sbc	r27, r19
    30dc:	e4 0b       	sbc	r30, r20
    30de:	f5 0b       	sbc	r31, r21

000030e0 <__udivmodsi4_ep>:
    30e0:	66 1f       	adc	r22, r22
    30e2:	77 1f       	adc	r23, r23
    30e4:	88 1f       	adc	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	1a 94       	dec	r1
    30ea:	69 f7       	brne	.-38     	; 0x30c6 <__udivmodsi4_loop>
    30ec:	60 95       	com	r22
    30ee:	70 95       	com	r23
    30f0:	80 95       	com	r24
    30f2:	90 95       	com	r25
    30f4:	9b 01       	movw	r18, r22
    30f6:	ac 01       	movw	r20, r24
    30f8:	bd 01       	movw	r22, r26
    30fa:	cf 01       	movw	r24, r30
    30fc:	08 95       	ret

000030fe <__prologue_saves__>:
    30fe:	2f 92       	push	r2
    3100:	3f 92       	push	r3
    3102:	4f 92       	push	r4
    3104:	5f 92       	push	r5
    3106:	6f 92       	push	r6
    3108:	7f 92       	push	r7
    310a:	8f 92       	push	r8
    310c:	9f 92       	push	r9
    310e:	af 92       	push	r10
    3110:	bf 92       	push	r11
    3112:	cf 92       	push	r12
    3114:	df 92       	push	r13
    3116:	ef 92       	push	r14
    3118:	ff 92       	push	r15
    311a:	0f 93       	push	r16
    311c:	1f 93       	push	r17
    311e:	cf 93       	push	r28
    3120:	df 93       	push	r29
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
    3126:	ca 1b       	sub	r28, r26
    3128:	db 0b       	sbc	r29, r27
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	09 94       	ijmp

00003136 <__epilogue_restores__>:
    3136:	2a 88       	ldd	r2, Y+18	; 0x12
    3138:	39 88       	ldd	r3, Y+17	; 0x11
    313a:	48 88       	ldd	r4, Y+16	; 0x10
    313c:	5f 84       	ldd	r5, Y+15	; 0x0f
    313e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3140:	7d 84       	ldd	r7, Y+13	; 0x0d
    3142:	8c 84       	ldd	r8, Y+12	; 0x0c
    3144:	9b 84       	ldd	r9, Y+11	; 0x0b
    3146:	aa 84       	ldd	r10, Y+10	; 0x0a
    3148:	b9 84       	ldd	r11, Y+9	; 0x09
    314a:	c8 84       	ldd	r12, Y+8	; 0x08
    314c:	df 80       	ldd	r13, Y+7	; 0x07
    314e:	ee 80       	ldd	r14, Y+6	; 0x06
    3150:	fd 80       	ldd	r15, Y+5	; 0x05
    3152:	0c 81       	ldd	r16, Y+4	; 0x04
    3154:	1b 81       	ldd	r17, Y+3	; 0x03
    3156:	aa 81       	ldd	r26, Y+2	; 0x02
    3158:	b9 81       	ldd	r27, Y+1	; 0x01
    315a:	ce 0f       	add	r28, r30
    315c:	d1 1d       	adc	r29, r1
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	de bf       	out	0x3e, r29	; 62
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	cd bf       	out	0x3d, r28	; 61
    3168:	ed 01       	movw	r28, r26
    316a:	08 95       	ret

0000316c <itoa>:
    316c:	fb 01       	movw	r30, r22
    316e:	9f 01       	movw	r18, r30
    3170:	e8 94       	clt
    3172:	42 30       	cpi	r20, 0x02	; 2
    3174:	c4 f0       	brlt	.+48     	; 0x31a6 <itoa+0x3a>
    3176:	45 32       	cpi	r20, 0x25	; 37
    3178:	b4 f4       	brge	.+44     	; 0x31a6 <itoa+0x3a>
    317a:	4a 30       	cpi	r20, 0x0A	; 10
    317c:	29 f4       	brne	.+10     	; 0x3188 <itoa+0x1c>
    317e:	97 fb       	bst	r25, 7
    3180:	1e f4       	brtc	.+6      	; 0x3188 <itoa+0x1c>
    3182:	90 95       	com	r25
    3184:	81 95       	neg	r24
    3186:	9f 4f       	sbci	r25, 0xFF	; 255
    3188:	64 2f       	mov	r22, r20
    318a:	77 27       	eor	r23, r23
    318c:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__udivmodhi4>
    3190:	80 5d       	subi	r24, 0xD0	; 208
    3192:	8a 33       	cpi	r24, 0x3A	; 58
    3194:	0c f0       	brlt	.+2      	; 0x3198 <itoa+0x2c>
    3196:	89 5d       	subi	r24, 0xD9	; 217
    3198:	81 93       	st	Z+, r24
    319a:	cb 01       	movw	r24, r22
    319c:	00 97       	sbiw	r24, 0x00	; 0
    319e:	a1 f7       	brne	.-24     	; 0x3188 <itoa+0x1c>
    31a0:	16 f4       	brtc	.+4      	; 0x31a6 <itoa+0x3a>
    31a2:	5d e2       	ldi	r21, 0x2D	; 45
    31a4:	51 93       	st	Z+, r21
    31a6:	10 82       	st	Z, r1
    31a8:	c9 01       	movw	r24, r18
    31aa:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <strrev>

000031ae <strrev>:
    31ae:	dc 01       	movw	r26, r24
    31b0:	fc 01       	movw	r30, r24
    31b2:	67 2f       	mov	r22, r23
    31b4:	71 91       	ld	r23, Z+
    31b6:	77 23       	and	r23, r23
    31b8:	e1 f7       	brne	.-8      	; 0x31b2 <strrev+0x4>
    31ba:	32 97       	sbiw	r30, 0x02	; 2
    31bc:	04 c0       	rjmp	.+8      	; 0x31c6 <strrev+0x18>
    31be:	7c 91       	ld	r23, X
    31c0:	6d 93       	st	X+, r22
    31c2:	70 83       	st	Z, r23
    31c4:	62 91       	ld	r22, -Z
    31c6:	ae 17       	cp	r26, r30
    31c8:	bf 07       	cpc	r27, r31
    31ca:	c8 f3       	brcs	.-14     	; 0x31be <strrev+0x10>
    31cc:	08 95       	ret

000031ce <__udivmodhi4>:
    31ce:	aa 1b       	sub	r26, r26
    31d0:	bb 1b       	sub	r27, r27
    31d2:	51 e1       	ldi	r21, 0x11	; 17
    31d4:	07 c0       	rjmp	.+14     	; 0x31e4 <__udivmodhi4_ep>

000031d6 <__udivmodhi4_loop>:
    31d6:	aa 1f       	adc	r26, r26
    31d8:	bb 1f       	adc	r27, r27
    31da:	a6 17       	cp	r26, r22
    31dc:	b7 07       	cpc	r27, r23
    31de:	10 f0       	brcs	.+4      	; 0x31e4 <__udivmodhi4_ep>
    31e0:	a6 1b       	sub	r26, r22
    31e2:	b7 0b       	sbc	r27, r23

000031e4 <__udivmodhi4_ep>:
    31e4:	88 1f       	adc	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	5a 95       	dec	r21
    31ea:	a9 f7       	brne	.-22     	; 0x31d6 <__udivmodhi4_loop>
    31ec:	80 95       	com	r24
    31ee:	90 95       	com	r25
    31f0:	bc 01       	movw	r22, r24
    31f2:	cd 01       	movw	r24, r26
    31f4:	08 95       	ret

000031f6 <_exit>:
    31f6:	f8 94       	cli

000031f8 <__stop_program>:
    31f8:	ff cf       	rjmp	.-2      	; 0x31f8 <__stop_program>
