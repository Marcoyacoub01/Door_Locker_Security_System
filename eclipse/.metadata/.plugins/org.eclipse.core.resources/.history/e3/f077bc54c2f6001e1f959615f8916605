/*
 * FINAL PROJECT
 *
 * File Name: Control_ECU.h
 *
 * Author: MARCO
 */

#ifndef CONTROL_ECU_H_
#define CONTROL_ECU_H_


#include <avr/io.h>
#include <util/delay.h>
#include "buzzer.h"
#include "dcMotor.h"
#include "external_eeprom.h"
#include "gpio.h"
#include "timer1.h"
#include "twi.h"
#include "uart.h"
#include "lcd.h"


/****************************************************************************************************
 * 												MACROS
 ***************************************************************************************************/
#define READY                  0x10 //used in sync_send() and sync_recive() functions for synchronization

#define MATCHED_PASSWORDS      1 // agreement between the two MCUs after checking the passwords
#define UNMATCHED_PASSWORDS    0 // agreement between the two MCUs after checking the passwords
/*
 * agreement between the two MCUS when we want to create system password
 */
#define CREATE_SYSTEM_PASSWORD 0xFA
/*
 * agreement between the two MCUS when we want to start MENU + or - for open or change passwords
 */
#define MENU                   0xFB
/* this Macros is used for door operation
 * agreement between the two MCUS when the door operation is finished
 */
#define DONE_DOOR_OPERATION    0xFC
/*
 * agreement between the two MCUS when the system is locked
 */
#define LOCKED                 0xFD
/*******************************************************************************************************
 * 												  Functions Definitions
 ******************************************************************************************************/

uint8 seconds = 0 ;
/*timer1 call back function*/
void count_second()
{
	seconds++;
}

/*
 * Description :
 * intializations of the global interrupt , Buzzer , DcMotor , TIMER1, I2C , LCD , UART and LCD
 */

void initialization(void)
{
	SREG|=(1<<7);
	Buzzer_init();
	DcMotor_Init();
	Timer1_setCallBack(count_second);
	Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
	//Timer1_init(&timer1_configurations);
	TWI_ConfigType twi_configurations = {0x10,400000};
	TWI_init(&twi_configurations);
	UART_ConfigType uart_configurations = {DATA_8_BIT,DISABLED,ONE_STOP_BIT,9600};
	UART_init(&uart_configurations);
	LCD_init();
	_delay_ms(300);
}

/*
 * Description :
 * sync the time of send and recive between the UARTs
 */
void sync_send(void)
{
	UART_sendByte(READY);
	while(UART_recieveByte()!=READY);
}

/*
 * Description :
 * sync the time of send and recive between the UARTs
 */
void sync_recive(void)
{
	while(UART_recieveByte()!=READY);
	UART_sendByte(READY);
}

/*
 * Description :
 * This function is responsible for sending the password from one Microcontroller to the other
 * through UART
 * and this function calls sync_send() to start sending
 */
void send_pass(uint8 *pass)
{
	uint8 i;
	sync_send();
	for (i = 0 ; i<5 ; i++)
	{
			UART_sendByte(pass[i]);
	}
}

/*
 * Description:
 * Receives a 5-digits password via UART from another microcontroller after
 * initiating reception with sync_receive().
 * Stores the received password in the specified array.
 *
 * Parameters:
 * uint8 *receive_pass: Pointer to an array where the received password will be stored.
 */
void recive_password(uint8 *recive_pass)
{
	uint8 i ;
	sync_recive();
	for (i = 0 ; i<5 ; i++)
		{
			recive_pass[i] = UART_recieveByte();
		}
}

/*
 * Description :
 * This function is responsible for compare between two passwords
 * if matched it will return  one  which is matched
 * if not matched it will return  zero  which is unmatched
 */
uint8 check_passwords(uint8 *check_password_one,uint8 *check_password_two)
{
	uint8 i;
	uint8  two_passwords_are_equal = 1; // Assume arrays are equal by default
	for (i = 0 ; i<5 ; i++)
	{
		 if (check_password_one[i] != check_password_two[i])
		 {
		     return 0;
		 }
	}
	return two_passwords_are_equal;
}

/*
 * Description:
 * Writes a 5-digits(uint8) password to EEPROM memory starting from address 0x0311.
 * Delays 10 milliseconds after each digit write.
 *
 * Parameters:
 * uint8 *password: Pointer to an array containing the password to be written.
 */
void write_to_eeprom(uint8 *password)
{
	uint8 i;
	for (i =0 ;i<5 ; i++)
			{
				EEPROM_writeByte((0x0311+i),password[i]);
				_delay_ms(10);
			}
}

/*
 * Description:
 * Reads a 5-digits(uint8)  password from EEPROM starting at address 0x311.
 * Delays 10 milliseconds after each character read.
 *
 * Parameters:
 * uint8 *password_eeprom: Pointer to an array where the read password will be stored.
 */
void read_from_eeprom(uint8 *password_epprom)
{
	uint8 i;
	for (i =0 ;i<5 ; i++)
			{
				EEPROM_readByte((0x311+i),&password_epprom[i]);
				_delay_ms(10);
			}
}

/*
 * Description:
 *  Initiates timer1 and start count the seconds and open the door using motor for a specific time
 *
 */
void open_door(void)
{

	LCD_clearScreen();
	Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
	Timer1_init(&timer1_configurations);
	seconds=0;
	LCD_displayString("Unlocking Door");
	LCD_moveCursor(1,0);
	LCD_displayString("Sec :");
	while(seconds !=15)
	{
		LCD_moveCursor(1,5);
		LCD_intgerToString(seconds+1);
		DcMotor_Rotate(CW,100);
	}
	DcMotor_Rotate(STOP,0);
	Timer1_deInit();
}

/*
 * Description:
 *  Initiates timer1 and start count the seconds and hold the door using motor for a specific time
 *
 */
void hold_door(void)
{
	LCD_clearScreen();
	Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
    Timer1_init(&timer1_configurations);
	seconds=0;
	LCD_displayString("DOOR IS OPEN");
	LCD_moveCursor(1,0);
	LCD_displayString("Sec :");
	while(seconds !=3)
	{
		LCD_moveCursor(1,5);
		LCD_intgerToString(seconds+1);
		DcMotor_Rotate(STOP,0);
	}
	Timer1_deInit();
}

/*
 * Description:
 *  Initiates timer1 and start count the seconds and close the door using motor for a specific time
 *
 */
void close_door()
{
	LCD_clearScreen();
	Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
	Timer1_init(&timer1_configurations);
	seconds=0;
	LCD_displayString("Door Is Locking");
	LCD_moveCursor(1,0);
	LCD_displayString("Sec :");
	while(seconds !=15)
	{
		LCD_moveCursor(1,5);
		LCD_intgerToString(seconds+1);
		DcMotor_Rotate(A_CW,100);
	}
	DcMotor_Rotate(STOP,0);
	Timer1_deInit();
}

/*
 * Description:
 *  this function is responsible for open door operation open , hold and close
 *  this function calls three main functions open_door() ,  hold_door() and close_door()
 *
 *
 */
void door_operation(void)
{

		open_door();

		hold_door();

		close_door();

		sync_send();
		UART_sendByte(DONE_DOOR_OPERATION); //send this byte to the HMI_ECU to tell him Control_ECU done the operation
		LCD_clearScreen();
}

/*
 * Description:
 *  this function is responsible for active buzzer for 1 minute using Timer1
 *
 */
void system_locked(void)
{
	LCD_clearScreen();
	Timer1_ConfigType timer1_configurations = {0,7812,F_CPU_1024,COMPARE};
	Timer1_init(&timer1_configurations);
	seconds=0;
	LCD_displayString("BUZZER IS ON");
	LCD_moveCursor(1,0);
	LCD_displayString("Sec :");
	Buzzer_on();
	while(seconds !=60)
	{
		LCD_moveCursor(1,5);
		LCD_intgerToString(seconds+1);
	}
	LCD_clearScreen();
	Buzzer_off();
	seconds=0;
	LCD_displayString("LOCKED SYSTEM");
	LCD_moveCursor(1,0);
	LCD_displayString("Sec :");
	while(seconds !=60)
	{
		LCD_moveCursor(1,5);
		LCD_intgerToString(seconds+1);
	}
	LCD_clearScreen();
	Timer1_deInit();
}

/*
 * Description:
 * This function is designed to ensure the accurate reception and display of password digits on
 *  the developer LCD to be able to debug
 */
void print_pass(uint8 *pass)
{
	uint8 i ;
	for(i=0;i<5;i++)
	{
		LCD_intgerToString(pass[i]);
	}
}

/*
 * Description:
 * This function prints "MATCHED PASSWORDS" in lcd
 */
void display_matched_on_lcd(void)
{
	LCD_clearScreen();
	LCD_moveCursor(0,4);
	LCD_displayString("MATCHED");
	LCD_moveCursor(1,3);
	LCD_displayString("PASSWORDS");
	_delay_ms(1000);
	LCD_clearScreen();
}

/*
 * Description:
 * This function prints "UNMATCHED PASSWORDS" in lcd
 */
void display_unmatched_on_lcd(void)
{
	LCD_clearScreen();
	LCD_moveCursor(0,3);
	LCD_displayString("UNMATCHED");
	LCD_moveCursor(1,3);
	LCD_displayString("PASSWORDS");
	_delay_ms(1000);
	LCD_clearScreen();
}


#endif /* CONTROL_ECU_H_ */
